%!PS-Adobe-3.0 EPSF-3.0
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 208 38
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
4.725 w
/DeviceRGB {} CS
[0 0 0] SC
2029.5 35.4492 m
1746 35.4492 l
S
2043.68 63.8008 m
1760.18 63.8008 l
S
1179 35.4492 m
895.5 35.4492 l
S
1193.18 63.8008 m
909.676 63.8008 l
S
/DeviceRGB {} cs
[1 1 1] sc
1746 49.625 m
1462.5 49.625 l
f*
[28.35] 0 d
1746 49.625 m
1462.5 49.625 l
S
1462.5 49.625 m
1179 49.625 l
f*
1462.5 49.625 m
1179 49.625 l
S
[] 0 d
356.852 49.625 m
73.3516 49.625 l
S
/DeviceGray {} cs
[0] sc
328.5 49.625 m
470.25 49.625 l
f*
328.5 49.625 m
470.25 49.625 l
S
753.75 49.625 m
895.5 49.625 l
f*
753.75 49.625 m
895.5 49.625 l
S
/DeviceRGB {} cs
[1 1 1] sc
328.5 49.625 m
328.5 333.125 l
f*
[28.35] 0 d
328.5 49.625 m
328.5 333.125 l
S
2071.39 51.1992 m
2071.39 29.1055 2053.48 11.1953 2031.39 11.1953 c
2009.3 11.1953 1991.39 29.1055 1991.39 51.1992 c
1991.39 73.293 2009.3 91.2031 2031.39 91.2031 c
2053.48 91.2031 2071.39 73.293 2071.39 51.1992 c
f*
[] 0 d
2071.39 51.1992 m
2071.39 29.1055 2053.48 11.1953 2031.39 11.1953 c
2009.3 11.1953 1991.39 29.1055 1991.39 51.1992 c
1991.39 73.293 2009.3 91.2031 2031.39 91.2031 c
2053.48 91.2031 2071.39 73.293 2071.39 51.1992 c
h
S
1942.25 35.4492 m
1946.97 35.4492 l
S
1916.1 7.1016 m
1944.45 49.625 l
1916.1 92.1484 l
S
1786 49.625 m
1786 27.5312 1768.09 9.6211 1746 9.6211 c
1723.91 9.6211 1706 27.5312 1706 49.625 c
1706 71.7188 1723.91 89.6289 1746 89.6289 c
1768.09 89.6289 1786 71.7188 1786 49.625 c
f*
1786 49.625 m
1786 27.5312 1768.09 9.6211 1746 9.6211 c
1723.91 9.6211 1706 27.5312 1706 49.625 c
1706 71.7188 1723.91 89.6289 1746 89.6289 c
1768.09 89.6289 1786 71.7188 1786 49.625 c
h
S
1220.89 51.1992 m
1220.89 29.1055 1202.98 11.1953 1180.89 11.1953 c
1158.8 11.1953 1140.89 29.1055 1140.89 51.1992 c
1140.89 73.293 1158.8 91.2031 1180.89 91.2031 c
1202.98 91.2031 1220.89 73.293 1220.89 51.1992 c
f*
1220.89 51.1992 m
1220.89 29.1055 1202.98 11.1953 1180.89 11.1953 c
1158.8 11.1953 1140.89 29.1055 1140.89 51.1992 c
1140.89 73.293 1158.8 91.2031 1180.89 91.2031 c
1202.98 91.2031 1220.89 73.293 1220.89 51.1992 c
h
S
1091.75 35.4492 m
1096.47 35.4492 l
S
1065.6 7.1016 m
1093.95 49.625 l
1065.6 92.1484 l
S
935.504 49.625 m
935.504 27.5312 917.594 9.6211 895.5 9.6211 c
873.406 9.6211 855.496 27.5312 855.496 49.625 c
855.496 71.7188 873.406 89.6289 895.5 89.6289 c
917.594 89.6289 935.504 71.7188 935.504 49.625 c
f*
935.504 49.625 m
935.504 27.5312 917.594 9.6211 895.5 9.6211 c
873.406 9.6211 855.496 27.5312 855.496 49.625 c
855.496 71.7188 873.406 89.6289 895.5 89.6289 c
917.594 89.6289 935.504 71.7188 935.504 49.625 c
h
S
/DeviceGray {} cs
[0] sc
559.078 49.625 m
559.078 42.3203 553.156 36.3945 545.852 36.3945 c
538.547 36.3945 532.621 42.3203 532.621 49.625 c
532.621 56.9297 538.547 62.8555 545.852 62.8555 c
553.156 62.8555 559.078 56.9297 559.078 49.625 c
f*
2.3625 w
559.078 49.625 m
559.078 42.3203 553.156 36.3945 545.852 36.3945 c
538.547 36.3945 532.621 42.3203 532.621 49.625 c
532.621 56.9297 538.547 62.8555 545.852 62.8555 c
553.156 62.8555 559.078 56.9297 559.078 49.625 c
h
S
625.23 49.625 m
625.23 42.3203 619.305 36.3945 612 36.3945 c
604.695 36.3945 598.77 42.3203 598.77 49.625 c
598.77 56.9297 604.695 62.8555 612 62.8555 c
619.305 62.8555 625.23 56.9297 625.23 49.625 c
f*
625.23 49.625 m
625.23 42.3203 619.305 36.3945 612 36.3945 c
604.695 36.3945 598.77 42.3203 598.77 49.625 c
598.77 56.9297 604.695 62.8555 612 62.8555 c
619.305 62.8555 625.23 56.9297 625.23 49.625 c
h
S
696.105 49.625 m
696.105 42.3203 690.18 36.3945 682.875 36.3945 c
675.57 36.3945 669.645 42.3203 669.645 49.625 c
669.645 56.9297 675.57 62.8555 682.875 62.8555 c
690.18 62.8555 696.105 56.9297 696.105 49.625 c
f*
696.105 49.625 m
696.105 42.3203 690.18 36.3945 682.875 36.3945 c
675.57 36.3945 669.645 42.3203 669.645 49.625 c
669.645 56.9297 675.57 62.8555 682.875 62.8555 c
690.18 62.8555 696.105 56.9297 696.105 49.625 c
h
S
/DeviceRGB {} cs
[1 1 1] sc
1502.5 49.625 m
1502.5 27.5312 1484.59 9.6211 1462.5 9.6211 c
1440.41 9.6211 1422.5 27.5312 1422.5 49.625 c
1422.5 71.7188 1440.41 89.6289 1462.5 89.6289 c
1484.59 89.6289 1502.5 71.7188 1502.5 49.625 c
f*
[28.35] 0 d
4.725 w
1502.5 49.625 m
1502.5 27.5312 1484.59 9.6211 1462.5 9.6211 c
1440.41 9.6211 1422.5 27.5312 1422.5 49.625 c
1422.5 71.7188 1440.41 89.6289 1462.5 89.6289 c
1484.59 89.6289 1502.5 71.7188 1502.5 49.625 c
h
S
85.0039 49.625 m
85.0039 27.5312 67.0938 9.6211 45 9.6211 c
22.9062 9.6211 4.9961 27.5312 4.9961 49.625 c
4.9961 71.7188 22.9062 89.6289 45 89.6289 c
67.0938 89.6289 85.0039 71.7188 85.0039 49.625 c
f*
[] 0 d
85.0039 49.625 m
85.0039 27.5312 67.0938 9.6211 45 9.6211 c
22.9062 9.6211 4.9961 27.5312 4.9961 49.625 c
4.9961 71.7188 22.9062 89.6289 45 89.6289 c
67.0938 89.6289 85.0039 71.7188 85.0039 49.625 c
h
S
368.504 49.625 m
368.504 27.5312 350.594 9.6211 328.5 9.6211 c
306.406 9.6211 288.496 27.5312 288.496 49.625 c
288.496 71.7188 306.406 89.6289 328.5 89.6289 c
350.594 89.6289 368.504 71.7188 368.504 49.625 c
f*
368.504 49.625 m
368.504 27.5312 350.594 9.6211 328.5 9.6211 c
306.406 9.6211 288.496 27.5312 288.496 49.625 c
288.496 71.7188 306.406 89.6289 328.5 89.6289 c
350.594 89.6289 368.504 71.7188 368.504 49.625 c
h
S
368.504 333.125 m
368.504 311.031 350.594 293.121 328.5 293.121 c
306.406 293.121 288.496 311.031 288.496 333.125 c
288.496 355.219 306.406 373.129 328.5 373.129 c
350.594 373.129 368.504 355.219 368.504 333.125 c
f*
[28.35] 0 d
368.504 333.125 m
368.504 311.031 350.594 293.121 328.5 293.121 c
306.406 293.121 288.496 311.031 288.496 333.125 c
288.496 355.219 306.406 373.129 328.5 373.129 c
350.594 373.129 368.504 355.219 368.504 333.125 c
h
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
