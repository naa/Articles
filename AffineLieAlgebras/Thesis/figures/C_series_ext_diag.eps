%!PS-Adobe-3.0 EPSF-3.0
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 151 10
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
4.725 w
/DeviceRGB {} CS
[0 0 0] SC
328.375 35.4492 m
44.875 35.4492 l
S
342.551 63.8008 m
59.0508 63.8008 l
S
611.875 49.625 m
328.375 49.625 l
S
/DeviceGray {} cs
[0] sc
611.875 49.625 m
753.625 49.625 l
f*
611.875 49.625 m
753.625 49.625 l
S
1037.12 49.625 m
1178.88 49.625 l
f*
1037.12 49.625 m
1178.88 49.625 l
S
1462.38 35.4492 m
1178.88 35.4492 l
S
1476.55 63.8008 m
1193.05 63.8008 l
S
/DeviceRGB {} cs
[1 1 1] sc
370.27 51.1992 m
370.27 29.1055 352.359 11.1953 330.266 11.1953 c
308.172 11.1953 290.262 29.1055 290.262 51.1992 c
290.262 73.293 308.172 91.2031 330.266 91.2031 c
352.359 91.2031 370.27 73.293 370.27 51.1992 c
f*
370.27 51.1992 m
370.27 29.1055 352.359 11.1953 330.266 11.1953 c
308.172 11.1953 290.262 29.1055 290.262 51.1992 c
290.262 73.293 308.172 91.2031 330.266 91.2031 c
352.359 91.2031 370.27 73.293 370.27 51.1992 c
h
S
241.121 35.4492 m
245.844 35.4492 l
S
214.977 7.1016 m
243.324 49.625 l
214.977 92.1484 l
S
84.8789 49.625 m
84.8789 27.5312 66.9688 9.6211 44.875 9.6211 c
22.7812 9.6211 4.8711 27.5312 4.8711 49.625 c
4.8711 71.7188 22.7812 89.6289 44.875 89.6289 c
66.9688 89.6289 84.8789 71.7188 84.8789 49.625 c
f*
84.8789 49.625 m
84.8789 27.5312 66.9688 9.6211 44.875 9.6211 c
22.7812 9.6211 4.8711 27.5312 4.8711 49.625 c
4.8711 71.7188 22.7812 89.6289 44.875 89.6289 c
66.9688 89.6289 84.8789 71.7188 84.8789 49.625 c
h
S
/DeviceGray {} cs
[0] sc
842.453 49.625 m
842.453 42.3203 836.531 36.3945 829.227 36.3945 c
821.922 36.3945 815.996 42.3203 815.996 49.625 c
815.996 56.9297 821.922 62.8555 829.227 62.8555 c
836.531 62.8555 842.453 56.9297 842.453 49.625 c
f*
2.3625 w
842.453 49.625 m
842.453 42.3203 836.531 36.3945 829.227 36.3945 c
821.922 36.3945 815.996 42.3203 815.996 49.625 c
815.996 56.9297 821.922 62.8555 829.227 62.8555 c
836.531 62.8555 842.453 56.9297 842.453 49.625 c
h
S
908.605 49.625 m
908.605 42.3203 902.68 36.3945 895.375 36.3945 c
888.07 36.3945 882.145 42.3203 882.145 49.625 c
882.145 56.9297 888.07 62.8555 895.375 62.8555 c
902.68 62.8555 908.605 56.9297 908.605 49.625 c
f*
908.605 49.625 m
908.605 42.3203 902.68 36.3945 895.375 36.3945 c
888.07 36.3945 882.145 42.3203 882.145 49.625 c
882.145 56.9297 888.07 62.8555 895.375 62.8555 c
902.68 62.8555 908.605 56.9297 908.605 49.625 c
h
S
979.48 49.625 m
979.48 42.3203 973.555 36.3945 966.25 36.3945 c
958.945 36.3945 953.02 42.3203 953.02 49.625 c
953.02 56.9297 958.945 62.8555 966.25 62.8555 c
973.555 62.8555 979.48 56.9297 979.48 49.625 c
f*
979.48 49.625 m
979.48 42.3203 973.555 36.3945 966.25 36.3945 c
958.945 36.3945 953.02 42.3203 953.02 49.625 c
953.02 56.9297 958.945 62.8555 966.25 62.8555 c
973.555 62.8555 979.48 56.9297 979.48 49.625 c
h
S
/DeviceRGB {} cs
[1 1 1] sc
651.879 49.625 m
651.879 27.5312 633.969 9.6211 611.875 9.6211 c
589.781 9.6211 571.871 27.5312 571.871 49.625 c
571.871 71.7188 589.781 89.6289 611.875 89.6289 c
633.969 89.6289 651.879 71.7188 651.879 49.625 c
f*
4.725 w
651.879 49.625 m
651.879 27.5312 633.969 9.6211 611.875 9.6211 c
589.781 9.6211 571.871 27.5312 571.871 49.625 c
571.871 71.7188 589.781 89.6289 611.875 89.6289 c
633.969 89.6289 651.879 71.7188 651.879 49.625 c
h
S
1218.88 49.625 m
1218.88 27.5312 1200.97 9.6211 1178.88 9.6211 c
1156.78 9.6211 1138.87 27.5312 1138.87 49.625 c
1138.87 71.7188 1156.78 89.6289 1178.88 89.6289 c
1200.97 89.6289 1218.88 71.7188 1218.88 49.625 c
f*
1218.88 49.625 m
1218.88 27.5312 1200.97 9.6211 1178.88 9.6211 c
1156.78 9.6211 1138.87 27.5312 1138.87 49.625 c
1138.87 71.7188 1156.78 89.6289 1178.88 89.6289 c
1200.97 89.6289 1218.88 71.7188 1218.88 49.625 c
h
S
1504.27 51.1992 m
1504.27 29.1055 1486.36 11.1953 1464.27 11.1953 c
1442.17 11.1953 1424.26 29.1055 1424.26 51.1992 c
1424.26 73.293 1442.17 91.2031 1464.27 91.2031 c
1486.36 91.2031 1504.27 73.293 1504.27 51.1992 c
f*
1504.27 51.1992 m
1504.27 29.1055 1486.36 11.1953 1464.27 11.1953 c
1442.17 11.1953 1424.26 29.1055 1424.26 51.1992 c
1424.26 73.293 1442.17 91.2031 1464.27 91.2031 c
1486.36 91.2031 1504.27 73.293 1504.27 51.1992 c
h
S
1375.12 35.4492 m
1379.84 35.4492 l
S
1292.27 7.1016 m
1263.93 49.625 l
1292.27 92.1484 l
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
