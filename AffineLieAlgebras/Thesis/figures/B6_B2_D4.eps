%!PS-Adobe-3.0 EPSF-3.0
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 302 249
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
9.4485 w
/DeviceRGB {} CS
[0 0 0] SC
2697.7 1941.56 m
2811.08 1828.18 l
2697.7 1714.8 l
S
2357.55 1884.87 m
2924.46 1884.87 l
S
2357.55 1771.49 m
2924.46 1771.49 l
S
656.82 1828.18 m
1223.73 1828.18 l
S
656.82 1828.18 m
656.82 2395.09 l
S
89.9102 1828.18 m
656.82 1828.18 l
S
656.82 127.449 m
1223.73 127.449 l
S
656.82 127.449 m
656.82 694.359 l
S
89.9102 127.449 m
656.82 127.449 l
S
2697.7 240.832 m
2811.08 127.449 l
2697.7 14.0664 l
S
2357.55 184.141 m
2924.46 184.141 l
S
2357.55 70.7578 m
2924.46 70.7578 l
S
1223.73 1828.18 m
1790.64 1828.18 l
S
1790.64 1828.18 m
2357.55 1828.18 l
S
/DeviceRGB {} cs
[1 1 1] sc
2437.55 1828.18 m
2437.55 1784 2401.73 1748.18 2357.55 1748.18 c
2313.37 1748.18 2277.55 1784 2277.55 1828.18 c
2277.55 1872.36 2313.37 1908.18 2357.55 1908.18 c
2401.73 1908.18 2437.55 1872.36 2437.55 1828.18 c
f*
2437.55 1828.18 m
2437.55 1784 2401.73 1748.18 2357.55 1748.18 c
2313.37 1748.18 2277.55 1784 2277.55 1828.18 c
2277.55 1872.36 2313.37 1908.18 2357.55 1908.18 c
2401.73 1908.18 2437.55 1872.36 2437.55 1828.18 c
h
S
3004.46 1828.18 m
3004.46 1784 2968.64 1748.18 2924.46 1748.18 c
2880.28 1748.18 2844.46 1784 2844.46 1828.18 c
2844.46 1872.36 2880.28 1908.18 2924.46 1908.18 c
2968.64 1908.18 3004.46 1872.36 3004.46 1828.18 c
f*
3004.46 1828.18 m
3004.46 1784 2968.64 1748.18 2924.46 1748.18 c
2880.28 1748.18 2844.46 1784 2844.46 1828.18 c
2844.46 1872.36 2880.28 1908.18 2924.46 1908.18 c
2968.64 1908.18 3004.46 1872.36 3004.46 1828.18 c
h
S
169.906 1828.18 m
169.906 1784 134.09 1748.18 89.9102 1748.18 c
45.7305 1748.18 9.9141 1784 9.9141 1828.18 c
9.9141 1872.36 45.7305 1908.18 89.9102 1908.18 c
134.09 1908.18 169.906 1872.36 169.906 1828.18 c
f*
169.906 1828.18 m
169.906 1784 134.09 1748.18 89.9102 1748.18 c
45.7305 1748.18 9.9141 1784 9.9141 1828.18 c
9.9141 1872.36 45.7305 1908.18 89.9102 1908.18 c
134.09 1908.18 169.906 1872.36 169.906 1828.18 c
h
S
736.816 1828.18 m
736.816 1784 701 1748.18 656.82 1748.18 c
612.641 1748.18 576.824 1784 576.824 1828.18 c
576.824 1872.36 612.641 1908.18 656.82 1908.18 c
701 1908.18 736.816 1872.36 736.816 1828.18 c
f*
736.816 1828.18 m
736.816 1784 701 1748.18 656.82 1748.18 c
612.641 1748.18 576.824 1784 576.824 1828.18 c
576.824 1872.36 612.641 1908.18 656.82 1908.18 c
701 1908.18 736.816 1872.36 736.816 1828.18 c
h
S
736.816 2395.09 m
736.816 2350.91 701 2315.09 656.82 2315.09 c
612.641 2315.09 576.824 2350.91 576.824 2395.09 c
576.824 2439.27 612.641 2475.09 656.82 2475.09 c
701 2475.09 736.816 2439.27 736.816 2395.09 c
f*
736.816 2395.09 m
736.816 2350.91 701 2315.09 656.82 2315.09 c
612.641 2315.09 576.824 2350.91 576.824 2395.09 c
576.824 2439.27 612.641 2475.09 656.82 2475.09 c
701 2475.09 736.816 2439.27 736.816 2395.09 c
h
S
1303.73 1828.18 m
1303.73 1784 1267.91 1748.18 1223.73 1748.18 c
1179.55 1748.18 1143.73 1784 1143.73 1828.18 c
1143.73 1872.36 1179.55 1908.18 1223.73 1908.18 c
1267.91 1908.18 1303.73 1872.36 1303.73 1828.18 c
f*
1303.73 1828.18 m
1303.73 1784 1267.91 1748.18 1223.73 1748.18 c
1179.55 1748.18 1143.73 1784 1143.73 1828.18 c
1143.73 1872.36 1179.55 1908.18 1223.73 1908.18 c
1267.91 1908.18 1303.73 1872.36 1303.73 1828.18 c
h
S
169.906 127.449 m
169.906 83.2695 134.09 47.4531 89.9102 47.4531 c
45.7305 47.4531 9.9141 83.2695 9.9141 127.449 c
9.9141 171.629 45.7305 207.445 89.9102 207.445 c
134.09 207.445 169.906 171.629 169.906 127.449 c
f*
169.906 127.449 m
169.906 83.2695 134.09 47.4531 89.9102 47.4531 c
45.7305 47.4531 9.9141 83.2695 9.9141 127.449 c
9.9141 171.629 45.7305 207.445 89.9102 207.445 c
134.09 207.445 169.906 171.629 169.906 127.449 c
h
S
736.816 127.449 m
736.816 83.2695 701 47.4531 656.82 47.4531 c
612.641 47.4531 576.824 83.2695 576.824 127.449 c
576.824 171.629 612.641 207.445 656.82 207.445 c
701 207.445 736.816 171.629 736.816 127.449 c
f*
736.816 127.449 m
736.816 83.2695 701 47.4531 656.82 47.4531 c
612.641 47.4531 576.824 83.2695 576.824 127.449 c
576.824 171.629 612.641 207.445 656.82 207.445 c
701 207.445 736.816 171.629 736.816 127.449 c
h
S
736.816 694.359 m
736.816 650.18 701 614.363 656.82 614.363 c
612.641 614.363 576.824 650.18 576.824 694.359 c
576.824 738.539 612.641 774.355 656.82 774.355 c
701 774.355 736.816 738.539 736.816 694.359 c
f*
736.816 694.359 m
736.816 650.18 701 614.363 656.82 614.363 c
612.641 614.363 576.824 650.18 576.824 694.359 c
576.824 738.539 612.641 774.355 656.82 774.355 c
701 774.355 736.816 738.539 736.816 694.359 c
h
S
1303.73 127.449 m
1303.73 83.2695 1267.91 47.4531 1223.73 47.4531 c
1179.55 47.4531 1143.73 83.2695 1143.73 127.449 c
1143.73 171.629 1179.55 207.445 1223.73 207.445 c
1267.91 207.445 1303.73 171.629 1303.73 127.449 c
f*
1303.73 127.449 m
1303.73 83.2695 1267.91 47.4531 1223.73 47.4531 c
1179.55 47.4531 1143.73 83.2695 1143.73 127.449 c
1143.73 171.629 1179.55 207.445 1223.73 207.445 c
1267.91 207.445 1303.73 171.629 1303.73 127.449 c
h
S
2437.55 127.449 m
2437.55 83.2695 2401.73 47.4531 2357.55 47.4531 c
2313.37 47.4531 2277.55 83.2695 2277.55 127.449 c
2277.55 171.629 2313.37 207.445 2357.55 207.445 c
2401.73 207.445 2437.55 171.629 2437.55 127.449 c
f*
2437.55 127.449 m
2437.55 83.2695 2401.73 47.4531 2357.55 47.4531 c
2313.37 47.4531 2277.55 83.2695 2277.55 127.449 c
2277.55 171.629 2313.37 207.445 2357.55 207.445 c
2401.73 207.445 2437.55 171.629 2437.55 127.449 c
h
S
3004.46 127.449 m
3004.46 83.2695 2968.64 47.4531 2924.46 47.4531 c
2880.28 47.4531 2844.46 83.2695 2844.46 127.449 c
2844.46 171.629 2880.28 207.445 2924.46 207.445 c
2968.64 207.445 3004.46 171.629 3004.46 127.449 c
f*
3004.46 127.449 m
3004.46 83.2695 2968.64 47.4531 2924.46 47.4531 c
2880.28 47.4531 2844.46 83.2695 2844.46 127.449 c
2844.46 171.629 2880.28 207.445 2924.46 207.445 c
2968.64 207.445 3004.46 171.629 3004.46 127.449 c
h
S
1870.64 1828.18 m
1870.64 1784 1834.82 1748.18 1790.64 1748.18 c
1746.46 1748.18 1710.64 1784 1710.64 1828.18 c
1710.64 1872.36 1746.46 1908.18 1790.64 1908.18 c
1834.82 1908.18 1870.64 1872.36 1870.64 1828.18 c
f*
1870.64 1828.18 m
1870.64 1784 1834.82 1748.18 1790.64 1748.18 c
1746.46 1748.18 1710.64 1784 1710.64 1828.18 c
1710.64 1872.36 1746.46 1908.18 1790.64 1908.18 c
1834.82 1908.18 1870.64 1872.36 1870.64 1828.18 c
h
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
