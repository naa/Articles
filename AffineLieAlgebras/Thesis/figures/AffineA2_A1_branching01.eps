%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 202 575 589
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: 31 Май 2010 г. 23:24:55 MSD
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
574 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 574.0 400.0 rf
0.0 0.0 0.0 RG
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 5.0 translate
0 0 564 390 rc
0.4 0.4 0.4 RG
q
[ 2.0 5.0 ] 0.0 d
0.788235 0.788235 0.788235 RG
1 13 382 OPL
13 8
1 57 382 OPL
57 8
1 102 382 OPL
102 8
1 147 382 OPL
147 8
1 192 382 OPL
192 8
1 237 382 OPL
237 8
1 282 382 OPL
282 8
1 327 382 OPL
327 8
1 372 382 OPL
372 8
1 417 382 OPL
417 8
1 462 382 OPL
462 8
1 507 382 OPL
507 8
1 551 382 OPL
551 8
Q
0.0 0.0 0.0 RG
0.4 0.4 0.4 RG
q
[ 2.0 5.0 ] 0.0 d
0.788235 0.788235 0.788235 RG
1 13 360 OPL
551 360
1 13 316 OPL
551 316
1 13 272 OPL
551 272
1 13 228 OPL
551 228
1 13 184 OPL
551 184
1 13 140 OPL
551 140
1 13 96 OPL
551 96
1 13 52 OPL
551 52
1 13 8 OPL
551 8
Q
0.0 0.0 0.0 RG
q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
544 176 14 15 rc
548.0 188.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -237 2000 912 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -237 2000 912
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 250.0 def
		/exclam 333.0078125 def
		/quotedbl 408.203125 def
		/numbersign 500.0 def
		/dollar 500.0 def
		/percent 833.0078125 def
		/ampersand 777.83203125 def
		/quoteright 180.17578125 def
		/parenleft 333.0078125 def
		/parenright 333.0078125 def
		/asterisk 500.0 def
		/plus 563.96484375 def
		/comma 250.0 def
		/hyphen 333.0078125 def
		/period 250.0 def
		/slash 277.83203125 def
		/zero 500.0 def
		/one 500.0 def
		/two 500.0 def
		/three 500.0 def
		/four 500.0 def
		/five 500.0 def
		/six 500.0 def
		/seven 500.0 def
		/eight 500.0 def
		/nine 500.0 def
		/colon 277.83203125 def
		/semicolon 277.83203125 def
		/less 563.96484375 def
		/equal 563.96484375 def
		/greater 563.96484375 def
		/question 443.84765625 def
		/at 920.8984375 def
		/A 722.16796875 def
		/B 666.9921875 def
		/C 666.9921875 def
		/D 722.16796875 def
		/E 610.83984375 def
		/F 556.15234375 def
		/G 722.16796875 def
		/H 722.16796875 def
		/I 333.0078125 def
		/J 389.16015625 def
		/K 722.16796875 def
		/L 610.83984375 def
		/M 889.16015625 def
		/N 722.16796875 def
		/O 722.16796875 def
		/P 556.15234375 def
		/Q 722.16796875 def
		/R 666.9921875 def
		/S 556.15234375 def
		/T 610.83984375 def
		/U 722.16796875 def
		/V 722.16796875 def
		/W 943.84765625 def
		/X 722.16796875 def
		/Y 722.16796875 def
		/Z 610.83984375 def
		/bracketleft 333.0078125 def
		/backslash 277.83203125 def
		/bracketright 333.0078125 def
		/asciicircum 469.23828125 def
		/underscore 500.0 def
		/quoteleft 333.0078125 def
		/a 443.84765625 def
		/b 500.0 def
		/c 443.84765625 def
		/d 500.0 def
		/e 443.84765625 def
		/f 333.0078125 def
		/g 500.0 def
		/h 500.0 def
		/i 277.83203125 def
		/j 277.83203125 def
		/k 500.0 def
		/l 277.83203125 def
		/m 777.83203125 def
		/n 500.0 def
		/o 500.0 def
		/p 500.0 def
		/q 500.0 def
		/r 333.0078125 def
		/s 389.16015625 def
		/t 277.83203125 def
		/u 500.0 def
		/v 500.0 def
		/w 722.16796875 def
		/x 500.0 def
		/y 500.0 def
		/z 443.84765625 def
		/braceleft 479.98046875 def
		/bar 200.1953125 def
		/braceright 479.98046875 def
		/asciitilde 541.015625 def
		/exclamdown 333.0078125 def
		/cent 500.0 def
		/sterling 500.0 def
		/fraction 166.9921875 def
		/yen 500.0 def
		/florin 500.0 def
		/section 500.0 def
		/currency 500.0 def
		/quotesingle 180.17578125 def
		/quotedblleft 443.84765625 def
		/guillemotleft 500.0 def
		/guilsinglleft 333.0078125 def
		/guilsinglright 333.0078125 def
		/fi 556.15234375 def
		/fl 556.15234375 def
		/endash 333.0078125 def
		/dagger 500.0 def
		/daggerdbl 500.0 def
		/periodcentered 250.0 def
		/paragraph 453.125 def
		/bullet 350.09765625 def
		/quotesinglbase 333.0078125 def
		/quotedblbase 443.84765625 def
		/quotedblright 443.84765625 def
		/guillemotright 500.0 def
		/ellipsis 1000.0 def
		/perthousand 1000.0 def
		/questiondown 443.84765625 def
		/grave 333.0078125 def
		/acute 333.0078125 def
		/circumflex 333.0078125 def
		/tilde 333.0078125 def
		/macron 500.0 def
		/breve 333.0078125 def
		/dotaccent 333.0078125 def
		/dieresis 333.0078125 def
		/ring 333.0078125 def
		/cedilla 333.0078125 def
		/hungarumlaut 777.83203125 def
		/ogonek 333.0078125 def
		/caron 333.0078125 def
		/emdash 333.0078125 def
		/AE 889.16015625 def
		/ordfeminine 275.87890625 def
		/Lslash 610.83984375 def
		/Oslash 722.16796875 def
		/OE 889.16015625 def
		/ordmasculine 310.05859375 def
		/ae 666.9921875 def
		/dotlessi 277.83203125 def
		/lslash 277.83203125 def
		/oslash 500.0 def
		/oe 722.16796875 def
		/germandbls 500.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
175 175 moveto
157 175 lineto
114 570 lineto
112 588 111 600 111 609  curveto
111 629 116 646 127 658  curveto
138 671 151 677 167 677  curveto
182 677 195 671 205 658  curveto
216 646 221 627 221 603  curveto
221 595 221 584 219 570  curveto
175 175 lineto
closepath
166 94 moveto
180 94 193 88 204 78  curveto
214 67 220 55 220 40  curveto
220 25 214 12 204 2  curveto
193 -8 180 -13 166 -13  curveto
151 -13 138 -8 127 2  curveto
117 12 111 25 111 40  curveto
111 55 117 67 127 78  curveto
138 88 151 94 166 94  curveto
closepath
fill
		} def

	/quotedbl
		{
281 392 moveto
254 534 lineto
244 593 lineto
243 601 243 610 243 618  curveto
243 638 247 653 256 663  curveto
265 672 278 677 292 677  curveto
306 677 318 672 327 663  curveto
337 653 341 640 341 625  curveto
341 597 338 567 332 535  curveto
304 392 lineto
281 392 lineto
closepath
102 392 moveto
75 536 lineto
68 576 64 603 64 617  curveto
64 638 69 653 77 663  curveto
86 672 98 677 112 677  curveto
127 677 139 672 148 662  curveto
157 653 162 640 162 624  curveto
162 611 158 582 149 536  curveto
123 392 lineto
102 392 lineto
closepath
fill
		} def

	/numbersign
		{
56 -13 moveto
101 208 lineto
18 208 lineto
18 248 lineto
109 248 lineto
143 416 lineto
18 416 lineto
18 455 lineto
152 455 lineto
196 677 lineto
237 677 lineto
192 455 lineto
357 455 lineto
404 677 lineto
445 677 lineto
398 455 lineto
481 455 lineto
481 416 lineto
391 416 lineto
357 248 lineto
481 248 lineto
481 208 lineto
349 208 lineto
303 -13 lineto
264 -13 lineto
308 208 lineto
143 208 lineto
96 -13 lineto
56 -13 lineto
closepath
150 248 moveto
315 248 lineto
351 416 lineto
184 416 lineto
150 248 lineto
closepath
fill
		} def

	/dollar
		{
52 163 moveto
74 163 lineto
77 118 91 84 116 60  curveto
140 36 177 22 225 18  curveto
225 303 lineto
152 348 103 388 79 423  curveto
61 448 53 478 53 513  curveto
53 553 68 588 97 618  curveto
127 648 170 666 225 672  curveto
225 717 lineto
256 717 lineto
256 672 lineto
283 671 305 668 324 663  curveto
333 661 364 650 417 629  curveto
417 483 lineto
398 483 lineto
394 535 381 573 358 597  curveto
336 621 302 635 256 640  curveto
256 392 lineto
338 334 391 292 414 265  curveto
438 238 449 204 449 164  curveto
449 119 432 79 398 45  curveto
364 11 317 -8 256 -13  curveto
256 -76 lineto
225 -76 lineto
225 -13 lineto
194 -12 166 -8 140 -3  curveto
113 2 84 11 52 24  curveto
52 163 lineto
closepath
225 412 moveto
225 639 lineto
193 635 168 625 153 608  curveto
137 591 129 570 129 545  curveto
129 521 136 499 150 478  curveto
165 458 190 436 225 412  curveto
closepath
256 18 moveto
281 22 299 28 312 36  curveto
331 47 345 62 356 80  curveto
366 99 372 118 372 139  curveto
372 161 365 181 352 200  curveto
339 219 307 247 256 282  curveto
256 18 lineto
closepath
fill
		} def

	/percent
		{
679 677 moveto
197 -27 lineto
153 -27 lineto
636 677 lineto
679 677 lineto
closepath
177 677 moveto
221 677 255 659 280 622  curveto
304 586 316 544 316 497  curveto
316 440 302 396 275 365  curveto
248 334 215 319 176 319  curveto
151 319 127 326 105 340  curveto
84 354 67 375 54 403  curveto
41 431 35 462 35 497  curveto
35 531 41 562 54 591  curveto
67 620 85 641 108 656  curveto
130 670 153 677 177 677  curveto
closepath
176 649 moveto
159 649 144 640 132 620  curveto
119 601 112 560 112 497  curveto
112 452 116 417 123 394  curveto
129 376 137 362 149 352  curveto
156 346 164 343 174 343  curveto
190 343 203 352 214 369  curveto
231 394 239 436 239 494  curveto
239 556 231 599 215 625  curveto
204 641 191 649 176 649  curveto
closepath
657 328 moveto
680 328 703 321 726 306  curveto
749 291 767 270 779 242  curveto
792 214 798 183 798 150  curveto
798 92 784 48 756 18  curveto
729 -12 696 -27 658 -27  curveto
634 -27 611 -20 589 -5  curveto
567 9 549 30 536 57  curveto
524 84 517 115 517 150  curveto
517 184 524 215 536 244  curveto
549 272 567 293 589 307  curveto
611 321 634 328 657 328  curveto
closepath
657 302 moveto
642 302 628 293 617 276  curveto
602 253 595 210 595 146  curveto
595 88 602 48 617 24  curveto
628 8 642 0 657 0  curveto
672 0 686 8 697 26  curveto
713 50 721 91 721 149  curveto
721 210 713 253 697 277  curveto
687 294 673 302 657 302  curveto
closepath
fill
		} def

	/ampersand
		{
510 426 moveto
715 426 lineto
715 408 lineto
687 405 666 399 652 389  curveto
639 379 618 348 589 296  curveto
560 244 528 196 492 151  curveto
521 117 547 93 570 80  curveto
593 66 616 60 639 60  curveto
661 60 680 66 696 78  curveto
711 90 722 108 729 132  curveto
747 119 lineto
735 73 716 39 689 17  curveto
662 -4 631 -15 596 -15  curveto
569 -15 542 -7 514 6  curveto
487 21 457 45 424 80  curveto
384 44 348 19 315 5  curveto
283 -8 248 -15 211 -15  curveto
158 -15 115 0 83 27  curveto
52 56 36 90 36 130  curveto
36 169 50 209 79 248  curveto
107 287 160 328 238 370  curveto
223 403 213 431 207 453  curveto
201 475 199 495 199 515  curveto
199 571 219 613 260 643  curveto
292 665 328 677 369 677  curveto
408 677 439 665 464 642  curveto
488 619 500 591 500 558  curveto
500 523 489 493 465 467  curveto
441 441 400 412 340 381  curveto
381 308 424 240 469 179  curveto
527 248 555 305 555 352  curveto
555 367 550 380 541 392  curveto
533 401 523 406 510 408  curveto
510 426 lineto
closepath
323 413 moveto
364 432 394 454 414 479  curveto
434 503 444 530 444 560  curveto
444 583 437 603 422 618  curveto
408 633 390 641 368 641  curveto
340 641 318 631 304 612  curveto
289 592 282 573 282 554  curveto
282 538 285 520 291 500  curveto
296 481 307 451 323 413  curveto
closepath
399 108 moveto
356 167 326 209 310 236  curveto
293 263 275 297 255 337  curveto
216 314 186 290 167 263  curveto
147 236 137 206 137 175  curveto
137 140 148 109 171 83  curveto
193 57 224 43 262 43  curveto
282 43 302 48 321 56  curveto
340 64 366 81 399 108  curveto
closepath
fill
		} def

	/quoteright
		{
77 392 moveto
50 536 lineto
43 576 39 603 39 617  curveto
39 638 43 653 52 663  curveto
60 672 72 677 86 677  curveto
101 677 113 672 123 662  curveto
132 653 137 640 137 625  curveto
137 612 133 583 125 536  curveto
98 392 lineto
77 392 lineto
closepath
fill
		} def

	/parenleft
		{
310 -195 moveto
310 -213 lineto
261 -189 220 -160 187 -126  curveto
140 -79 104 -24 79 40  curveto
53 104 41 170 41 239  curveto
41 340 65 432 115 515  curveto
165 599 230 658 310 694  curveto
310 673 lineto
270 651 237 621 211 583  curveto
186 544 166 495 154 437  curveto
141 378 135 316 135 252  curveto
135 182 140 119 151 62  curveto
159 17 170 -18 182 -45  curveto
194 -72 210 -98 230 -124  curveto
251 -149 277 -173 310 -195  curveto
closepath
fill
		} def

	/parenright
		{
22 673 moveto
22 694 lineto
71 669 113 641 146 607  curveto
192 560 228 504 253 440  curveto
279 376 292 310 292 240  curveto
292 139 267 47 217 -35  curveto
167 -118 102 -178 22 -213  curveto
22 -195 lineto
62 -173 95 -142 121 -104  curveto
147 -66 166 -17 178 41  curveto
191 100 197 161 197 226  curveto
197 295 192 358 181 416  curveto
173 460 163 496 151 523  curveto
138 550 122 576 102 602  curveto
82 627 55 651 22 673  curveto
closepath
fill
		} def

	/asterisk
		{
241 509 moveto
239 532 235 554 227 576  curveto
216 608 210 630 210 642  curveto
210 659 214 672 222 681  curveto
230 689 240 694 252 694  curveto
262 694 271 689 278 681  curveto
286 672 290 659 290 643  curveto
290 628 285 608 277 582  curveto
268 556 263 531 261 509  curveto
279 521 295 534 309 551  curveto
331 576 348 592 358 599  curveto
369 605 380 608 391 608  curveto
402 608 411 604 418 597  curveto
426 590 429 581 429 571  curveto
429 559 424 548 413 539  curveto
402 529 375 520 333 510  curveto
307 505 287 498 270 491  curveto
287 482 308 476 332 471  curveto
371 464 397 455 409 444  curveto
422 434 428 422 428 409  curveto
428 399 424 391 417 384  curveto
409 377 401 373 391 373  curveto
381 373 371 376 359 383  curveto
347 390 331 405 311 429  curveto
297 445 281 460 261 474  curveto
261 456 265 435 272 414  curveto
284 375 290 349 290 335  curveto
290 322 286 311 278 302  curveto
270 293 262 289 253 289  curveto
241 289 230 293 220 303  curveto
213 310 210 320 210 335  curveto
210 351 214 370 221 392  curveto
229 414 233 429 235 437  curveto
237 446 239 458 241 474  curveto
222 461 205 447 190 432  curveto
167 405 149 388 137 381  curveto
128 376 119 373 110 373  curveto
99 373 90 377 82 384  curveto
74 392 70 400 70 409  curveto
70 417 74 426 80 435  curveto
87 444 97 451 110 457  curveto
119 461 139 466 170 473  curveto
191 477 210 483 229 491  curveto
212 500 191 507 167 512  curveto
126 520 102 528 92 535  curveto
78 545 70 558 70 574  curveto
70 583 74 591 81 598  curveto
89 605 97 609 107 609  curveto
118 609 129 605 141 599  curveto
153 592 168 578 186 557  curveto
204 537 222 521 241 509  curveto
closepath
fill
		} def

	/plus
		{
261 68 moveto
261 312 lineto
18 312 lineto
18 352 lineto
261 352 lineto
261 595 lineto
300 595 lineto
300 352 lineto
544 352 lineto
544 312 lineto
300 312 lineto
300 68 lineto
261 68 lineto
closepath
fill
		} def

	/comma
		{
53 -166 moveto
53 -145 lineto
87 -133 113 -116 131 -93  curveto
149 -70 159 -45 159 -19  curveto
159 -13 157 -8 154 -3  curveto
152 0 150 0 147 0  curveto
144 0 136 -2 124 -9  curveto
118 -12 112 -13 105 -13  curveto
90 -13 77 -8 67 0  curveto
58 9 53 22 53 39  curveto
53 55 59 69 72 80  curveto
84 91 99 97 116 97  curveto
138 97 157 88 174 69  curveto
190 50 199 26 199 -4  curveto
199 -38 187 -69 164 -98  curveto
141 -127 104 -149 53 -166  curveto
closepath
fill
		} def

	/hyphen
		{
40 261 moveto
292 261 lineto
292 187 lineto
40 187 lineto
40 261 lineto
closepath
fill
		} def

	/period
		{
125 94 moveto
140 94 153 89 163 78  curveto
173 68 179 55 179 40  curveto
179 25 173 12 163 2  curveto
152 -8 139 -13 125 -13  curveto
110 -13 97 -8 86 2  curveto
76 12 70 25 70 40  curveto
70 55 76 68 86 79  curveto
97 89 110 94 125 94  curveto
closepath
fill
		} def

	/slash
		{
280 694 moveto
40 -13 lineto
1 -13 lineto
241 694 lineto
280 694 lineto
closepath
fill
		} def

	/zero
		{
36 327 moveto
36 402 47 467 70 522  curveto
93 576 123 617 161 644  curveto
190 665 220 675 251 675  curveto
302 675 348 649 388 598  curveto
439 534 464 447 464 337  curveto
464 260 453 195 431 141  curveto
409 87 380 48 346 24  curveto
312 0 278 -11 247 -11  curveto
183 -11 131 25 89 100  curveto
53 162 36 238 36 327  curveto
closepath
131 314 moveto
131 223 143 149 165 91  curveto
184 43 211 19 248 19  curveto
266 19 284 26 303 42  curveto
322 58 336 84 346 122  curveto
361 178 368 257 368 358  curveto
368 434 360 497 345 547  curveto
333 585 318 611 299 627  curveto
286 638 270 643 251 643  curveto
229 643 209 633 192 613  curveto
168 586 153 544 144 486  curveto
136 428 131 371 131 314  curveto
closepath
fill
		} def

	/one
		{
117 597 moveto
278 675 lineto
294 675 lineto
294 116 lineto
294 79 295 56 299 47  curveto
302 38 308 31 318 26  curveto
328 21 347 18 377 18  curveto
377 0 lineto
128 0 lineto
128 18 lineto
160 18 180 21 189 26  curveto
198 30 204 37 208 45  curveto
212 53 213 76 213 116  curveto
213 474 lineto
213 522 212 553 208 566  curveto
206 577 202 584 196 589  curveto
190 594 183 597 174 597  curveto
162 597 145 592 124 582  curveto
117 597 lineto
closepath
fill
		} def

	/two
		{
458 127 moveto
412 0 lineto
21 0 lineto
21 18 lineto
136 122 217 208 264 274  curveto
311 341 334 402 334 457  curveto
334 499 321 533 295 560  curveto
270 587 239 601 203 601  curveto
171 601 141 591 115 572  curveto
90 553 70 525 58 488  curveto
40 488 lineto
48 548 69 595 103 627  curveto
136 659 179 675 229 675  curveto
283 675 328 658 364 624  curveto
399 589 417 548 417 501  curveto
417 468 410 434 394 401  curveto
370 348 331 292 277 233  curveto
196 145 145 91 125 73  curveto
298 73 lineto
333 73 358 75 372 77  curveto
386 80 399 85 410 93  curveto
422 101 431 112 440 127  curveto
458 127 lineto
closepath
fill
		} def

	/three
		{
50 536 moveto
69 580 93 615 122 639  curveto
151 663 187 675 229 675  curveto
283 675 323 658 352 624  curveto
373 598 384 570 384 541  curveto
384 493 354 443 293 392  curveto
334 376 364 353 385 323  curveto
406 294 417 259 417 219  curveto
417 161 398 112 362 70  curveto
314 15 245 -11 155 -11  curveto
111 -11 80 -6 64 4  curveto
48 15 40 27 40 40  curveto
40 49 44 58 52 65  curveto
59 72 68 76 79 76  curveto
87 76 96 74 104 72  curveto
110 70 122 64 142 54  curveto
161 44 175 38 182 36  curveto
194 32 207 30 221 30  curveto
254 30 283 43 307 69  curveto
332 95 344 125 344 160  curveto
344 186 339 211 327 235  curveto
319 254 309 267 299 277  curveto
285 290 266 302 242 312  curveto
217 323 192 328 167 328  curveto
151 328 lineto
151 343 lineto
177 346 203 355 229 371  curveto
255 386 273 404 285 426  curveto
297 447 303 471 303 497  curveto
303 530 292 557 271 578  curveto
250 599 224 609 193 609  curveto
142 609 100 582 66 528  curveto
50 536 lineto
closepath
fill
		} def

	/four
		{
465 244 moveto
465 174 lineto
376 174 lineto
376 0 lineto
295 0 lineto
295 174 lineto
15 174 lineto
15 237 lineto
322 675 lineto
376 675 lineto
376 244 lineto
465 244 lineto
closepath
295 244 moveto
295 572 lineto
63 244 lineto
295 244 lineto
closepath
fill
		} def

	/five
		{
434 662 moveto
396 579 lineto
196 579 lineto
153 490 lineto
239 477 307 445 358 394  curveto
401 349 423 297 423 237  curveto
423 202 416 170 402 141  curveto
387 111 370 86 348 65  curveto
327 44 303 27 276 15  curveto
239 -2 201 -11 161 -11  curveto
121 -11 93 -4 74 8  curveto
56 22 47 36 47 53  curveto
47 62 51 70 59 77  curveto
66 84 76 87 87 87  curveto
95 87 103 86 109 83  curveto
115 81 126 74 142 63  curveto
166 47 191 38 216 38  curveto
254 38 287 52 316 81  curveto
345 110 359 145 359 187  curveto
359 227 347 264 321 299  curveto
295 333 260 360 214 379  curveto
179 394 131 402 69 404  curveto
196 662 lineto
434 662 lineto
closepath
fill
		} def

	/six
		{
448 675 moveto
448 657 lineto
405 653 370 644 343 632  curveto
315 619 288 599 262 573  curveto
235 546 213 517 196 485  curveto
179 452 164 414 152 369  curveto
199 401 246 417 293 417  curveto
339 417 378 399 411 363  curveto
444 326 461 279 461 222  curveto
461 167 444 116 411 71  curveto
370 15 317 -11 250 -11  curveto
205 -11 167 3 135 33  curveto
73 91 42 166 42 259  curveto
42 319 54 375 78 428  curveto
102 482 136 529 180 570  curveto
224 612 266 639 307 654  curveto
347 668 385 675 419 675  curveto
448 675 lineto
closepath
144 333 moveto
138 290 135 254 135 227  curveto
135 196 141 162 153 125  curveto
164 89 181 60 204 38  curveto
221 23 241 15 265 15  curveto
293 15 318 28 341 55  curveto
363 82 374 120 374 169  curveto
374 225 363 273 341 314  curveto
319 355 287 375 247 375  curveto
234 375 221 372 207 367  curveto
193 362 172 351 144 333  curveto
closepath
fill
		} def

	/seven
		{
100 662 moveto
455 662 lineto
455 643 lineto
234 -13 lineto
180 -13 lineto
377 582 lineto
195 582 lineto
159 582 132 578 117 569  curveto
89 554 67 531 51 500  curveto
37 505 lineto
100 662 lineto
closepath
fill
		} def

	/eight
		{
191 333 moveto
139 376 105 410 90 437  curveto
75 463 67 490 67 518  curveto
67 561 84 598 117 629  curveto
150 660 194 675 250 675  curveto
303 675 346 661 378 632  curveto
411 603 427 570 427 533  curveto
427 508 418 483 401 457  curveto
383 431 347 401 291 366  curveto
348 322 386 287 405 262  curveto
430 229 442 194 442 157  curveto
442 110 424 70 389 37  curveto
353 4 307 -11 249 -11  curveto
186 -11 137 7 102 47  curveto
74 78 60 113 60 150  curveto
60 180 70 209 90 238  curveto
109 266 143 298 191 333  curveto
closepath
268 385 moveto
307 420 332 448 342 469  curveto
353 489 358 512 358 538  curveto
358 572 348 599 329 618  curveto
310 637 284 647 250 647  curveto
217 647 190 637 169 618  curveto
149 599 138 576 138 551  curveto
138 534 142 517 151 500  curveto
160 483 172 467 188 452  curveto
268 385 lineto
closepath
214 314 moveto
187 292 167 267 154 240  curveto
141 213 135 184 135 153  curveto
135 111 146 77 169 52  curveto
192 27 221 14 257 14  curveto
292 14 320 24 341 44  curveto
362 64 373 88 373 116  curveto
373 140 367 161 354 179  curveto
331 214 285 259 214 314  curveto
closepath
fill
		} def

	/nine
		{
52 -13 moveto
52 4 lineto
95 5 134 14 170 33  curveto
207 52 242 86 276 133  curveto
310 181 334 233 347 290  curveto
296 257 250 241 208 241  curveto
162 241 122 259 89 295  curveto
56 331 39 378 39 438  curveto
39 496 56 548 89 593  curveto
129 648 181 675 246 675  curveto
300 675 347 653 385 608  curveto
433 552 457 484 457 402  curveto
457 328 438 260 402 196  curveto
366 132 316 80 251 38  curveto
199 3 142 -13 80 -13  curveto
52 -13 lineto
closepath
355 326 moveto
361 368 364 402 364 428  curveto
364 459 358 493 348 530  curveto
337 567 322 595 302 614  curveto
282 634 260 644 235 644  curveto
206 644 180 631 159 604  curveto
137 578 126 540 126 488  curveto
126 420 140 366 169 327  curveto
191 299 217 285 248 285  curveto
263 285 280 289 301 296  curveto
321 303 339 313 355 326  curveto
closepath
fill
		} def

	/colon
		{
141 460 moveto
156 460 168 455 179 445  curveto
190 434 195 421 195 406  curveto
195 391 190 378 179 368  curveto
168 357 156 352 141 352  curveto
126 352 113 357 102 368  curveto
92 378 86 391 86 406  curveto
86 421 92 434 102 445  curveto
113 455 126 460 141 460  curveto
closepath
140 95 moveto
155 95 168 89 178 79  curveto
189 68 194 55 194 40  curveto
194 25 189 12 178 2  curveto
167 -8 155 -13 140 -13  curveto
125 -13 112 -8 101 2  curveto
91 12 85 25 85 40  curveto
85 55 91 68 101 79  curveto
112 89 125 95 140 95  curveto
closepath
fill
		} def

	/semicolon
		{
137 461 moveto
152 461 165 456 176 445  curveto
186 435 191 422 191 407  curveto
191 392 186 379 176 369  curveto
165 358 152 353 137 353  curveto
122 353 109 358 99 369  curveto
88 379 83 392 83 407  curveto
83 422 88 435 99 445  curveto
109 456 122 461 137 461  curveto
closepath
69 -166 moveto
69 -145 lineto
102 -133 128 -116 147 -93  curveto
165 -70 174 -45 174 -19  curveto
174 -13 173 -8 170 -3  curveto
168 0 165 0 163 0  curveto
159 0 152 -2 140 -9  curveto
134 -12 128 -13 121 -13  curveto
105 -13 92 -8 83 0  curveto
74 9 69 22 69 39  curveto
69 55 75 69 87 80  curveto
99 91 114 97 132 97  curveto
153 97 172 88 189 69  curveto
206 50 214 26 214 -4  curveto
214 -38 203 -69 179 -98  curveto
156 -127 119 -149 69 -166  curveto
closepath
fill
		} def

	/less
		{
18 344 moveto
543 572 lineto
543 529 lineto
91 333 lineto
543 135 lineto
543 91 lineto
18 320 lineto
18 344 lineto
closepath
fill
		} def

	/equal
		{
18 431 moveto
544 431 lineto
544 391 lineto
18 391 lineto
18 431 lineto
closepath
18 271 moveto
544 271 lineto
544 231 lineto
18 231 lineto
18 271 lineto
closepath
fill
		} def

	/greater
		{
543 318 moveto
18 91 lineto
18 133 lineto
470 329 lineto
18 527 lineto
18 572 lineto
543 342 lineto
543 318 lineto
closepath
fill
		} def

	/question
		{
221 156 moveto
201 156 lineto
203 197 209 231 217 258  curveto
225 284 241 322 266 370  curveto
286 406 298 435 304 454  curveto
310 474 313 494 313 514  curveto
313 555 302 588 280 613  curveto
258 637 231 649 199 649  curveto
171 649 149 643 132 629  curveto
116 616 108 602 108 586  curveto
108 574 113 559 123 541  curveto
132 524 137 511 137 501  curveto
137 490 133 480 126 472  curveto
118 464 109 460 99 460  curveto
85 460 72 467 61 480  curveto
50 494 44 513 44 537  curveto
44 573 60 606 92 634  curveto
123 663 166 677 220 677  curveto
287 677 337 657 368 618  curveto
392 590 403 558 403 523  curveto
403 499 398 475 387 450  curveto
377 425 357 395 327 361  curveto
280 308 251 270 240 248  curveto
230 225 223 195 221 156  curveto
closepath
214 95 moveto
230 95 243 90 253 79  curveto
264 69 269 56 269 41  curveto
269 26 264 13 253 2  curveto
242 -7 229 -13 214 -13  curveto
199 -13 187 -7 176 2  curveto
165 13 160 26 160 41  curveto
160 56 165 69 176 79  curveto
187 90 199 95 214 95  curveto
closepath
fill
		} def

	/at
		{
687 467 moveto
630 272 lineto
609 200 596 153 591 134  curveto
587 114 584 99 584 87  curveto
584 76 588 68 595 61  curveto
602 53 611 50 621 50  curveto
645 50 673 62 707 85  curveto
740 109 769 148 792 201  curveto
816 255 828 310 828 368  curveto
828 424 815 475 788 522  curveto
761 570 723 606 674 631  curveto
625 656 571 669 512 669  curveto
437 669 367 649 302 609  curveto
238 569 187 512 149 437  curveto
112 362 93 284 93 204  curveto
93 129 109 61 142 0  curveto
175 -61 222 -107 282 -138  curveto
342 -170 406 -186 475 -186  curveto
561 -186 638 -163 707 -117  curveto
776 -71 830 -4 868 83  curveto
896 83 lineto
867 -5 813 -77 736 -132  curveto
659 -188 571 -215 473 -215  curveto
395 -215 323 -197 257 -160  curveto
190 -124 139 -72 102 -5  curveto
65 62 47 136 47 216  curveto
47 302 67 382 107 457  curveto
148 531 204 589 277 631  curveto
350 673 427 694 509 694  curveto
576 694 637 680 691 652  curveto
745 624 787 584 815 530  curveto
843 476 857 420 857 359  curveto
857 300 844 241 818 182  curveto
791 124 757 81 716 55  curveto
675 28 632 15 588 15  curveto
563 15 545 21 532 32  curveto
519 44 513 60 513 82  curveto
513 100 516 124 522 153  curveto
474 95 435 57 406 40  curveto
377 23 352 14 330 14  curveto
306 14 286 24 268 45  curveto
250 66 241 93 241 128  curveto
241 175 257 228 287 287  curveto
318 345 359 393 410 430  curveto
447 457 481 470 510 470  curveto
532 470 550 465 565 453  curveto
579 442 589 425 594 403  curveto
610 457 lineto
687 467 lineto
closepath
516 447 moveto
491 447 466 434 441 409  curveto
405 371 373 320 347 256  curveto
328 209 318 171 318 143  curveto
318 122 324 105 336 93  curveto
347 80 360 73 375 73  curveto
393 73 413 80 434 95  curveto
455 109 477 131 500 161  curveto
522 191 539 221 549 250  curveto
568 302 577 344 577 377  curveto
577 398 571 416 559 428  curveto
547 441 533 447 516 447  curveto
closepath
fill
		} def

	/A
		{
457 221 moveto
201 221 lineto
156 117 lineto
145 91 139 72 139 59  curveto
139 49 144 40 154 32  curveto
163 25 184 20 216 18  curveto
216 0 lineto
7 0 lineto
7 18 lineto
35 22 53 29 61 37  curveto
78 52 96 84 116 132  curveto
349 677 lineto
366 677 lineto
597 126 lineto
615 82 632 53 647 40  curveto
662 27 683 19 710 18  curveto
710 0 lineto
449 0 lineto
449 18 lineto
476 19 493 23 503 31  curveto
512 38 517 47 517 58  curveto
517 72 510 95 497 126  curveto
457 221 lineto
closepath
443 257 moveto
331 525 lineto
216 257 lineto
443 257 lineto
closepath
fill
		} def

	/B
		{
461 337 moveto
507 328 542 312 564 291  curveto
596 261 612 224 612 181  curveto
612 148 601 116 581 86  curveto
560 56 531 34 495 20  curveto
459 6 403 0 329 0  curveto
16 0 lineto
16 18 lineto
41 18 lineto
69 18 89 26 101 44  curveto
108 55 112 80 112 117  curveto
112 544 lineto
112 585 107 611 98 622  curveto
85 636 66 644 41 644  curveto
16 644 lineto
16 662 lineto
302 662 lineto
356 662 398 658 431 650  curveto
479 638 517 617 542 588  curveto
568 558 581 524 581 485  curveto
581 452 571 422 551 396  curveto
531 370 501 350 461 337  curveto
closepath
206 364 moveto
218 361 231 360 247 359  curveto
262 357 279 357 298 357  curveto
345 357 381 362 405 372  curveto
429 383 447 398 460 419  curveto
473 441 479 464 479 489  curveto
479 527 463 561 432 588  curveto
400 615 354 629 293 629  curveto
261 629 232 625 206 618  curveto
206 364 lineto
closepath
206 47 moveto
243 39 281 34 317 34  curveto
376 34 421 47 452 74  curveto
483 101 499 133 499 172  curveto
499 198 492 223 478 247  curveto
464 270 441 289 409 303  curveto
378 316 339 323 292 323  curveto
272 323 255 323 240 322  curveto
226 322 214 320 206 319  curveto
206 47 lineto
closepath
fill
		} def

	/C
		{
602 677 moveto
617 452 lineto
602 452 lineto
581 519 553 568 515 597  curveto
478 627 433 642 380 642  curveto
336 642 297 630 261 608  curveto
226 586 198 550 177 501  curveto
157 453 147 392 147 319  curveto
147 259 157 208 176 164  curveto
195 120 224 86 262 62  curveto
301 39 345 27 395 27  curveto
437 27 475 37 508 55  curveto
541 73 577 110 617 165  curveto
632 155 lineto
599 96 560 53 516 25  curveto
471 -1 419 -15 358 -15  curveto
248 -15 163 25 103 106  curveto
58 167 36 238 36 320  curveto
36 386 50 447 80 502  curveto
110 558 150 601 202 631  curveto
254 662 311 677 373 677  curveto
420 677 468 665 514 642  curveto
528 634 538 631 543 631  curveto
552 631 560 634 566 640  curveto
575 649 581 661 584 677  curveto
602 677 lineto
closepath
fill
		} def

	/D
		{
17 0 moveto
17 18 lineto
42 18 lineto
69 18 89 27 101 44  curveto
108 55 112 79 112 117  curveto
112 544 lineto
112 586 107 612 98 622  curveto
85 636 67 644 42 644  curveto
17 644 lineto
17 662 lineto
286 662 lineto
385 662 460 650 512 628  curveto
564 605 605 568 636 516  curveto
668 463 684 403 684 334  curveto
684 242 656 165 600 103  curveto
537 34 441 0 312 0  curveto
17 0 lineto
closepath
206 47 moveto
247 38 282 34 310 34  curveto
385 34 448 60 498 113  curveto
547 166 572 238 572 329  curveto
572 421 547 493 498 545  curveto
448 598 384 625 306 625  curveto
276 625 243 620 206 610  curveto
206 47 lineto
closepath
fill
		} def

	/E
		{
208 625 moveto
208 364 lineto
354 364 lineto
392 364 417 369 430 381  curveto
447 396 456 422 458 460  curveto
476 460 lineto
476 229 lineto
458 229 lineto
453 262 449 282 444 292  curveto
438 303 429 312 416 318  curveto
402 325 382 328 354 328  curveto
208 328 lineto
208 110 lineto
208 81 210 63 212 56  curveto
215 50 220 45 226 41  curveto
233 38 245 36 263 36  curveto
375 36 lineto
413 36 440 38 457 43  curveto
474 49 490 59 506 74  curveto
526 94 547 125 568 166  curveto
587 166 lineto
530 0 lineto
20 0 lineto
20 18 lineto
43 18 lineto
59 18 74 21 88 29  curveto
98 34 105 42 109 52  curveto
113 63 115 84 115 116  curveto
115 546 lineto
115 588 111 614 102 624  curveto
90 637 71 644 43 644  curveto
20 644 lineto
20 662 lineto
530 662 lineto
538 517 lineto
519 517 lineto
512 551 504 575 496 588  curveto
488 601 475 611 459 618  curveto
446 623 423 625 390 625  curveto
208 625 lineto
closepath
fill
		} def

	/F
		{
204 625 moveto
204 365 lineto
325 365 lineto
352 365 373 371 385 384  curveto
398 396 407 420 411 456  curveto
429 456 lineto
429 232 lineto
411 232 lineto
411 258 407 277 401 289  curveto
395 301 386 310 375 316  curveto
364 322 347 325 325 325  curveto
204 325 lineto
204 117 lineto
204 83 206 61 210 50  curveto
214 42 221 35 231 29  curveto
245 21 260 18 276 18  curveto
300 18 lineto
300 0 lineto
16 0 lineto
16 18 lineto
39 18 lineto
66 18 86 26 99 42  curveto
106 52 110 77 110 117  curveto
110 544 lineto
110 578 108 600 104 611  curveto
101 619 94 626 84 632  curveto
70 640 55 644 39 644  curveto
16 644 lineto
16 662 lineto
508 662 lineto
515 516 lineto
498 516 lineto
489 547 479 570 468 584  curveto
457 599 443 609 427 616  curveto
410 622 385 625 350 625  curveto
204 625 lineto
closepath
fill
		} def

	/G
		{
613 677 moveto
630 468 lineto
613 468 lineto
596 520 574 559 546 585  curveto
507 624 456 643 395 643  curveto
310 643 246 609 202 542  curveto
165 486 147 419 147 341  curveto
147 278 159 221 184 168  curveto
208 116 240 78 280 54  curveto
319 30 360 18 401 18  curveto
426 18 449 21 472 27  curveto
495 33 517 42 538 54  curveto
538 246 lineto
538 279 536 301 531 311  curveto
525 321 518 329 507 334  curveto
496 340 478 342 451 342  curveto
451 361 lineto
708 361 lineto
708 342 lineto
695 342 lineto
670 342 653 334 643 317  curveto
637 305 633 281 633 246  curveto
633 43 lineto
596 23 559 8 522 0  curveto
486 -10 445 -15 401 -15  curveto
273 -15 176 25 109 107  curveto
60 169 35 240 35 320  curveto
35 379 49 434 77 488  curveto
110 551 155 600 213 634  curveto
262 663 319 677 385 677  curveto
409 677 431 675 451 671  curveto
471 667 499 658 535 645  curveto
553 638 565 635 571 635  curveto
577 635 583 638 587 643  curveto
592 649 594 660 595 677  curveto
613 677 lineto
closepath
fill
		} def

	/H
		{
205 354 moveto
513 354 lineto
513 544 lineto
513 578 511 600 506 611  curveto
503 619 496 626 486 632  curveto
472 640 457 644 441 644  curveto
418 644 lineto
418 662 lineto
701 662 lineto
701 644 lineto
678 644 lineto
662 644 647 640 633 632  curveto
623 627 616 619 612 609  curveto
608 598 606 576 606 544  curveto
606 117 lineto
606 83 609 61 613 50  curveto
616 42 623 35 633 29  curveto
647 21 662 18 678 18  curveto
701 18 lineto
701 0 lineto
418 0 lineto
418 18 lineto
441 18 lineto
468 18 488 26 500 42  curveto
509 52 513 77 513 117  curveto
513 318 lineto
205 318 lineto
205 117 lineto
205 83 207 61 211 50  curveto
215 42 222 35 232 29  curveto
246 21 261 18 276 18  curveto
300 18 lineto
300 0 lineto
17 0 lineto
17 18 lineto
40 18 lineto
67 18 87 26 100 42  curveto
107 52 111 77 111 117  curveto
111 544 lineto
111 578 109 600 105 611  curveto
102 619 95 626 85 632  curveto
71 640 56 644 40 644  curveto
17 644 lineto
17 662 lineto
300 662 lineto
300 644 lineto
276 644 lineto
261 644 246 640 232 632  curveto
222 627 215 619 211 609  curveto
207 598 205 576 205 544  curveto
205 354 lineto
closepath
fill
		} def

	/I
		{
308 18 moveto
308 0 lineto
24 0 lineto
24 18 lineto
48 18 lineto
75 18 95 26 107 42  curveto
115 52 119 77 119 117  curveto
119 544 lineto
119 578 117 600 113 611  curveto
110 619 103 626 93 632  curveto
78 640 63 644 48 644  curveto
24 644 lineto
24 662 lineto
308 662 lineto
308 644 lineto
284 644 lineto
257 644 237 636 225 620  curveto
217 609 213 584 213 544  curveto
213 117 lineto
213 83 215 61 219 50  curveto
222 42 229 35 240 29  curveto
254 21 269 18 284 18  curveto
308 18 lineto
closepath
fill
		} def

	/J
		{
99 644 moveto
99 662 lineto
383 662 lineto
383 644 lineto
359 644 lineto
332 644 312 636 300 620  curveto
292 609 288 584 288 544  curveto
288 221 lineto
288 171 283 131 272 100  curveto
261 69 242 42 215 19  curveto
189 -3 156 -15 119 -15  curveto
88 -15 64 -7 46 7  curveto
29 22 20 40 20 59  curveto
20 75 24 87 32 95  curveto
43 105 55 110 70 110  curveto
80 110 90 107 98 100  curveto
106 93 117 75 129 45  curveto
137 28 146 19 158 19  curveto
167 19 175 24 183 35  curveto
191 46 194 65 194 92  curveto
194 544 lineto
194 578 192 600 188 611  curveto
185 619 178 626 167 632  curveto
153 640 139 644 123 644  curveto
99 644 lineto
closepath
fill
		} def

	/K
		{
298 367 moveto
542 124 lineto
583 84 617 57 645 42  curveto
673 28 702 20 730 18  curveto
730 0 lineto
415 0 lineto
415 18 lineto
434 18 447 21 456 27  curveto
464 33 468 41 468 48  curveto
468 56 467 63 464 69  curveto
461 76 450 87 433 104  curveto
205 330 lineto
205 117 lineto
205 83 207 61 211 50  curveto
214 42 221 35 231 29  curveto
245 21 260 18 276 18  curveto
298 18 lineto
298 0 lineto
16 0 lineto
16 18 lineto
40 18 lineto
67 18 87 26 99 42  curveto
107 52 111 77 111 117  curveto
111 544 lineto
111 578 109 600 104 611  curveto
101 619 95 626 84 632  curveto
70 640 55 644 40 644  curveto
16 644 lineto
16 662 lineto
298 662 lineto
298 644 lineto
276 644 lineto
261 644 246 640 231 632  curveto
221 627 214 619 210 609  curveto
207 598 205 577 205 544  curveto
205 342 lineto
211 348 233 369 271 404  curveto
368 492 427 551 447 581  curveto
456 594 460 605 460 615  curveto
460 623 457 629 450 635  curveto
443 641 431 644 415 644  curveto
400 644 lineto
400 662 lineto
643 662 lineto
643 644 lineto
629 643 616 641 604 638  curveto
592 634 578 627 561 617  curveto
544 607 523 590 499 567  curveto
491 561 458 528 399 467  curveto
298 367 lineto
closepath
fill
		} def

	/L
		{
573 183 moveto
589 179 lineto
532 0 lineto
20 0 lineto
20 18 lineto
44 18 lineto
72 18 92 27 104 45  curveto
111 55 115 79 115 117  curveto
115 544 lineto
115 586 110 612 101 622  curveto
88 636 69 644 44 644  curveto
20 644 lineto
20 662 lineto
319 662 lineto
319 644 lineto
284 644 260 641 245 634  curveto
231 627 222 618 216 608  curveto
211 597 208 573 208 533  curveto
208 117 lineto
208 90 211 72 216 62  curveto
220 55 226 50 234 46  curveto
243 43 268 42 311 42  curveto
359 42 lineto
410 42 445 45 466 53  curveto
486 60 505 73 522 93  curveto
539 112 556 142 573 183  curveto
closepath
fill
		} def

	/M
		{
409 0 moveto
153 557 lineto
153 114 lineto
153 74 157 48 166 38  curveto
178 24 197 18 223 18  curveto
247 18 lineto
247 0 lineto
16 0 lineto
16 18 lineto
40 18 lineto
68 18 87 26 99 43  curveto
106 53 110 77 110 114  curveto
110 547 lineto
110 576 107 597 100 610  curveto
96 620 87 628 75 634  curveto
63 640 43 644 16 644  curveto
16 662 lineto
204 662 lineto
444 144 lineto
680 662 lineto
868 662 lineto
868 644 lineto
845 644 lineto
816 644 796 635 785 618  curveto
778 608 774 584 774 547  curveto
774 114 lineto
774 74 778 48 788 38  curveto
800 24 819 18 845 18  curveto
868 18 lineto
868 0 lineto
586 0 lineto
586 18 lineto
610 18 lineto
638 18 658 26 669 43  curveto
677 53 680 77 680 114  curveto
680 557 lineto
425 0 lineto
409 0 lineto
closepath
fill
		} def

	/N
		{
-13 662 moveto
166 662 lineto
571 165 lineto
571 547 lineto
571 588 566 613 557 623  curveto
545 637 526 644 500 644  curveto
477 644 lineto
477 662 lineto
708 662 lineto
708 644 lineto
684 644 lineto
656 644 636 635 625 618  curveto
617 608 614 584 614 547  curveto
614 -10 lineto
596 -10 lineto
160 522 lineto
160 114 lineto
160 74 164 48 173 38  curveto
185 24 204 18 230 18  curveto
253 18 lineto
253 0 lineto
23 0 lineto
23 18 lineto
46 18 lineto
74 18 94 26 106 43  curveto
113 53 117 77 117 114  curveto
117 575 lineto
97 597 83 612 73 619  curveto
63 626 48 633 29 639  curveto
20 642 6 644 -13 644  curveto
-13 662 lineto
closepath
fill
		} def

	/O
		{
365 677 moveto
451 677 526 644 589 579  curveto
652 514 683 432 683 334  curveto
683 234 651 150 588 84  curveto
524 18 448 -15 357 -15  curveto
266 -15 190 17 128 82  curveto
66 146 35 230 35 333  curveto
35 438 70 524 142 590  curveto
204 648 279 677 365 677  curveto
closepath
356 641 moveto
297 641 249 619 213 575  curveto
169 521 146 440 146 335  curveto
146 227 170 144 216 85  curveto
251 41 298 19 356 19  curveto
419 19 470 43 510 92  curveto
551 140 571 217 571 321  curveto
571 435 549 519 504 575  curveto
469 619 419 641 356 641  curveto
closepath
fill
		} def

	/P
		{
205 310 moveto
205 117 lineto
205 75 209 49 218 39  curveto
231 25 249 18 274 18  curveto
300 18 lineto
300 0 lineto
16 0 lineto
16 18 lineto
41 18 lineto
69 18 89 27 101 45  curveto
108 55 111 79 111 117  curveto
111 544 lineto
111 586 106 612 98 622  curveto
85 636 66 644 41 644  curveto
16 644 lineto
16 662 lineto
259 662 lineto
318 662 365 656 399 643  curveto
433 631 462 611 485 582  curveto
509 553 521 518 521 479  curveto
521 424 503 381 467 347  curveto
431 313 381 296 316 296  curveto
300 296 283 297 264 299  curveto
246 302 226 305 205 310  curveto
closepath
205 337 moveto
222 334 237 332 250 330  curveto
264 328 275 328 285 328  curveto
319 328 348 341 372 367  curveto
397 393 409 427 409 469  curveto
409 497 403 524 392 549  curveto
380 573 363 592 342 604  curveto
320 616 296 622 269 622  curveto
252 622 231 619 205 613  curveto
205 337 lineto
closepath
fill
		} def

	/Q
		{
440 -7 moveto
473 -64 509 -106 548 -133  curveto
586 -160 630 -176 679 -180  curveto
679 -195 lineto
634 -194 586 -185 535 -168  curveto
484 -152 436 -129 390 -100  curveto
344 -71 305 -40 271 -7  curveto
225 11 187 31 160 52  curveto
120 84 90 123 68 169  curveto
46 215 35 269 35 332  curveto
35 431 67 513 131 579  curveto
195 644 273 677 364 677  curveto
450 677 525 644 589 578  curveto
652 513 684 430 684 330  curveto
684 249 661 178 616 117  curveto
571 55 512 14 440 -7  curveto
closepath
358 639 moveto
299 639 251 618 215 576  curveto
169 523 146 441 146 332  curveto
146 225 170 142 216 84  curveto
252 40 299 18 358 18  curveto
419 18 468 40 506 84  curveto
550 137 572 215 572 318  curveto
572 397 560 464 536 518  curveto
517 559 492 590 462 610  curveto
431 629 396 639 358 639  curveto
closepath
fill
		} def

	/R
		{
675 0 moveto
499 0 lineto
274 309 lineto
258 308 244 308 234 308  curveto
230 308 225 308 220 308  curveto
215 308 210 309 205 309  curveto
205 117 lineto
205 75 210 49 219 39  curveto
231 25 250 18 274 18  curveto
300 18 lineto
300 0 lineto
17 0 lineto
17 18 lineto
42 18 lineto
69 18 90 27 102 45  curveto
108 55 112 79 112 117  curveto
112 544 lineto
112 586 107 612 98 622  curveto
85 636 67 644 42 644  curveto
17 644 lineto
17 662 lineto
258 662 lineto
328 662 380 656 413 646  curveto
447 636 475 617 498 590  curveto
522 562 533 529 533 491  curveto
533 451 520 415 493 385  curveto
467 355 426 334 370 322  curveto
507 132 lineto
538 88 565 59 587 45  curveto
610 31 639 21 675 18  curveto
675 0 lineto
closepath
205 340 moveto
211 340 217 340 221 340  curveto
226 339 229 339 232 339  curveto
296 339 343 353 375 380  curveto
407 408 423 443 423 485  curveto
423 526 410 560 385 586  curveto
359 612 324 625 282 625  curveto
263 625 237 621 205 615  curveto
205 340 lineto
closepath
fill
		} def

	/S
		{
458 677 moveto
458 448 lineto
440 448 lineto
434 492 424 527 408 553  curveto
393 579 372 599 344 615  curveto
316 630 287 638 257 638  curveto
223 638 195 627 173 607  curveto
151 586 140 562 140 536  curveto
140 516 147 498 161 481  curveto
181 457 229 424 305 383  curveto
367 350 409 325 431 307  curveto
454 289 471 268 484 244  curveto
496 220 502 195 502 168  curveto
502 118 482 75 444 39  curveto
405 3 355 -15 293 -15  curveto
274 -15 256 -13 239 -10  curveto
229 -9 208 -3 177 7  curveto
145 17 125 22 116 22  curveto
108 22 102 20 97 15  curveto
92 10 89 0 86 -15  curveto
68 -15 lineto
68 211 lineto
86 211 lineto
95 164 106 128 121 105  curveto
135 81 157 62 186 46  curveto
216 30 248 22 283 22  curveto
324 22 356 33 380 55  curveto
403 76 415 102 415 131  curveto
415 147 411 164 402 180  curveto
393 197 379 212 360 227  curveto
347 236 312 257 256 289  curveto
199 321 159 346 135 365  curveto
111 384 93 404 81 427  curveto
68 450 62 475 62 502  curveto
62 550 80 591 117 625  curveto
153 660 200 677 256 677  curveto
291 677 328 668 368 651  curveto
386 643 399 639 406 639  curveto
415 639 422 641 427 646  curveto
432 651 437 661 440 677  curveto
458 677 lineto
closepath
fill
		} def

	/T
		{
578 662 moveto
585 506 lineto
567 506 lineto
563 534 558 553 552 565  curveto
542 584 529 598 512 607  curveto
495 616 473 620 446 620  curveto
353 620 lineto
353 114 lineto
353 74 357 48 366 38  curveto
378 24 397 18 423 18  curveto
446 18 lineto
446 0 lineto
165 0 lineto
165 18 lineto
188 18 lineto
216 18 236 26 248 43  curveto
255 53 259 77 259 114  curveto
259 620 lineto
179 620 lineto
148 620 126 618 113 613  curveto
96 607 82 595 70 578  curveto
58 560 51 536 48 506  curveto
30 506 lineto
38 662 lineto
578 662 lineto
closepath
fill
		} def

	/U
		{
477 644 moveto
477 662 lineto
711 662 lineto
711 644 lineto
686 644 lineto
660 644 640 633 626 611  curveto
619 601 616 577 616 541  curveto
616 272 lineto
616 206 609 154 596 117  curveto
583 81 557 49 518 23  curveto
480 -2 427 -15 361 -15  curveto
289 -15 234 -3 196 21  curveto
159 47 132 80 117 123  curveto
106 152 101 206 101 286  curveto
101 544 lineto
101 585 95 612 84 625  curveto
73 637 55 644 30 644  curveto
5 644 lineto
5 662 lineto
291 662 lineto
291 644 lineto
266 644 lineto
238 644 219 635 207 618  curveto
199 606 195 582 195 544  curveto
195 256 lineto
195 230 197 201 202 167  curveto
207 134 215 108 228 90  curveto
240 71 258 56 281 44  curveto
304 32 333 26 367 26  curveto
410 26 449 35 483 54  curveto
517 73 540 97 553 127  curveto
566 156 572 206 572 276  curveto
572 544 lineto
572 586 567 612 558 622  curveto
545 636 527 644 501 644  curveto
477 644 lineto
closepath
fill
		} def

	/V
		{
709 662 moveto
709 644 lineto
686 639 668 632 656 621  curveto
639 605 624 581 610 548  curveto
379 -15 lineto
361 -15 lineto
113 555 lineto
101 584 92 602 86 609  curveto
78 619 68 627 56 633  curveto
45 638 28 642 8 644  curveto
8 662 lineto
279 662 lineto
279 644 lineto
248 641 228 635 219 628  curveto
210 620 206 611 206 599  curveto
206 583 213 557 228 523  curveto
396 135 lineto
553 518 lineto
568 556 576 582 576 597  curveto
576 606 571 615 562 624  curveto
552 632 536 638 514 642  curveto
512 642 509 643 505 644  curveto
505 662 lineto
709 662 lineto
closepath
fill
		} def

	/W
		{
936 662 moveto
936 644 lineto
918 644 904 640 894 634  curveto
883 628 873 617 863 600  curveto
856 588 846 561 832 518  curveto
647 -15 lineto
628 -15 lineto
477 408 lineto
327 -15 lineto
310 -15 lineto
113 534 lineto
98 575 89 599 85 607  curveto
78 619 70 628 58 635  curveto
47 641 32 644 13 644  curveto
13 662 lineto
258 662 lineto
258 644 lineto
246 644 lineto
229 644 216 640 207 632  curveto
197 624 193 615 193 604  curveto
193 592 200 566 214 525  curveto
345 153 lineto
455 469 lineto
435 525 lineto
419 569 lineto
413 586 405 600 396 612  curveto
392 618 387 624 381 628  curveto
373 634 365 638 356 641  curveto
350 643 340 644 327 644  curveto
327 662 lineto
585 662 lineto
585 644 lineto
567 644 lineto
549 644 536 640 527 632  curveto
519 624 515 613 515 600  curveto
515 583 522 555 537 513  curveto
664 153 lineto
790 518 lineto
804 558 811 586 811 602  curveto
811 610 809 617 804 623  curveto
799 630 793 634 786 637  curveto
774 641 758 644 738 644  curveto
738 662 lineto
936 662 lineto
closepath
fill
		} def

	/X
		{
408 366 moveto
550 154 lineto
589 96 618 59 637 43  curveto
656 28 681 19 710 18  curveto
710 0 lineto
426 0 lineto
426 18 lineto
445 18 459 20 468 23  curveto
475 26 480 31 485 37  curveto
489 43 491 49 491 55  curveto
491 63 490 70 487 78  curveto
485 83 476 97 460 121  curveto
348 291 lineto
209 113 lineto
194 94 186 81 183 75  curveto
180 69 178 62 178 55  curveto
178 45 183 36 191 29  curveto
200 22 217 19 242 18  curveto
242 0 lineto
7 0 lineto
7 18 lineto
23 19 38 23 50 28  curveto
70 36 89 48 107 62  curveto
126 76 146 98 170 128  curveto
326 325 lineto
196 516 lineto
160 568 130 602 105 618  curveto
81 634 52 643 20 644  curveto
20 662 lineto
326 662 lineto
326 644 lineto
300 643 282 638 273 631  curveto
263 623 258 615 258 606  curveto
258 594 266 576 282 553  curveto
383 401 lineto
501 550 lineto
515 568 523 580 526 586  curveto
529 593 531 600 531 606  curveto
531 613 529 619 525 625  curveto
520 631 514 636 506 639  curveto
499 642 483 643 460 644  curveto
460 662 lineto
695 662 lineto
695 644 lineto
676 643 661 640 649 635  curveto
632 627 616 617 601 604  curveto
586 592 566 568 539 534  curveto
408 366 lineto
closepath
fill
		} def

	/Y
		{
476 662 moveto
707 662 lineto
707 644 lineto
694 644 lineto
686 644 673 640 657 632  curveto
641 625 626 614 613 600  curveto
599 586 583 563 563 532  curveto
404 280 lineto
404 114 lineto
404 74 408 48 417 38  curveto
430 24 449 18 476 18  curveto
498 18 lineto
498 0 lineto
216 0 lineto
216 18 lineto
240 18 lineto
268 18 288 26 299 43  curveto
306 53 310 77 310 114  curveto
310 271 lineto
128 548 lineto
107 581 92 601 85 609  curveto
77 618 61 627 37 639  curveto
31 642 21 644 9 644  curveto
9 662 lineto
292 662 lineto
292 644 lineto
277 644 lineto
262 644 248 640 235 633  curveto
222 626 216 615 216 601  curveto
216 589 226 568 246 537  curveto
384 324 lineto
514 528 lineto
533 558 543 581 543 596  curveto
543 605 541 613 536 621  curveto
531 628 524 633 516 637  curveto
507 642 494 644 476 644  curveto
476 662 lineto
closepath
fill
		} def

	/Z
		{
575 662 moveto
140 40 lineto
411 40 lineto
453 40 485 49 507 67  curveto
529 85 549 122 566 178  curveto
583 175 lineto
551 0 lineto
12 0 lineto
12 18 lineto
437 622 lineto
225 622 lineto
190 622 164 618 149 611  curveto
133 603 121 592 113 577  curveto
104 563 97 536 90 496  curveto
71 496 lineto
85 662 lineto
575 662 lineto
closepath
fill
		} def

	/bracketleft
		{
296 -198 moveto
82 -198 lineto
82 677 lineto
296 677 lineto
296 638 lineto
155 638 lineto
155 -160 lineto
296 -160 lineto
296 -198 lineto
closepath
fill
		} def

	/backslash
		{
40 694 moveto
279 -13 lineto
240 -13 lineto
1 694 lineto
40 694 lineto
closepath
fill
		} def

	/bracketright
		{
36 677 moveto
251 677 lineto
251 -198 lineto
36 -198 lineto
36 -160 lineto
178 -160 lineto
178 638 lineto
36 638 lineto
36 677 lineto
closepath
fill
		} def

	/asciicircum
		{
243 675 moveto
450 325 lineto
405 325 lineto
234 611 lineto
63 325 lineto
18 325 lineto
228 675 lineto
243 675 lineto
closepath
fill
		} def

	/underscore
		{
508 -215 moveto
-8 -215 lineto
-8 -174 lineto
508 -174 lineto
508 -215 lineto
closepath
fill
		} def

	/quoteleft
		{
57 678 moveto
166 678 lineto
218 510 lineto
201 510 lineto
57 678 lineto
closepath
fill
		} def

	/a
		{
284 64 moveto
238 28 209 8 198 2  curveto
180 -5 161 -9 142 -9  curveto
111 -9 85 1 65 22  curveto
45 43 35 71 35 105  curveto
35 127 40 146 50 162  curveto
63 184 86 205 119 225  curveto
152 244 207 268 284 296  curveto
284 313 lineto
284 358 277 389 263 405  curveto
249 422 228 430 201 430  curveto
181 430 164 425 152 414  curveto
140 403 134 390 134 375  curveto
135 347 lineto
135 332 131 321 123 312  curveto
116 304 106 300 93 300  curveto
81 300 71 305 64 313  curveto
56 321 52 333 52 348  curveto
52 376 67 401 95 425  curveto
124 448 164 460 216 460  curveto
256 460 288 453 313 440  curveto
333 430 347 414 356 393  curveto
362 379 365 350 365 307  curveto
365 155 lineto
365 112 366 86 367 76  curveto
369 67 371 60 375 57  curveto
379 54 383 52 388 52  curveto
393 52 398 53 402 56  curveto
409 60 422 72 441 91  curveto
441 64 lineto
405 15 370 -8 337 -8  curveto
321 -8 308 -3 299 7  curveto
289 18 284 37 284 64  curveto
closepath
284 96 moveto
284 266 lineto
235 247 203 233 189 225  curveto
163 210 145 195 134 180  curveto
123 164 117 147 117 128  curveto
117 105 124 86 138 70  curveto
152 55 168 47 187 47  curveto
211 47 244 63 284 96  curveto
closepath
fill
		} def

	/b
		{
153 370 moveto
197 430 243 460 293 460  curveto
339 460 379 440 414 401  curveto
448 362 465 308 465 240  curveto
465 161 438 97 386 48  curveto
340 7 290 -13 234 -13  curveto
208 -13 182 -8 155 0  curveto
128 9 101 24 73 42  curveto
73 506 lineto
73 557 72 588 69 600  curveto
67 611 63 619 58 624  curveto
52 628 46 630 38 630  curveto
29 630 18 627 4 622  curveto
-2 639 lineto
131 694 lineto
153 694 lineto
153 370 lineto
closepath
153 338 moveto
153 71 lineto
170 55 187 42 205 34  curveto
223 26 241 21 259 21  curveto
289 21 316 38 342 70  curveto
368 103 380 150 380 212  curveto
380 270 368 314 342 344  curveto
316 375 287 391 255 391  curveto
238 391 220 386 203 377  curveto
190 371 173 358 153 338  curveto
closepath
fill
		} def

	/c
		{
411 169 moveto
399 111 375 65 340 33  curveto
305 2 266 -13 223 -13  curveto
172 -13 128 7 90 50  curveto
53 92 34 150 34 223  curveto
34 293 55 350 96 394  curveto
138 438 188 460 247 460  curveto
291 460 327 448 355 425  curveto
384 402 398 378 398 353  curveto
398 340 394 330 386 323  curveto
378 315 367 311 353 311  curveto
333 311 319 317 309 330  curveto
304 336 300 349 298 369  curveto
296 388 290 403 278 413  curveto
267 422 251 427 231 427  curveto
198 427 172 415 152 391  curveto
126 359 113 317 113 265  curveto
113 211 126 164 152 123  curveto
178 82 214 62 258 62  curveto
290 62 319 73 344 95  curveto
362 110 380 137 396 176  curveto
411 169 lineto
closepath
fill
		} def

	/d
		{
347 50 moveto
325 27 304 11 283 1  curveto
262 -8 239 -13 215 -13  curveto
166 -13 124 6 87 47  curveto
51 88 33 140 33 205  curveto
33 269 53 327 93 381  curveto
134 434 186 460 249 460  curveto
288 460 321 448 347 423  curveto
347 505 lineto
347 556 345 588 343 600  curveto
341 611 337 619 332 624  curveto
326 628 320 630 312 630  curveto
304 630 292 627 278 622  curveto
272 639 lineto
405 694 lineto
427 694 lineto
427 177 lineto
427 124 428 92 431 81  curveto
433 69 437 61 443 57  curveto
448 52 454 50 461 50  curveto
470 50 482 53 497 58  curveto
502 41 lineto
369 -13 lineto
347 -13 lineto
347 50 lineto
closepath
347 84 moveto
347 314 lineto
345 337 339 357 329 375  curveto
319 393 306 407 290 416  curveto
274 426 258 430 243 430  curveto
215 430 189 417 167 392  curveto
137 358 122 308 122 243  curveto
122 177 136 127 165 92  curveto
194 57 226 40 261 40  curveto
290 40 319 54 347 84  curveto
closepath
fill
		} def

	/e
		{
106 278 moveto
106 212 122 160 154 122  curveto
187 84 225 65 269 65  curveto
298 65 324 73 345 90  curveto
367 106 385 133 400 172  curveto
415 163 lineto
408 118 388 77 355 41  curveto
323 4 281 -13 232 -13  curveto
178 -13 132 7 94 49  curveto
56 90 37 147 37 217  curveto
37 294 56 353 95 396  curveto
135 439 184 460 243 460  curveto
293 460 334 444 367 411  curveto
399 378 415 334 415 278  curveto
106 278 lineto
closepath
106 307 moveto
313 307 lineto
311 335 308 355 303 367  curveto
295 385 282 400 266 410  curveto
250 421 233 426 216 426  curveto
189 426 165 415 143 394  curveto
122 373 110 344 106 307  curveto
closepath
fill
		} def

	/f
		{
206 412 moveto
206 118 lineto
206 76 210 50 219 39  curveto
231 24 247 17 268 17  curveto
308 17 lineto
308 0 lineto
41 0 lineto
41 17 lineto
61 17 lineto
74 17 86 20 97 27  curveto
107 33 115 42 119 53  curveto
123 64 125 86 125 118  curveto
125 412 lineto
38 412 lineto
38 447 lineto
125 447 lineto
125 476 lineto
125 521 132 558 146 589  curveto
161 620 183 645 212 664  curveto
242 683 275 693 312 693  curveto
346 693 377 682 406 660  curveto
425 645 434 629 434 610  curveto
434 601 430 591 421 583  curveto
413 574 404 570 394 570  curveto
387 570 379 572 370 578  curveto
362 583 352 595 340 613  curveto
328 630 317 642 307 648  curveto
297 655 285 658 273 658  curveto
258 658 245 654 235 646  curveto
224 638 217 625 212 609  curveto
208 592 206 549 206 479  curveto
206 447 lineto
321 447 lineto
321 412 lineto
206 412 lineto
closepath
fill
		} def

	/g
		{
150 163 moveto
123 176 102 195 87 219  curveto
73 242 65 269 65 298  curveto
65 342 82 380 115 412  curveto
149 444 192 460 244 460  curveto
286 460 323 450 354 429  curveto
449 429 lineto
463 429 471 428 474 427  curveto
476 427 478 425 479 423  curveto
480 420 481 415 481 408  curveto
481 399 481 393 479 390  curveto
478 389 476 387 474 386  curveto
471 385 463 385 449 385  curveto
391 385 lineto
409 361 418 331 418 295  curveto
418 253 403 218 371 188  curveto
339 158 296 144 242 144  curveto
220 144 197 147 174 153  curveto
160 141 150 130 145 121  curveto
140 112 138 104 138 97  curveto
138 92 140 86 146 81  curveto
151 76 162 72 177 70  curveto
186 69 209 67 246 66  curveto
313 65 356 62 376 60  curveto
406 55 430 44 448 26  curveto
467 8 476 -14 476 -41  curveto
476 -77 458 -112 424 -144  curveto
373 -192 307 -215 225 -215  curveto
162 -215 109 -201 66 -173  curveto
41 -157 29 -140 29 -122  curveto
29 -114 31 -106 35 -99  curveto
40 -87 52 -70 69 -48  curveto
71 -45 88 -28 119 3  curveto
102 14 90 23 83 31  curveto
76 38 72 48 72 58  curveto
72 69 77 82 86 98  curveto
95 113 117 135 150 163  curveto
closepath
235 437 moveto
211 437 191 427 175 408  curveto
159 388 150 359 150 319  curveto
150 268 161 228 184 200  curveto
201 178 222 167 248 167  curveto
273 167 293 177 309 195  curveto
325 214 333 243 333 283  curveto
333 334 322 375 299 404  curveto
283 426 261 437 235 437  curveto
closepath
146 0 moveto
130 -16 119 -32 111 -46  curveto
103 -60 99 -73 99 -85  curveto
99 -101 109 -115 127 -126  curveto
160 -147 207 -157 269 -157  curveto
327 -157 370 -146 398 -126  curveto
426 -105 440 -83 440 -60  curveto
440 -43 432 -31 415 -23  curveto
398 -16 365 -12 314 -11  curveto
241 -9 185 -5 146 0  curveto
closepath
fill
		} def

	/h
		{
162 694 moveto
162 367 lineto
198 406 227 432 248 443  curveto
269 454 290 460 312 460  curveto
337 460 359 453 377 439  curveto
395 425 409 403 417 373  curveto
424 352 427 314 427 259  curveto
427 101 lineto
427 72 429 53 434 42  curveto
437 35 442 28 450 24  curveto
458 19 472 17 493 17  curveto
493 0 lineto
273 0 lineto
273 17 lineto
284 17 lineto
305 17 319 20 327 27  curveto
335 33 341 42 344 55  curveto
345 60 346 75 346 101  curveto
346 259 lineto
346 308 343 340 338 355  curveto
333 370 325 382 314 389  curveto
303 397 290 401 274 401  curveto
258 401 241 397 224 388  curveto
207 380 186 363 162 337  curveto
162 101 lineto
162 70 164 51 167 43  curveto
171 36 177 30 186 25  curveto
196 20 212 17 234 17  curveto
234 0 lineto
13 0 lineto
13 17 lineto
33 17 48 20 60 26  curveto
66 30 71 36 75 45  curveto
79 54 81 73 81 101  curveto
81 505 lineto
81 556 80 588 77 600  curveto
75 611 71 619 66 624  curveto
61 628 54 630 46 630  curveto
39 630 28 627 13 622  curveto
6 639 lineto
140 694 lineto
162 694 lineto
closepath
fill
		} def

	/i
		{
145 694 moveto
158 694 170 689 179 679  curveto
189 670 194 658 194 645  curveto
194 631 189 619 179 609  curveto
170 600 158 595 145 595  curveto
131 595 119 600 109 609  curveto
100 619 95 631 95 645  curveto
95 658 100 670 109 679  curveto
119 689 131 694 145 694  curveto
closepath
185 460 moveto
185 101 lineto
185 73 187 54 191 45  curveto
195 35 201 28 209 24  curveto
217 19 232 17 253 17  curveto
253 0 lineto
36 0 lineto
36 17 lineto
57 17 72 19 80 23  curveto
87 28 93 35 97 44  curveto
102 54 104 73 104 101  curveto
104 273 lineto
104 321 103 353 100 367  curveto
97 378 94 385 89 389  curveto
84 393 77 395 69 395  curveto
60 395 49 393 36 388  curveto
29 405 lineto
164 460 lineto
185 460 lineto
closepath
fill
		} def

	/j
		{
144 694 moveto
158 694 170 689 180 680  curveto
189 670 194 658 194 644  curveto
194 630 189 619 180 609  curveto
170 599 158 594 144 594  curveto
130 594 119 599 109 609  curveto
99 619 94 630 94 644  curveto
94 658 99 670 109 680  curveto
119 689 130 694 144 694  curveto
closepath
186 460 moveto
186 10 lineto
186 -66 170 -123 137 -160  curveto
105 -197 62 -215 10 -215  curveto
-18 -215 -40 -210 -55 -199  curveto
-69 -188 -76 -177 -76 -166  curveto
-76 -155 -72 -145 -64 -137  curveto
-56 -129 -47 -125 -36 -125  curveto
-28 -125 -19 -127 -10 -131  curveto
-5 -133 5 -141 21 -156  curveto
37 -170 50 -177 61 -177  curveto
68 -177 76 -174 83 -168  curveto
91 -162 97 -152 100 -137  curveto
104 -123 105 -93 105 -45  curveto
105 272 lineto
105 321 104 353 101 367  curveto
99 377 95 385 90 389  curveto
85 393 79 395 70 395  curveto
61 395 50 393 37 388  curveto
30 405 lineto
165 460 lineto
186 460 lineto
closepath
fill
		} def

	/k
		{
163 694 moveto
163 249 lineto
277 353 lineto
301 375 315 389 319 395  curveto
321 398 323 402 323 406  curveto
323 413 320 418 315 423  curveto
309 428 300 430 288 431  curveto
288 447 lineto
482 447 lineto
482 431 lineto
456 430 434 426 416 419  curveto
398 411 379 398 357 379  curveto
243 273 lineto
357 128 lineto
389 88 411 62 422 52  curveto
437 36 451 27 463 22  curveto
471 19 485 17 505 17  curveto
505 0 lineto
288 0 lineto
288 17 lineto
300 17 309 19 313 23  curveto
318 26 320 31 320 37  curveto
320 45 313 57 300 73  curveto
163 249 lineto
163 100 lineto
163 71 165 52 169 43  curveto
173 34 179 27 187 23  curveto
194 20 210 17 235 17  curveto
235 0 lineto
8 0 lineto
8 17 lineto
31 17 48 20 59 25  curveto
66 29 71 34 75 42  curveto
80 53 82 71 82 98  curveto
82 505 lineto
82 557 81 588 79 600  curveto
76 611 73 619 67 624  curveto
62 628 55 630 47 630  curveto
40 630 30 628 16 622  curveto
8 639 lineto
141 694 lineto
163 694 lineto
closepath
fill
		} def

	/l
		{
185 694 moveto
185 101 lineto
185 73 187 54 191 45  curveto
195 36 201 29 209 24  curveto
218 19 234 17 257 17  curveto
257 0 lineto
38 0 lineto
38 17 lineto
58 17 72 19 80 23  curveto
87 28 93 35 97 44  curveto
101 54 104 73 104 101  curveto
104 507 lineto
104 557 102 588 100 600  curveto
98 611 94 619 89 624  curveto
84 628 78 630 70 630  curveto
61 630 51 627 38 622  curveto
29 639 lineto
163 694 lineto
185 694 lineto
closepath
fill
		} def

	/m
		{
164 365 moveto
196 397 215 416 221 421  curveto
236 433 252 443 269 450  curveto
285 457 302 460 319 460  curveto
347 460 371 452 391 436  curveto
411 419 425 396 432 365  curveto
465 404 493 429 517 442  curveto
540 454 563 460 588 460  curveto
612 460 633 454 651 442  curveto
670 429 684 409 695 382  curveto
702 363 706 333 706 293  curveto
706 101 lineto
706 73 708 53 712 43  curveto
715 36 721 30 730 25  curveto
739 20 753 17 773 17  curveto
773 0 lineto
552 0 lineto
552 17 lineto
562 17 lineto
581 17 596 21 606 28  curveto
614 34 619 42 623 53  curveto
624 59 625 75 625 101  curveto
625 293 lineto
625 329 620 355 611 370  curveto
599 391 578 401 550 401  curveto
533 401 516 397 498 388  curveto
481 380 460 364 435 340  curveto
434 335 lineto
435 314 lineto
435 101 lineto
435 70 437 51 440 43  curveto
444 36 450 30 459 25  curveto
469 20 485 17 508 17  curveto
508 0 lineto
282 0 lineto
282 17 lineto
306 17 323 20 333 26  curveto
342 32 348 41 352 52  curveto
354 58 354 74 354 101  curveto
354 293 lineto
354 329 349 356 338 372  curveto
324 392 304 403 278 403  curveto
261 403 243 398 226 389  curveto
199 374 178 358 164 340  curveto
164 101 lineto
164 71 166 52 170 43  curveto
174 35 180 28 188 24  curveto
196 19 212 17 236 17  curveto
236 0 lineto
15 0 lineto
15 17 lineto
36 17 50 19 58 24  curveto
66 28 72 35 77 45  curveto
81 54 83 73 83 101  curveto
83 271 lineto
83 321 82 352 79 367  curveto
76 377 73 385 68 389  curveto
63 393 56 395 48 395  curveto
39 395 28 393 15 388  curveto
8 405 lineto
143 460 lineto
164 460 lineto
164 365 lineto
closepath
fill
		} def

	/n
		{
161 365 moveto
214 428 264 460 311 460  curveto
335 460 356 454 374 442  curveto
392 429 406 409 416 381  curveto
423 362 427 332 427 292  curveto
427 101 lineto
427 72 429 53 434 43  curveto
437 35 443 28 451 24  curveto
459 19 474 17 495 17  curveto
495 0 lineto
274 0 lineto
274 17 lineto
283 17 lineto
304 17 319 20 327 27  curveto
335 33 341 42 344 55  curveto
346 60 346 75 346 101  curveto
346 284 lineto
346 324 341 354 330 372  curveto
320 391 302 400 277 400  curveto
238 400 200 379 161 336  curveto
161 101 lineto
161 70 163 52 167 44  curveto
171 35 177 28 185 24  curveto
193 19 209 17 234 17  curveto
234 0 lineto
13 0 lineto
13 17 lineto
22 17 lineto
45 17 61 23 69 34  curveto
77 46 81 68 81 101  curveto
81 267 lineto
81 320 79 353 77 365  curveto
74 376 71 384 66 389  curveto
61 393 54 395 45 395  curveto
36 395 25 393 13 388  curveto
5 405 lineto
140 460 lineto
161 460 lineto
161 365 lineto
closepath
fill
		} def

	/o
		{
250 460 moveto
317 460 372 434 413 383  curveto
447 339 465 288 465 231  curveto
465 191 455 151 436 110  curveto
417 69 390 38 357 17  curveto
323 -3 285 -13 244 -13  curveto
177 -13 123 13 83 66  curveto
50 112 33 162 33 219  curveto
33 260 43 301 64 341  curveto
84 382 111 412 144 431  curveto
177 450 212 460 250 460  curveto
closepath
234 428 moveto
217 428 200 423 182 413  curveto
165 403 151 385 140 359  curveto
129 333 124 300 124 260  curveto
124 195 137 138 163 91  curveto
189 44 223 21 265 21  curveto
297 21 323 34 343 60  curveto
364 86 374 130 374 194  curveto
374 273 357 336 323 381  curveto
300 413 270 428 234 428  curveto
closepath
fill
		} def

	/p
		{
0 402 moveto
136 458 lineto
155 458 lineto
155 354 lineto
178 393 201 420 224 436  curveto
248 452 272 460 298 460  curveto
343 460 380 442 410 407  curveto
447 364 465 308 465 239  curveto
465 162 443 98 399 48  curveto
362 7 317 -13 261 -13  curveto
237 -13 216 -10 199 -3  curveto
186 1 171 11 155 25  curveto
155 -110 lineto
155 -140 157 -160 160 -168  curveto
164 -177 171 -183 180 -188  curveto
189 -193 206 -195 230 -195  curveto
230 -213 lineto
-3 -213 lineto
-3 -195 lineto
8 -195 lineto
26 -196 41 -192 54 -185  curveto
60 -181 65 -176 69 -168  curveto
72 -160 74 -139 74 -107  curveto
74 315 lineto
74 344 72 362 70 370  curveto
67 378 63 384 57 388  curveto
52 392 44 394 34 394  curveto
26 394 16 391 4 387  curveto
0 402 lineto
closepath
155 325 moveto
155 158 lineto
155 122 156 98 159 86  curveto
164 68 175 51 193 37  curveto
210 22 233 15 260 15  curveto
292 15 319 28 339 53  curveto
365 86 378 133 378 193  curveto
378 262 363 314 333 351  curveto
313 376 288 389 259 389  curveto
244 389 228 385 213 377  curveto
201 372 182 354 155 325  curveto
closepath
fill
		} def

	/q
		{
427 460 moveto
427 -114 lineto
427 -143 429 -161 433 -169  curveto
437 -178 443 -184 451 -188  curveto
459 -193 475 -195 500 -195  curveto
500 -213 lineto
274 -213 lineto
274 -195 lineto
283 -195 lineto
301 -195 315 -193 325 -187  curveto
331 -184 336 -177 340 -168  curveto
344 -159 346 -141 346 -114  curveto
346 77 lineto
317 42 291 18 269 5  curveto
246 -7 223 -13 200 -13  curveto
156 -13 118 6 84 45  curveto
50 84 33 137 33 203  curveto
33 279 55 341 100 388  curveto
145 436 199 460 263 460  curveto
281 460 298 457 314 452  curveto
330 447 344 439 356 429  curveto
375 438 393 448 410 460  curveto
427 460 lineto
closepath
346 108 moveto
346 318 lineto
346 342 343 361 337 375  curveto
330 389 319 401 303 411  curveto
286 421 268 426 248 426  curveto
211 426 180 410 154 379  curveto
128 348 115 302 115 239  curveto
115 179 128 133 155 102  curveto
181 70 213 55 250 55  curveto
270 55 287 59 302 67  curveto
317 75 332 89 346 108  curveto
closepath
fill
		} def

	/r
		{
162 460 moveto
162 359 lineto
199 426 237 460 277 460  curveto
295 460 310 455 321 444  curveto
333 433 339 420 339 406  curveto
339 393 335 382 326 374  curveto
318 365 308 360 296 360  curveto
284 360 272 366 258 377  curveto
243 388 233 394 226 394  curveto
220 394 214 391 207 384  curveto
192 371 177 349 162 318  curveto
162 104 lineto
162 79 165 61 171 48  curveto
175 39 183 32 193 26  curveto
204 20 220 17 240 17  curveto
240 0 lineto
11 0 lineto
11 17 lineto
34 17 50 21 62 28  curveto
70 33 75 41 79 53  curveto
80 58 81 74 81 100  curveto
81 273 lineto
81 326 80 357 78 366  curveto
76 376 72 384 66 388  curveto
60 393 53 395 45 395  curveto
35 395 23 393 11 388  curveto
6 405 lineto
141 460 lineto
162 460 lineto
closepath
fill
		} def

	/s
		{
320 460 moveto
320 308 lineto
304 308 lineto
291 355 275 388 256 405  curveto
237 423 212 431 182 431  curveto
159 431 141 425 127 413  curveto
113 401 106 388 106 373  curveto
106 355 111 339 122 326  curveto
132 313 152 299 183 284  curveto
254 249 lineto
320 217 354 174 354 122  curveto
354 81 338 48 307 23  curveto
277 -1 242 -13 204 -13  curveto
177 -13 146 -8 110 0  curveto
100 4 91 5 84 5  curveto
76 5 71 1 66 -6  curveto
50 -6 lineto
50 152 lineto
66 152 lineto
76 107 93 72 119 49  curveto
144 26 173 15 205 15  curveto
228 15 246 21 260 34  curveto
274 48 281 63 281 82  curveto
281 104 273 123 258 139  curveto
242 154 210 173 163 197  curveto
116 220 85 241 70 260  curveto
56 279 48 302 48 331  curveto
48 367 61 398 86 423  curveto
111 448 144 460 184 460  curveto
202 460 223 456 248 449  curveto
265 444 276 441 281 441  curveto
286 441 291 443 293 445  curveto
296 447 300 452 304 460  curveto
320 460 lineto
closepath
fill
		} def

	/t
		{
161 594 moveto
161 447 lineto
265 447 lineto
265 413 lineto
161 413 lineto
161 123 lineto
161 94 165 74 173 64  curveto
181 54 192 49 205 49  curveto
216 49 226 52 236 59  curveto
246 66 254 75 260 88  curveto
279 88 lineto
267 56 251 32 230 16  curveto
210 0 188 -7 166 -7  curveto
151 -7 136 -3 122 5  curveto
108 13 97 25 90 40  curveto
83 56 80 80 80 112  curveto
80 413 lineto
9 413 lineto
9 429 lineto
27 436 45 448 64 465  curveto
83 482 100 502 114 526  curveto
122 538 132 561 146 594  curveto
161 594 lineto
closepath
fill
		} def

	/u
		{
423 447 moveto
423 176 lineto
423 124 424 92 427 81  curveto
429 69 433 61 438 57  curveto
444 52 450 50 457 50  curveto
467 50 479 53 491 58  curveto
498 41 lineto
364 -13 lineto
342 -13 lineto
342 81 lineto
304 39 275 13 254 2  curveto
234 -8 213 -13 190 -13  curveto
165 -13 144 -6 125 8  curveto
107 22 94 41 87 63  curveto
80 86 76 118 76 160  curveto
76 360 lineto
76 381 74 396 69 404  curveto
65 412 58 418 49 423  curveto
40 427 24 429 0 429  curveto
0 447 lineto
157 447 lineto
157 147 lineto
157 106 164 78 179 65  curveto
193 52 211 46 231 46  curveto
245 46 261 50 279 59  curveto
297 68 318 85 342 109  curveto
342 363 lineto
342 388 338 405 328 414  curveto
319 423 300 428 271 429  curveto
271 447 lineto
423 447 lineto
closepath
fill
		} def

	/v
		{
8 447 moveto
218 447 lineto
218 429 lineto
205 429 lineto
192 429 182 426 176 419  curveto
169 413 166 405 166 395  curveto
166 383 169 370 176 354  curveto
280 107 lineto
384 363 lineto
392 381 396 395 396 405  curveto
396 409 394 413 392 416  curveto
388 421 383 424 378 426  curveto
372 428 361 429 344 429  curveto
344 447 lineto
490 447 lineto
490 429 lineto
473 427 462 424 455 418  curveto
444 409 433 392 424 370  curveto
266 -13 lineto
246 -13 lineto
86 363 lineto
79 381 72 393 65 401  curveto
59 409 51 415 41 420  curveto
35 423 24 426 8 429  curveto
8 447 lineto
closepath
fill
		} def

	/w
		{
6 447 moveto
193 447 lineto
193 429 lineto
176 427 165 424 159 419  curveto
154 415 151 408 151 398  curveto
151 388 154 376 160 362  curveto
255 104 lineto
352 314 lineto
326 380 lineto
318 399 308 413 295 420  curveto
288 425 275 428 255 429  curveto
255 447 lineto
468 447 lineto
468 429 lineto
445 428 428 423 418 416  curveto
412 411 409 402 409 391  curveto
409 385 410 378 413 371  curveto
514 114 lineto
608 362 lineto
615 379 618 393 618 404  curveto
618 410 615 416 609 420  curveto
602 425 590 428 571 429  curveto
571 447 lineto
712 447 lineto
712 429 lineto
684 424 663 405 650 371  curveto
500 -13 lineto
480 -13 lineto
369 271 lineto
238 -13 lineto
220 -13 lineto
77 362 lineto
67 386 58 402 49 410  curveto
40 418 25 424 6 429  curveto
6 447 lineto
closepath
fill
		} def

	/x
		{
13 447 moveto
223 447 lineto
223 429 lineto
210 429 200 426 195 422  curveto
190 417 187 411 187 404  curveto
187 396 193 384 204 368  curveto
208 362 213 354 220 343  curveto
252 292 lineto
289 343 lineto
312 375 324 396 324 404  curveto
324 411 321 417 315 422  curveto
310 426 301 429 289 429  curveto
289 447 lineto
440 447 lineto
440 429 lineto
424 428 410 423 398 416  curveto
382 404 361 380 333 343  curveto
272 262 lineto
383 102 lineto
411 62 430 38 442 31  curveto
454 23 469 18 487 17  curveto
487 0 lineto
276 0 lineto
276 17 lineto
291 17 302 20 311 27  curveto
317 31 320 37 320 45  curveto
320 52 309 71 289 102  curveto
223 197 lineto
151 102 lineto
129 72 118 54 118 49  curveto
118 41 122 34 129 28  curveto
136 21 147 18 162 17  curveto
162 0 lineto
16 0 lineto
16 17 lineto
28 19 38 23 47 29  curveto
59 39 80 63 109 102  curveto
203 226 lineto
118 349 lineto
94 384 75 406 62 415  curveto
49 424 33 429 13 429  curveto
13 447 lineto
closepath
fill
		} def

	/y
		{
5 447 moveto
214 447 lineto
214 429 lineto
204 429 lineto
189 429 178 426 171 419  curveto
163 413 160 405 160 396  curveto
160 383 165 365 176 343  curveto
285 117 lineto
385 364 lineto
390 378 393 391 393 404  curveto
393 410 392 414 390 417  curveto
387 421 383 423 377 426  curveto
372 428 362 429 348 429  curveto
348 447 lineto
494 447 lineto
494 429 lineto
482 427 472 425 466 421  curveto
459 417 452 410 444 399  curveto
441 394 436 382 428 361  curveto
246 -84 lineto
228 -127 205 -160 177 -182  curveto
148 -204 121 -215 94 -215  curveto
75 -215 59 -210 47 -199  curveto
34 -188 28 -175 28 -161  curveto
28 -147 33 -136 42 -128  curveto
51 -119 63 -115 79 -115  curveto
89 -115 104 -119 123 -126  curveto
136 -131 144 -133 147 -133  curveto
157 -133 167 -128 179 -118  curveto
191 -108 202 -89 214 -60  curveto
246 17 lineto
85 354 lineto
80 365 72 377 62 392  curveto
53 403 47 411 42 415  curveto
34 420 22 425 5 429  curveto
5 447 lineto
closepath
fill
		} def

	/z
		{
419 137 moveto
414 0 lineto
20 0 lineto
20 17 lineto
316 413 lineto
170 413 lineto
138 413 118 411 108 406  curveto
98 402 90 395 84 383  curveto
75 367 70 347 69 323  curveto
49 323 lineto
52 447 lineto
427 447 lineto
427 429 lineto
127 32 lineto
291 32 lineto
325 32 348 35 360 41  curveto
372 46 382 56 390 71  curveto
395 81 399 103 403 137  curveto
419 137 lineto
closepath
fill
		} def

	/braceleft
		{
410 -198 moveto
410 -215 lineto
356 -208 312 -186 278 -149  curveto
244 -113 227 -72 227 -27  curveto
227 -4 230 22 238 53  curveto
245 85 249 109 249 126  curveto
249 149 239 171 219 192  curveto
200 212 173 224 138 229  curveto
138 249 lineto
173 254 200 266 219 286  curveto
239 306 249 328 249 352  curveto
249 369 245 393 238 424  curveto
230 455 227 483 227 506  curveto
227 551 244 591 278 628  curveto
312 665 356 687 410 694  curveto
410 677 lineto
372 668 344 653 326 632  curveto
309 611 300 589 300 564  curveto
300 545 303 519 311 488  curveto
318 457 322 430 322 408  curveto
322 375 310 343 286 312  curveto
262 281 226 257 178 240  curveto
225 223 260 199 285 167  curveto
309 135 322 103 322 70  curveto
322 48 318 21 311 -9  curveto
303 -40 300 -66 300 -85  curveto
300 -110 309 -132 326 -153  curveto
344 -174 372 -189 410 -198  curveto
closepath
fill
		} def

	/bar
		{
119 694 moveto
119 -215 lineto
78 -215 lineto
78 694 lineto
119 694 lineto
closepath
fill
		} def

	/braceright
		{
86 677 moveto
86 694 lineto
140 687 184 665 218 628  curveto
253 592 270 551 270 506  curveto
270 482 266 455 258 424  curveto
251 393 247 369 247 352  curveto
247 329 257 307 277 286  curveto
296 266 324 254 358 249  curveto
358 229 lineto
324 224 296 212 277 192  curveto
257 171 247 149 247 126  curveto
247 109 251 85 258 53  curveto
266 22 270 -4 270 -27  curveto
270 -72 253 -112 218 -149  curveto
184 -186 140 -208 86 -215  curveto
86 -198 lineto
124 -189 152 -174 170 -153  curveto
187 -133 196 -110 196 -85  curveto
196 -66 193 -40 185 -9  curveto
178 21 174 48 174 70  curveto
174 103 186 135 210 166  curveto
234 197 271 221 318 238  curveto
271 255 236 279 211 311  curveto
186 343 174 375 174 408  curveto
174 430 178 457 185 488  curveto
193 519 196 545 196 564  curveto
196 589 187 611 170 632  curveto
152 653 124 668 86 677  curveto
closepath
fill
		} def

	/asciitilde
		{
508 329 moveto
530 329 lineto
529 287 517 254 494 230  curveto
471 206 444 194 411 194  curveto
396 194 380 196 362 201  curveto
345 206 300 224 229 253  curveto
178 274 143 284 122 284  curveto
99 284 80 277 64 263  curveto
48 249 37 226 31 195  curveto
9 195 lineto
11 239 23 272 45 296  curveto
68 319 94 331 124 331  curveto
138 331 153 328 167 324  curveto
201 314 246 297 301 274  curveto
356 250 395 238 417 238  curveto
442 238 462 246 479 262  curveto
496 277 505 300 508 329  curveto
closepath
fill
		} def

	/exclamdown
		{
167 475 moveto
182 475 195 470 205 459  curveto
215 449 221 436 221 421  curveto
221 406 215 393 205 383  curveto
194 372 181 367 167 367  curveto
152 367 139 372 128 383  curveto
118 393 113 406 113 421  curveto
113 436 118 449 128 459  curveto
139 470 152 475 167 475  curveto
closepath
157 286 moveto
175 286 lineto
219 -108 lineto
220 -126 221 -139 221 -147  curveto
221 -167 216 -184 205 -197  curveto
194 -209 181 -215 166 -215  curveto
151 -215 138 -209 127 -197  curveto
116 -184 111 -166 111 -141  curveto
111 -133 112 -122 113 -108  curveto
157 286 lineto
closepath
fill
		} def

	/cent
		{
439 170 moveto
424 109 397 61 359 27  curveto
330 1 294 -11 251 -11  curveto
225 -11 199 -6 172 5  curveto
103 -185 lineto
69 -185 lineto
145 23 lineto
118 48 99 73 87 98  curveto
71 134 62 175 62 220  curveto
62 303 88 366 139 411  curveto
178 445 223 462 272 462  curveto
279 462 289 461 302 460  curveto
371 647 lineto
406 647 lineto
335 451 lineto
368 436 390 422 402 408  curveto
418 391 426 372 426 352  curveto
426 339 422 329 414 322  curveto
406 314 395 311 380 311  curveto
362 311 348 317 338 329  curveto
332 336 328 350 325 369  curveto
324 379 321 390 317 401  curveto
206 93 lineto
224 80 239 72 251 68  curveto
261 65 272 63 285 63  curveto
305 63 324 67 342 75  curveto
361 84 374 93 384 105  curveto
393 116 407 140 424 176  curveto
439 170 lineto
closepath
180 122 moveto
289 422 lineto
280 426 270 428 260 428  curveto
227 428 200 416 181 392  curveto
154 359 141 315 141 261  curveto
141 236 143 214 149 193  curveto
155 173 165 149 180 122  curveto
closepath
fill
		} def

	/sterling
		{
353 321 moveto
227 321 lineto
227 306 227 295 227 288  curveto
227 257 225 229 220 203  curveto
216 177 208 147 197 113  curveto
261 93 297 82 306 80  curveto
323 76 340 74 356 74  curveto
383 74 405 80 422 93  curveto
439 105 451 125 459 152  curveto
477 147 lineto
470 95 453 55 426 28  curveto
399 1 369 -11 336 -11  curveto
314 -11 294 -7 276 0  curveto
258 8 225 30 177 66  curveto
164 40 150 20 135 7  curveto
120 -5 104 -11 86 -11  curveto
70 -11 57 -6 46 5  curveto
35 16 29 31 29 51  curveto
29 73 37 91 52 105  curveto
67 120 86 127 109 127  curveto
115 127 121 127 128 126  curveto
135 125 142 124 151 123  curveto
152 132 152 139 152 145  curveto
152 151 152 156 152 161  curveto
152 189 149 243 142 321  curveto
47 321 lineto
47 368 lineto
142 368 lineto
138 416 136 449 136 465  curveto
136 505 144 541 160 574  curveto
176 607 198 632 226 649  curveto
254 667 284 675 316 675  curveto
357 675 388 664 409 642  curveto
430 620 440 598 440 576  curveto
440 565 436 556 428 548  curveto
420 540 411 536 402 536  curveto
389 536 379 542 371 554  curveto
368 560 365 573 364 592  curveto
362 611 357 626 347 635  curveto
337 644 323 648 305 648  curveto
279 648 258 638 241 618  curveto
224 598 216 562 216 512  curveto
216 488 218 458 222 420  curveto
224 396 226 378 227 368  curveto
353 368 lineto
353 321 lineto
closepath
145 83 moveto
138 88 131 91 124 94  curveto
117 96 110 97 104 97  curveto
89 97 77 93 69 85  curveto
61 77 57 67 57 54  curveto
57 42 60 33 67 26  curveto
73 20 80 16 89 16  curveto
100 16 110 21 120 31  curveto
131 41 139 59 145 83  curveto
closepath
fill
		} def

	/fraction
		{
333 675 moveto
-123 -26 lineto
-166 -26 lineto
290 675 lineto
333 675 lineto
closepath
fill
		} def

	/yen
		{
291 207 moveto
499 207 lineto
499 171 lineto
291 171 lineto
291 119 lineto
291 82 293 59 296 49  curveto
299 42 305 35 313 30  curveto
325 23 339 20 354 20  curveto
375 20 lineto
375 0 lineto
123 0 lineto
123 20 lineto
139 20 lineto
161 20 178 24 189 32  curveto
197 38 203 48 206 60  curveto
207 66 208 86 208 119  curveto
208 171 lineto
0 171 lineto
0 207 lineto
208 207 lineto
208 277 lineto
200 295 lineto
0 295 lineto
0 331 lineto
185 331 lineto
81 573 lineto
69 601 57 620 45 629  curveto
34 638 19 643 0 643  curveto
0 662 lineto
216 662 lineto
216 643 lineto
193 641 177 638 169 632  curveto
161 626 157 620 157 613  curveto
157 608 160 598 166 584  curveto
271 331 lineto
375 577 lineto
381 593 385 605 385 613  curveto
385 620 381 627 375 633  curveto
370 638 360 640 343 642  curveto
340 642 336 642 330 643  curveto
330 662 lineto
499 662 lineto
499 643 lineto
479 643 465 639 457 632  curveto
443 620 429 599 415 567  curveto
310 331 lineto
499 331 lineto
499 295 lineto
294 295 lineto
291 287 lineto
291 207 lineto
closepath
fill
		} def

	/florin
		{
335 427 moveto
422 427 lineto
414 395 lineto
329 395 lineto
312 307 284 192 245 49  curveto
214 -61 181 -134 145 -169  curveto
117 -196 89 -210 60 -210  curveto
42 -210 27 -205 17 -195  curveto
6 -185 0 -173 0 -159  curveto
0 -146 4 -136 12 -127  curveto
20 -119 28 -115 38 -115  curveto
47 -115 54 -118 60 -124  curveto
67 -130 70 -136 70 -143  curveto
70 -150 68 -156 63 -161  curveto
60 -165 58 -168 58 -170  curveto
58 -173 59 -175 62 -177  curveto
64 -180 67 -181 70 -181  curveto
77 -181 83 -179 88 -176  curveto
98 -170 108 -160 117 -145  curveto
127 -129 136 -100 146 -58  curveto
148 -51 162 16 188 144  curveto
191 155 211 239 249 395  curveto
162 395 lineto
169 427 lineto
202 429 222 432 230 434  curveto
239 437 245 442 251 450  curveto
259 461 269 483 280 515  curveto
304 584 327 628 349 648  curveto
370 667 394 677 420 677  curveto
441 677 457 671 469 661  curveto
481 650 487 637 487 622  curveto
487 611 484 602 478 595  curveto
471 588 463 584 454 584  curveto
446 584 438 587 432 593  curveto
426 599 423 605 423 612  curveto
423 617 425 623 429 629  curveto
432 635 434 639 434 642  curveto
434 645 433 648 430 651  curveto
427 653 423 654 417 654  curveto
407 654 397 650 389 643  curveto
377 632 370 618 366 602  curveto
357 562 347 504 335 427  curveto
closepath
fill
		} def

	/section
		{
184 411 moveto
162 435 146 457 137 477  curveto
128 497 123 517 123 538  curveto
123 576 136 608 163 635  curveto
190 662 223 675 262 675  curveto
298 675 327 664 350 643  curveto
374 621 385 596 385 568  curveto
385 555 381 544 373 534  curveto
366 527 358 524 347 524  curveto
336 524 326 528 319 535  curveto
312 543 309 551 309 562  curveto
309 566 310 575 312 587  curveto
314 595 315 602 315 608  curveto
315 622 310 633 301 642  curveto
291 650 278 655 262 655  curveto
238 655 218 646 201 630  curveto
185 613 177 593 177 569  curveto
177 548 181 531 190 518  curveto
205 495 229 471 264 446  curveto
329 399 374 356 398 319  curveto
415 292 423 264 423 235  curveto
423 205 415 176 397 146  curveto
380 116 353 90 315 68  curveto
338 43 354 21 363 3  curveto
371 -14 375 -34 375 -55  curveto
375 -95 362 -128 335 -155  curveto
309 -181 276 -195 237 -195  curveto
202 -195 172 -184 149 -161  curveto
126 -139 114 -114 114 -85  curveto
114 -73 118 -63 126 -54  curveto
133 -46 142 -42 152 -42  curveto
162 -42 171 -46 178 -53  curveto
185 -61 189 -71 189 -84  curveto
189 -93 188 -103 185 -114  curveto
182 -124 181 -132 181 -138  curveto
181 -147 185 -155 193 -161  curveto
206 -171 222 -176 240 -176  curveto
262 -176 281 -167 299 -150  curveto
317 -133 326 -115 326 -95  curveto
326 -75 321 -57 311 -41  curveto
295 -17 267 10 226 41  curveto
164 87 123 127 101 162  curveto
84 188 76 216 76 246  curveto
76 276 84 305 102 334  curveto
120 363 147 389 184 411  curveto
closepath
199 396 moveto
150 366 125 330 125 288  curveto
125 265 132 244 144 225  curveto
160 198 193 167 240 131  curveto
263 114 282 98 299 82  curveto
349 112 374 148 374 189  curveto
374 211 367 233 353 256  curveto
338 279 309 307 264 342  curveto
237 363 216 381 199 396  curveto
closepath
fill
		} def

	/currency
		{
387 497 moveto
457 566 lineto
485 539 lineto
415 470 lineto
449 427 465 381 465 333  curveto
465 282 449 236 415 194  curveto
485 123 lineto
457 96 lineto
387 166 lineto
344 132 300 116 255 116  curveto
227 116 199 121 172 131  curveto
144 141 124 152 111 166  curveto
40 96 lineto
13 123 lineto
83 194 lineto
50 232 33 278 33 332  curveto
33 383 50 429 83 470  curveto
13 539 lineto
40 566 lineto
111 497 lineto
128 512 150 524 176 533  curveto
202 542 227 547 250 547  curveto
273 547 297 543 322 534  curveto
346 526 368 513 387 497  curveto
closepath
250 507 moveto
200 507 159 490 124 455  curveto
90 421 73 379 73 330  curveto
73 282 90 241 125 207  curveto
159 172 201 155 249 155  curveto
298 155 339 172 374 207  curveto
409 242 426 283 426 331  curveto
426 361 418 390 402 418  curveto
386 447 364 469 336 484  curveto
308 500 279 507 250 507  curveto
closepath
fill
		} def

	/quotesingle
		{
77 392 moveto
50 536 lineto
43 576 39 603 39 617  curveto
39 638 43 653 52 663  curveto
60 672 72 677 86 677  curveto
101 677 113 672 123 662  curveto
132 653 137 640 137 625  curveto
137 612 133 583 125 536  curveto
98 392 lineto
77 392 lineto
closepath
fill
		} def

	/quotedblleft
		{
159 677 moveto
159 657 lineto
130 642 110 626 97 610  curveto
85 594 79 576 79 557  curveto
79 545 80 537 83 533  curveto
86 529 90 526 94 526  curveto
98 526 104 528 111 530  curveto
118 532 125 534 131 534  curveto
144 534 156 529 166 519  curveto
176 509 181 497 181 482  curveto
181 467 175 453 163 442  curveto
151 431 136 425 118 425  curveto
96 425 76 435 59 454  curveto
41 472 32 496 32 523  curveto
32 556 43 586 65 614  curveto
86 643 118 663 159 677  curveto
closepath
392 675 moveto
392 657 lineto
359 638 337 621 327 606  curveto
316 591 311 573 311 553  curveto
311 544 313 537 316 533  curveto
320 528 324 526 328 526  curveto
331 526 337 527 344 530  curveto
351 532 358 534 365 534  curveto
379 534 390 529 400 519  curveto
410 510 415 498 415 484  curveto
415 468 409 454 396 442  curveto
384 431 368 425 350 425  curveto
329 425 309 434 292 453  curveto
275 471 266 494 266 522  curveto
266 556 277 587 299 615  curveto
321 644 352 664 392 675  curveto
closepath
fill
		} def

	/guillemotleft
		{
248 -3 moveto
220 -3 lineto
31 226 lineto
220 456 lineto
248 456 lineto
128 226 lineto
248 -3 lineto
closepath
468 -3 moveto
440 -3 lineto
248 226 lineto
440 456 lineto
468 456 lineto
350 226 lineto
468 -3 lineto
closepath
fill
		} def

	/guilsinglleft
		{
274 -3 moveto
247 -3 lineto
58 226 lineto
247 456 lineto
274 456 lineto
155 226 lineto
274 -3 lineto
closepath
fill
		} def

	/guilsinglright
		{
56 456 moveto
84 456 lineto
276 225 lineto
84 -3 lineto
56 -3 lineto
174 225 lineto
56 456 lineto
closepath
fill
		} def

	/fi
		{
179 447 moveto
366 447 lineto
402 447 426 448 437 450  curveto
458 450 lineto
458 103 lineto
458 67 462 44 471 33  curveto
480 23 499 18 529 17  curveto
529 0 lineto
307 0 lineto
307 17 lineto
339 17 359 24 368 38  curveto
375 48 378 69 378 103  curveto
378 340 lineto
378 370 376 388 373 395  curveto
370 399 365 403 358 406  curveto
351 409 327 410 288 410  curveto
179 410 lineto
179 119 lineto
179 84 181 61 185 51  curveto
187 43 194 36 203 31  curveto
217 22 229 17 240 17  curveto
260 17 lineto
260 0 lineto
16 0 lineto
16 17 lineto
34 17 lineto
56 17 73 23 83 36  curveto
93 48 98 76 98 119  curveto
98 410 lineto
12 410 lineto
12 447 lineto
98 447 lineto
98 506 106 553 123 586  curveto
139 620 164 646 196 665  curveto
228 684 264 694 305 694  curveto
333 694 359 689 381 680  curveto
404 671 421 659 432 644  curveto
443 630 448 616 448 604  curveto
448 592 445 583 437 576  curveto
430 568 421 564 411 564  curveto
400 564 391 567 383 573  curveto
375 579 362 595 343 621  curveto
333 636 321 647 309 654  curveto
300 659 289 662 275 662  curveto
258 662 242 655 225 642  curveto
209 628 198 613 191 596  curveto
183 572 179 531 179 473  curveto
179 447 lineto
closepath
fill
		} def

	/fl
		{
379 410 moveto
178 410 lineto
178 120 lineto
178 85 181 62 186 51  curveto
190 40 198 32 210 25  curveto
221 19 238 16 261 17  curveto
261 0 lineto
16 0 lineto
16 17 lineto
35 17 lineto
54 17 69 22 80 33  curveto
91 43 97 71 97 117  curveto
97 410 lineto
11 410 lineto
11 447 lineto
97 447 lineto
99 512 107 560 121 592  curveto
135 623 156 647 186 666  curveto
215 685 244 694 273 694  curveto
307 694 339 682 371 658  curveto
440 694 lineto
459 694 lineto
459 103 lineto
459 74 461 55 465 46  curveto
468 37 474 30 484 25  curveto
493 20 508 17 530 17  curveto
530 0 lineto
308 0 lineto
308 17 lineto
330 17 346 21 357 27  curveto
364 30 369 36 373 45  curveto
377 54 379 73 379 103  curveto
379 410 lineto
closepath
379 447 moveto
379 592 lineto
368 580 357 574 345 574  curveto
330 574 313 588 294 615  curveto
276 643 257 657 238 657  curveto
227 657 217 653 210 647  curveto
198 637 189 623 184 605  curveto
180 591 178 553 178 491  curveto
178 447 lineto
379 447 lineto
closepath
fill
		} def

	/endash
		{
40 261 moveto
292 261 lineto
292 187 lineto
40 187 lineto
40 261 lineto
closepath
fill
		} def

	/dagger
		{
255 -205 moveto
237 -205 lineto
236 -63 231 50 222 137  curveto
215 201 204 263 188 321  curveto
205 336 216 351 224 367  curveto
231 383 235 406 237 437  curveto
216 435 195 429 173 420  curveto
139 406 114 398 98 398  curveto
83 398 72 403 62 412  curveto
53 420 49 431 49 445  curveto
49 458 54 470 63 479  curveto
73 489 85 493 99 493  curveto
107 493 115 492 122 490  curveto
125 489 142 482 173 469  curveto
192 460 214 455 237 454  curveto
237 467 236 478 234 484  curveto
232 494 227 508 219 526  curveto
202 568 193 600 193 621  curveto
193 640 198 655 209 667  curveto
220 679 233 685 248 685  curveto
261 685 274 678 284 666  curveto
295 654 301 639 301 621  curveto
301 611 299 602 297 592  curveto
294 579 286 559 275 531  curveto
263 502 257 477 255 454  curveto
278 456 300 461 320 469  curveto
352 481 371 488 376 490  curveto
383 492 390 493 398 493  curveto
414 493 426 488 436 479  curveto
445 470 450 458 450 445  curveto
450 432 445 421 436 412  curveto
426 402 414 398 400 398  curveto
382 398 355 406 319 421  curveto
304 427 292 431 286 433  curveto
279 435 269 436 255 437  curveto
257 406 261 383 269 366  curveto
276 350 288 335 304 321  curveto
289 262 278 203 271 144  curveto
265 85 260 -31 255 -205  curveto
closepath
fill
		} def

	/daggerdbl
		{
258 476 moveto
261 455 265 439 271 428  curveto
277 418 288 406 304 393  curveto
288 369 276 346 269 323  curveto
262 300 258 271 258 236  curveto
258 203 262 176 269 154  curveto
275 131 287 108 304 83  curveto
289 69 278 57 272 47  curveto
266 36 261 20 258 0  curveto
271 1 280 3 286 5  curveto
292 7 303 11 321 18  curveto
348 29 370 35 386 35  curveto
400 35 410 31 419 23  curveto
427 15 432 5 432 -7  curveto
432 -20 427 -31 419 -39  curveto
410 -48 400 -52 387 -52  curveto
373 -52 353 -46 325 -34  curveto
310 -28 298 -23 289 -21  curveto
282 -19 272 -18 258 -18  curveto
261 -37 263 -51 265 -57  curveto
266 -63 270 -72 275 -84  curveto
291 -120 299 -146 299 -164  curveto
299 -179 295 -191 285 -201  curveto
276 -210 264 -215 250 -215  curveto
236 -215 225 -210 215 -200  curveto
206 -190 201 -178 201 -163  curveto
201 -155 202 -147 204 -138  curveto
206 -130 213 -111 224 -83  curveto
231 -61 236 -40 239 -18  curveto
224 -18 213 -20 204 -21  curveto
196 -23 184 -28 168 -35  curveto
143 -46 125 -52 113 -52  curveto
99 -52 89 -48 81 -40  curveto
72 -32 68 -21 68 -9  curveto
68 4 73 14 81 23  curveto
90 31 101 35 115 35  curveto
128 35 147 30 170 20  curveto
186 13 199 8 208 6  curveto
214 5 225 4 239 3  curveto
236 23 231 38 225 48  curveto
219 58 208 70 192 83  curveto
207 102 218 122 224 141  curveto
234 171 239 204 239 242  curveto
239 280 234 313 224 342  curveto
217 359 207 376 192 393  curveto
208 405 218 416 224 427  curveto
230 437 235 454 239 476  curveto
225 475 216 474 210 472  curveto
205 471 190 466 168 457  curveto
145 448 126 443 110 443  curveto
98 443 88 447 80 456  curveto
71 464 67 474 67 486  curveto
67 498 71 508 79 516  curveto
87 524 97 528 110 528  curveto
125 528 146 523 174 512  curveto
190 505 203 500 211 499  curveto
217 497 226 496 239 495  curveto
238 509 237 519 235 525  curveto
231 538 224 559 213 588  curveto
206 606 202 615 202 618  curveto
200 624 200 631 200 640  curveto
200 656 204 669 214 679  curveto
223 689 235 694 249 694  curveto
263 694 274 689 283 680  curveto
292 670 296 656 296 638  curveto
296 628 295 619 294 613  curveto
292 606 286 592 276 569  curveto
266 546 260 521 258 495  curveto
273 496 283 497 289 498  curveto
295 500 308 504 326 512  curveto
351 523 371 528 388 528  curveto
401 528 411 524 419 516  curveto
428 508 432 498 432 486  curveto
432 473 427 463 419 455  curveto
410 446 399 442 386 442  curveto
370 442 350 448 324 458  curveto
308 466 296 471 290 472  curveto
283 474 273 475 258 476  curveto
closepath
fill
		} def

	/periodcentered
		{
125 385 moveto
140 385 153 379 163 369  curveto
173 358 179 346 179 331  curveto
179 316 173 303 163 292  curveto
152 282 139 276 125 276  curveto
110 276 97 282 86 292  curveto
76 303 70 316 70 331  curveto
70 346 76 358 86 369  curveto
97 379 110 385 125 385  curveto
closepath
fill
		} def

	/paragraph
		{
389 635 moveto
389 -215 lineto
354 -215 lineto
354 635 lineto
263 635 lineto
263 -215 lineto
227 -215 lineto
227 293 lineto
165 296 118 304 88 318  curveto
57 331 33 353 17 382  curveto
1 410 -6 443 -6 479  curveto
-6 514 0 544 14 566  curveto
33 598 58 621 89 637  curveto
121 654 162 662 212 662  curveto
454 662 lineto
454 635 lineto
389 635 lineto
closepath
fill
		} def

	/bullet
		{
177 453 moveto
211 453 239 441 263 417  curveto
287 393 299 364 299 330  curveto
299 296 287 267 263 243  curveto
239 219 211 208 177 208  curveto
143 208 114 219 90 243  curveto
66 267 54 296 54 330  curveto
54 364 66 393 90 417  curveto
114 441 143 453 177 453  curveto
closepath
fill
		} def

	/quotesinglbase
		{
94 -166 moveto
94 -145 lineto
127 -133 153 -116 171 -93  curveto
190 -70 199 -45 199 -19  curveto
199 -13 198 -8 195 -3  curveto
192 0 190 0 188 0  curveto
184 0 176 -2 164 -9  curveto
158 -12 152 -13 146 -13  curveto
130 -13 117 -8 108 0  curveto
98 9 94 22 94 39  curveto
94 55 100 69 112 80  curveto
124 91 139 97 156 97  curveto
178 97 197 88 214 69  curveto
231 50 239 26 239 -4  curveto
239 -38 227 -69 204 -98  curveto
181 -127 144 -149 94 -166  curveto
closepath
fill
		} def

	/quotedblbase
		{
56 -154 moveto
56 -133 lineto
89 -115 110 -98 120 -83  curveto
131 -68 136 -50 136 -30  curveto
136 -21 134 -14 131 -10  curveto
127 -5 123 -3 119 -3  curveto
116 -3 111 -4 104 -7  curveto
96 -9 89 -11 82 -11  curveto
68 -11 57 -6 47 3  curveto
37 13 32 25 32 39  curveto
32 54 38 68 51 80  curveto
64 91 79 97 97 97  curveto
118 97 138 88 155 69  curveto
172 51 181 27 181 0  curveto
181 -34 170 -65 148 -94  curveto
126 -122 95 -142 56 -154  curveto
closepath
289 -154 moveto
289 -133 lineto
317 -119 337 -103 350 -87  curveto
362 -70 369 -52 369 -33  curveto
369 -22 367 -14 364 -9  curveto
361 -5 357 -3 353 -3  curveto
349 -3 343 -4 336 -7  curveto
328 -9 322 -11 316 -11  curveto
303 -11 291 -6 281 3  curveto
272 14 267 26 267 40  curveto
267 55 273 69 285 80  curveto
297 91 312 97 329 97  curveto
351 97 371 88 389 69  curveto
406 50 415 26 415 0  curveto
415 -33 404 -63 383 -92  curveto
361 -120 330 -140 289 -154  curveto
closepath
fill
		} def

	/quotedblright
		{
56 426 moveto
56 446 lineto
89 465 110 481 120 497  curveto
131 512 136 529 136 549  curveto
136 558 134 565 131 570  curveto
127 574 123 576 119 576  curveto
116 576 111 575 104 573  curveto
96 570 89 569 82 569  curveto
68 569 57 573 47 583  curveto
37 593 32 605 32 619  curveto
32 635 38 648 51 660  curveto
64 672 79 678 97 678  curveto
118 678 138 668 155 650  curveto
172 631 181 608 181 579  curveto
181 545 170 514 148 486  curveto
126 457 95 437 56 426  curveto
closepath
289 426 moveto
289 446 lineto
317 461 337 476 350 493  curveto
362 509 369 527 369 546  curveto
369 558 367 566 364 570  curveto
361 574 357 576 353 576  curveto
349 576 343 575 336 573  curveto
328 570 322 569 316 569  curveto
303 569 291 574 281 584  curveto
272 594 267 606 267 620  curveto
267 636 273 649 285 660  curveto
297 672 312 678 329 678  curveto
351 678 371 668 389 649  curveto
406 630 415 607 415 579  curveto
415 546 404 516 383 488  curveto
361 460 330 439 289 426  curveto
closepath
fill
		} def

	/guillemotright
		{
251 456 moveto
279 456 lineto
468 225 lineto
279 -3 lineto
251 -3 lineto
371 225 lineto
251 456 lineto
closepath
31 456 moveto
59 456 lineto
251 225 lineto
59 -3 lineto
31 -3 lineto
149 225 lineto
31 456 lineto
closepath
fill
		} def

	/ellipsis
		{
166 94 moveto
181 94 194 89 205 78  curveto
215 68 220 55 220 40  curveto
220 25 215 12 204 2  curveto
194 -8 181 -13 166 -13  curveto
151 -13 138 -8 128 2  curveto
117 12 112 25 112 40  curveto
112 55 117 68 128 79  curveto
138 89 151 94 166 94  curveto
closepath
500 94 moveto
514 94 527 89 538 78  curveto
548 68 554 55 554 40  curveto
554 25 548 12 538 2  curveto
527 -8 514 -13 500 -13  curveto
485 -13 472 -8 461 2  curveto
451 12 445 25 445 40  curveto
445 55 451 68 461 79  curveto
472 89 485 94 500 94  curveto
closepath
833 94 moveto
848 94 861 89 871 78  curveto
882 68 887 55 887 40  curveto
887 25 882 12 871 2  curveto
861 -8 848 -13 833 -13  curveto
818 -13 805 -8 795 2  curveto
784 12 779 25 779 40  curveto
779 55 784 68 794 79  curveto
805 89 818 94 833 94  curveto
closepath
fill
		} def

	/perthousand
		{
595 677 moveto
121 -26 lineto
77 -26 lineto
552 677 lineto
595 677 lineto
closepath
172 677 moveto
197 677 221 669 243 655  curveto
265 640 282 619 295 591  curveto
307 563 313 532 313 498  curveto
313 443 300 400 272 368  curveto
244 337 212 321 174 321  curveto
150 321 126 328 104 343  curveto
81 357 63 378 51 405  curveto
38 433 31 464 31 499  curveto
31 532 38 564 50 592  curveto
63 621 80 642 102 656  curveto
124 670 147 677 172 677  curveto
closepath
170 651 moveto
160 651 152 648 146 643  curveto
135 634 126 619 121 601  curveto
113 576 110 541 110 496  curveto
110 436 118 394 133 370  curveto
144 354 157 346 173 346  curveto
188 346 201 354 211 371  curveto
227 396 235 440 235 502  curveto
235 561 228 602 212 625  curveto
201 642 187 651 170 651  curveto
closepath
502 328 moveto
525 328 548 321 570 306  curveto
592 292 610 271 623 243  curveto
636 215 642 184 642 152  curveto
642 116 636 85 623 58  curveto
610 30 593 9 570 -4  curveto
547 -19 524 -26 500 -26  curveto
464 -26 431 -10 403 20  curveto
374 52 360 95 360 150  curveto
360 184 366 215 379 244  curveto
392 272 410 293 433 307  curveto
456 321 479 328 502 328  curveto
closepath
500 302 moveto
490 302 481 299 474 293  curveto
462 284 453 269 447 248  curveto
441 228 438 194 438 146  curveto
438 87 445 47 460 23  curveto
471 7 484 0 500 0  curveto
515 0 529 8 540 24  curveto
555 48 563 90 563 147  curveto
563 209 555 252 539 277  curveto
529 294 516 302 500 302  curveto
closepath
825 328 moveto
847 328 870 321 894 307  curveto
917 293 935 272 948 245  curveto
961 218 967 189 967 156  curveto
967 116 961 83 949 57  curveto
937 30 920 10 897 -4  curveto
873 -19 850 -26 826 -26  curveto
802 -26 779 -19 757 -5  curveto
735 9 717 30 705 56  curveto
692 83 686 113 686 146  curveto
686 185 692 218 705 246  curveto
717 274 735 294 759 308  curveto
783 321 805 328 825 328  curveto
closepath
825 302 moveto
809 302 796 295 786 279  curveto
771 256 764 212 764 148  curveto
764 88 772 47 787 24  curveto
797 8 811 0 827 0  curveto
837 0 846 3 853 9  curveto
864 18 873 34 879 55  curveto
885 76 889 111 889 160  curveto
889 215 881 255 866 277  curveto
854 294 841 302 825 302  curveto
closepath
fill
		} def

	/questiondown
		{
220 476 moveto
235 476 248 470 259 460  curveto
269 449 274 436 274 421  curveto
274 406 269 394 259 383  curveto
248 372 235 367 220 367  curveto
205 367 192 372 182 383  curveto
171 394 166 406 166 421  curveto
166 436 171 449 182 460  curveto
192 470 205 476 220 476  curveto
closepath
215 305 moveto
234 305 lineto
232 265 228 233 222 209  curveto
216 186 199 145 172 89  curveto
145 32 132 -14 132 -51  curveto
132 -94 143 -127 164 -151  curveto
186 -174 213 -186 247 -186  curveto
275 -186 298 -179 314 -166  curveto
330 -153 338 -138 338 -122  curveto
338 -112 333 -98 323 -81  curveto
313 -63 308 -49 308 -39  curveto
308 -28 312 -19 320 -11  curveto
328 -3 337 0 348 0  curveto
361 0 373 -6 385 -20  curveto
396 -33 402 -51 402 -74  curveto
402 -111 386 -144 354 -173  curveto
322 -201 279 -215 224 -215  curveto
169 -215 125 -200 92 -170  curveto
59 -139 43 -103 43 -61  curveto
43 -34 48 -9 57 13  curveto
71 45 96 81 130 121  curveto
165 161 187 192 197 214  curveto
207 236 213 267 215 305  curveto
closepath
fill
		} def

	/grave
		{
57 678 moveto
166 678 lineto
218 510 lineto
201 510 lineto
57 678 lineto
closepath
fill
		} def

	/acute
		{
275 678 moveto
131 510 lineto
115 510 lineto
166 678 lineto
275 678 lineto
closepath
fill
		} def

	/circumflex
		{
121 676 moveto
211 676 lineto
304 514 lineto
289 514 lineto
155 618 lineto
43 514 lineto
29 514 lineto
121 676 lineto
closepath
fill
		} def

	/tilde
		{
26 535 moveto
10 535 lineto
12 580 21 612 38 632  curveto
55 652 77 662 102 662  curveto
115 662 128 659 139 655  curveto
153 650 174 638 201 620  curveto
228 603 248 594 261 594  curveto
271 594 280 598 288 607  curveto
296 616 303 634 307 662  curveto
322 662 lineto
323 631 319 607 310 590  curveto
302 572 290 558 275 548  curveto
260 538 245 533 229 533  curveto
204 533 172 546 134 572  curveto
113 586 99 595 92 598  curveto
85 601 78 602 71 602  curveto
58 602 47 596 40 584  curveto
36 579 31 562 26 535  curveto
closepath
fill
		} def

	/macron
		{
508 713 moveto
-8 713 lineto
-8 754 lineto
508 754 lineto
508 713 lineto
closepath
fill
		} def

	/breve
		{
26 663 moveto
42 663 lineto
52 643 65 629 79 621  curveto
102 607 132 600 167 600  curveto
202 600 232 606 255 620  curveto
271 630 283 644 290 663  curveto
306 663 lineto
303 622 288 589 261 564  curveto
234 539 202 526 166 526  curveto
130 526 98 538 72 564  curveto
45 589 30 622 26 663  curveto
closepath
fill
		} def

	/dotaccent
		{
167 652 moveto
181 652 194 647 204 637  curveto
215 626 220 614 220 599  curveto
220 584 215 572 204 562  curveto
194 551 181 546 167 546  curveto
152 546 139 551 129 562  curveto
118 572 113 584 113 599  curveto
113 614 118 626 129 637  curveto
139 647 152 652 167 652  curveto
closepath
fill
		} def

	/dieresis
		{
252 652 moveto
267 652 280 647 290 637  curveto
300 626 305 614 305 599  curveto
305 584 300 572 290 562  curveto
280 552 267 546 252 546  curveto
238 546 225 552 215 562  curveto
204 572 199 584 199 599  curveto
199 614 204 626 215 637  curveto
225 647 238 652 252 652  curveto
closepath
80 652 moveto
95 652 108 647 118 637  curveto
128 626 133 614 133 599  curveto
133 584 128 572 118 562  curveto
107 552 95 546 81 546  curveto
66 546 53 552 43 562  curveto
33 572 27 584 27 599  curveto
27 614 32 626 43 637  curveto
53 647 65 652 80 652  curveto
closepath
fill
		} def

	/ring
		{
166 695 moveto
192 695 214 686 232 667  curveto
251 649 260 627 260 602  curveto
260 576 251 553 232 535  curveto
214 517 192 508 166 508  curveto
140 508 118 517 100 535  curveto
82 553 73 576 73 602  curveto
73 627 82 649 100 667  curveto
118 686 140 695 166 695  curveto
closepath
166 661 moveto
149 661 135 655 124 644  curveto
112 632 106 618 106 602  curveto
106 585 112 571 124 560  curveto
135 548 149 542 166 542  curveto
183 542 197 548 208 560  curveto
220 571 226 585 226 602  curveto
226 618 220 632 208 644  curveto
197 655 183 661 166 661  curveto
closepath
fill
		} def

	/cedilla
		{
176 7 moveto
205 7 lineto
181 -30 lineto
201 -35 216 -44 227 -57  curveto
237 -69 242 -84 242 -102  curveto
242 -125 232 -146 212 -163  curveto
193 -181 168 -190 137 -190  curveto
125 -190 109 -189 91 -187  curveto
91 -166 lineto
100 -167 108 -167 114 -167  curveto
131 -167 145 -162 156 -151  curveto
168 -140 173 -128 173 -114  curveto
173 -104 170 -96 162 -88  curveto
155 -81 145 -78 134 -78  curveto
131 -78 127 -78 122 -79  curveto
176 7 lineto
closepath
fill
		} def

	/hungarumlaut
		{
138 0 moveto
138 625 lineto
638 625 lineto
638 0 lineto
138 0 lineto
closepath
154 15 moveto
623 15 lineto
623 609 lineto
154 609 lineto
154 15 lineto
closepath
fill
		} def

	/ogonek
		{
111 7 moveto
136 7 lineto
128 -9 124 -25 124 -40  curveto
124 -67 132 -89 149 -104  curveto
171 -125 198 -135 228 -135  curveto
247 -135 266 -132 286 -124  curveto
296 -140 lineto
268 -156 246 -166 232 -170  curveto
218 -175 201 -177 184 -177  curveto
148 -177 121 -168 101 -150  curveto
82 -133 72 -112 72 -87  curveto
72 -70 75 -52 82 -35  curveto
89 -17 99 -3 111 7  curveto
closepath
fill
		} def

	/caron
		{
211 514 moveto
122 514 lineto
29 676 lineto
44 676 lineto
177 572 lineto
289 676 lineto
304 676 lineto
211 514 lineto
closepath
fill
		} def

	/emdash
		{
40 261 moveto
292 261 lineto
292 187 lineto
40 187 lineto
40 261 lineto
closepath
fill
		} def

	/AE
		{
501 625 moveto
501 364 lineto
626 364 lineto
664 364 690 371 706 385  curveto
721 399 730 424 732 460  curveto
750 460 lineto
750 230 lineto
732 230 lineto
729 263 723 284 717 296  curveto
710 307 699 316 683 323  curveto
676 326 657 328 626 328  curveto
501 328 lineto
501 109 lineto
501 79 502 62 504 56  curveto
507 50 511 45 519 42  curveto
526 38 539 36 557 36  curveto
646 36 lineto
681 36 709 39 728 44  curveto
747 50 766 62 784 79  curveto
807 101 827 130 842 166  curveto
861 166 lineto
808 0 lineto
311 0 lineto
311 18 lineto
336 18 lineto
363 18 383 26 396 42  curveto
403 52 407 77 407 116  curveto
407 256 lineto
214 256 lineto
153 142 lineto
131 99 119 71 119 58  curveto
119 48 124 40 134 32  curveto
144 25 165 20 196 18  curveto
196 0 lineto
-11 0 lineto
-11 18 lineto
2 18 14 21 25 27  curveto
35 33 46 43 58 59  curveto
70 74 85 99 104 133  curveto
305 510 lineto
330 556 343 588 343 604  curveto
343 614 338 623 330 628  curveto
319 637 295 642 258 644  curveto
258 662 lineto
801 662 lineto
808 516 lineto
792 516 lineto
787 550 779 575 767 593  curveto
758 605 746 615 729 621  curveto
720 624 697 625 663 625  curveto
501 625 lineto
closepath
407 625 moveto
233 292 lineto
407 292 lineto
407 625 lineto
closepath
fill
		} def

	/ordfeminine
		{
166 576 moveto
166 611 161 634 153 645  curveto
144 656 131 662 114 662  curveto
98 662 87 658 79 651  curveto
72 644 68 633 68 618  curveto
68 604 65 593 60 586  curveto
54 579 48 576 40 576  curveto
32 576 26 579 20 584  curveto
15 590 12 597 12 605  curveto
12 623 21 639 40 654  curveto
58 668 87 675 126 675  curveto
156 675 179 670 196 660  curveto
212 650 222 640 226 629  curveto
231 618 233 600 233 576  curveto
233 469 lineto
233 452 233 442 234 439  curveto
235 435 237 432 239 430  curveto
242 428 244 427 246 427  curveto
250 427 260 432 274 441  curveto
274 418 lineto
250 401 234 390 226 387  curveto
218 384 210 382 201 382  curveto
193 382 186 385 179 392  curveto
173 399 168 411 166 428  curveto
145 414 126 402 108 395  curveto
91 388 75 384 61 384  curveto
43 384 28 390 16 402  curveto
3 415 -2 429 -2 444  curveto
-2 459 0 471 7 482  curveto
17 497 35 512 60 527  curveto
76 537 112 554 166 576  curveto
closepath
166 557 moveto
126 544 100 530 86 514  curveto
72 499 64 483 64 467  curveto
64 456 69 446 77 438  curveto
85 430 96 425 108 425  curveto
115 425 123 427 133 431  curveto
143 434 153 440 166 447  curveto
166 557 lineto
closepath
fill
		} def

	/Lslash
		{
530 0 moveto
18 0 lineto
18 18 lineto
38 18 lineto
53 18 68 21 83 29  curveto
94 34 101 42 105 53  curveto
109 64 111 85 111 118  curveto
111 264 lineto
10 183 lineto
10 228 lineto
111 313 lineto
111 542 lineto
111 580 110 602 106 611  curveto
102 620 95 627 84 634  curveto
73 640 57 644 38 644  curveto
18 644 lineto
18 662 lineto
312 662 lineto
312 644 lineto
282 644 lineto
259 644 242 640 231 633  curveto
220 625 213 614 208 600  curveto
206 592 205 573 205 542  curveto
205 391 lineto
316 482 lineto
316 436 lineto
205 342 lineto
205 121 lineto
205 92 207 73 210 66  curveto
214 58 221 52 230 48  curveto
237 44 256 42 286 42  curveto
360 42 lineto
408 42 439 45 455 50  curveto
477 56 498 70 518 92  curveto
538 113 555 143 569 183  curveto
585 179 lineto
530 0 lineto
closepath
fill
		} def

	/Oslash
		{
560 604 moveto
624 683 lineto
652 662 lineto
587 580 lineto
621 543 645 506 661 468  curveto
676 430 684 386 684 335  curveto
684 223 644 133 564 64  curveto
503 11 436 -15 363 -15  curveto
329 -15 294 -9 257 3  curveto
220 15 188 32 161 54  curveto
98 -22 lineto
69 0 lineto
133 80 lineto
68 147 35 233 35 337  curveto
35 433 67 514 131 579  curveto
195 644 271 677 361 677  curveto
435 677 501 653 560 604  curveto
closepath
519 554 moveto
481 613 428 642 359 642  curveto
329 642 305 639 287 631  curveto
263 622 241 606 222 584  curveto
196 556 177 521 165 479  curveto
153 438 147 392 147 340  curveto
147 265 159 198 183 141  curveto
519 554 lineto
closepath
537 519 moveto
203 105 lineto
220 79 239 59 259 47  curveto
288 29 320 20 356 20  curveto
390 20 418 25 440 35  curveto
462 45 482 61 501 83  curveto
520 104 537 134 550 173  curveto
564 212 571 261 571 320  curveto
571 360 568 397 562 431  curveto
557 456 549 485 537 519  curveto
closepath
fill
		} def

	/OE
		{
539 625 moveto
539 364 lineto
628 364 lineto
665 364 692 372 708 387  curveto
723 403 731 427 730 460  curveto
750 460 lineto
750 229 lineto
730 229 lineto
728 270 719 296 706 309  curveto
692 322 666 328 628 328  curveto
539 328 lineto
539 109 lineto
539 83 540 66 543 59  curveto
547 51 552 45 560 41  curveto
564 38 577 37 597 37  curveto
648 37 lineto
687 37 714 39 730 43  curveto
745 47 761 57 778 72  curveto
802 94 823 125 841 166  curveto
860 166 lineto
808 0 lineto
571 0 lineto
525 0 497 0 487 0  curveto
483 0 456 -1 406 -4  curveto
371 -6 347 -7 335 -7  curveto
280 -7 230 6 184 33  curveto
139 61 103 102 76 156  curveto
49 209 36 267 36 330  curveto
36 414 59 488 105 552  curveto
160 629 240 667 346 667  curveto
353 667 385 666 440 664  curveto
486 662 529 662 571 662  curveto
802 662 lineto
808 516 lineto
792 516 lineto
784 555 777 579 771 589  curveto
763 602 750 612 733 619  curveto
723 623 699 625 664 625  curveto
539 625 lineto
closepath
445 508 moveto
445 551 442 579 436 592  curveto
430 606 421 616 410 622  curveto
393 632 373 636 348 636  curveto
307 636 272 624 241 601  curveto
210 577 187 540 172 491  curveto
156 442 148 387 148 326  curveto
148 275 155 226 169 179  curveto
183 131 205 94 235 67  curveto
266 40 302 26 346 26  curveto
370 26 390 31 405 39  curveto
420 47 431 59 436 74  curveto
442 89 445 119 445 166  curveto
445 508 lineto
closepath
fill
		} def

	/ordmasculine
		{
158 675 moveto
198 675 232 662 258 634  curveto
285 607 298 573 298 532  curveto
298 492 283 457 254 428  curveto
225 398 191 384 151 384  curveto
113 384 80 397 54 424  curveto
27 450 14 484 14 524  curveto
14 569 27 606 54 634  curveto
81 661 115 675 158 675  curveto
closepath
144 654 moveto
127 654 113 647 101 632  curveto
89 618 83 594 83 562  curveto
83 511 94 469 116 437  curveto
129 418 146 409 166 409  curveto
185 409 200 416 212 430  curveto
224 445 230 468 230 499  curveto
230 550 219 592 196 624  curveto
181 644 164 654 144 654  curveto
closepath
fill
		} def

	/ae
		{
358 276 moveto
358 260 357 248 357 240  curveto
357 175 369 128 393 101  curveto
416 73 446 59 482 59  curveto
514 59 543 69 568 89  curveto
585 102 602 127 621 167  curveto
636 156 lineto
625 103 599 59 561 24  curveto
533 0 498 -13 456 -13  curveto
420 -13 390 -6 365 9  curveto
354 16 335 35 311 64  curveto
307 61 298 54 284 43  curveto
265 28 253 18 246 15  curveto
231 6 215 0 197 -5  curveto
180 -11 162 -13 144 -13  curveto
113 -13 88 -2 67 18  curveto
46 40 35 66 35 98  curveto
35 126 42 150 56 170  curveto
71 190 98 210 140 231  curveto
190 257 235 277 274 291  curveto
274 336 lineto
274 371 268 396 255 410  curveto
242 425 224 432 203 432  curveto
181 432 164 427 152 417  curveto
140 406 134 394 134 381  curveto
134 354 132 336 130 328  curveto
127 319 123 313 117 309  curveto
111 305 104 303 95 303  curveto
82 303 72 306 65 314  curveto
56 324 51 336 51 349  curveto
51 366 57 383 69 400  curveto
80 417 99 431 125 443  curveto
150 455 180 460 214 460  curveto
255 460 285 455 306 443  curveto
326 432 340 417 346 400  curveto
362 420 378 434 396 443  curveto
419 455 446 460 478 460  curveto
524 460 563 445 592 413  curveto
621 382 636 336 636 276  curveto
358 276 lineto
closepath
358 308 moveto
542 308 lineto
542 349 533 379 516 398  curveto
500 416 478 426 452 426  curveto
426 426 404 416 386 395  curveto
368 375 359 346 358 308  curveto
closepath
297 89 moveto
291 104 285 123 281 147  curveto
277 170 274 193 274 216  curveto
274 259 lineto
230 246 190 225 153 197  curveto
129 178 117 154 117 125  curveto
117 100 125 79 140 62  curveto
156 46 174 38 196 38  curveto
208 38 222 41 236 48  curveto
250 55 271 69 297 89  curveto
closepath
fill
		} def

	/dotlessi
		{
185 460 moveto
185 101 lineto
185 73 187 54 191 45  curveto
195 35 201 28 209 24  curveto
217 19 232 17 253 17  curveto
253 0 lineto
36 0 lineto
36 17 lineto
57 17 72 19 80 23  curveto
87 28 93 35 97 44  curveto
102 54 104 73 104 101  curveto
104 273 lineto
104 321 103 353 100 367  curveto
97 378 94 385 89 389  curveto
84 393 77 395 69 395  curveto
60 395 49 393 36 388  curveto
29 405 lineto
164 460 lineto
185 460 lineto
closepath
fill
		} def

	/lslash
		{
185 694 moveto
185 397 lineto
269 466 lineto
269 424 lineto
185 355 lineto
185 100 lineto
185 69 187 49 190 42  curveto
194 34 199 29 207 25  curveto
219 19 236 16 256 17  curveto
256 0 lineto
31 0 lineto
31 17 lineto
43 17 lineto
60 17 73 20 83 25  curveto
91 30 96 36 100 44  curveto
103 53 105 73 105 105  curveto
105 291 lineto
14 216 lineto
14 257 lineto
105 332 lineto
105 505 lineto
105 554 104 584 101 596  curveto
99 605 95 611 89 617  curveto
83 622 76 625 68 625  curveto
63 625 52 622 36 616  curveto
31 634 lineto
169 694 lineto
185 694 lineto
closepath
fill
		} def

	/oslash
		{
393 406 moveto
458 478 lineto
480 457 lineto
415 382 lineto
449 338 466 288 466 230  curveto
466 192 457 152 438 111  curveto
419 69 393 38 360 17  curveto
326 -3 289 -13 247 -13  curveto
220 -13 196 -9 175 -1  curveto
154 7 132 21 107 42  curveto
42 -32 lineto
19 -11 lineto
87 65 lineto
71 86 58 110 49 140  curveto
40 169 36 196 36 222  curveto
36 260 45 299 65 339  curveto
85 378 111 408 145 429  curveto
178 450 214 460 254 460  curveto
281 460 305 456 326 447  curveto
348 439 370 425 393 406  curveto
closepath
343 351 moveto
327 380 310 400 294 411  curveto
278 422 259 428 238 428  curveto
206 428 179 415 158 389  curveto
137 363 126 319 126 259  curveto
126 219 133 176 146 131  curveto
343 351 lineto
closepath
357 319 moveto
160 99 lineto
177 69 193 49 209 37  curveto
225 26 244 21 267 21  curveto
299 21 325 34 345 60  curveto
366 86 376 131 376 196  curveto
376 235 370 276 357 319  curveto
closepath
fill
		} def

	/oe
		{
421 279 moveto
420 271 420 265 420 261  curveto
420 230 425 198 436 165  curveto
447 132 463 107 485 91  curveto
506 75 530 66 556 66  curveto
582 66 605 75 625 91  curveto
645 108 661 135 672 173  curveto
688 165 lineto
677 102 656 56 627 28  curveto
598 0 563 -13 522 -13  curveto
491 -13 464 -6 442 9  curveto
419 24 402 43 391 64  curveto
371 38 348 19 322 6  curveto
296 -7 267 -13 236 -13  curveto
179 -13 130 7 91 49  curveto
52 90 32 146 32 216  curveto
32 290 52 350 93 394  curveto
133 438 181 460 239 460  curveto
274 460 304 453 330 438  curveto
355 424 376 406 391 383  curveto
410 410 430 430 452 442  curveto
473 454 499 460 529 460  curveto
577 460 616 444 646 412  curveto
676 380 690 336 688 279  curveto
421 279 lineto
closepath
221 433 moveto
209 433 195 429 179 420  curveto
163 412 150 397 142 376  curveto
130 349 124 311 124 263  curveto
124 179 140 113 173 64  curveto
194 35 218 21 248 21  curveto
277 21 301 33 320 57  curveto
339 81 349 123 349 184  curveto
349 260 338 320 316 365  curveto
294 411 262 433 221 433  curveto
closepath
421 311 moveto
592 311 lineto
593 334 589 356 581 376  curveto
575 392 565 405 551 414  curveto
537 423 522 428 507 428  curveto
485 428 466 418 449 398  curveto
432 379 423 350 421 311  curveto
closepath
fill
		} def

	/germandbls
		{
17 0 moveto
17 17 lineto
36 19 50 22 58 27  curveto
67 33 73 40 76 49  curveto
79 58 81 78 81 109  curveto
81 471 lineto
81 552 96 610 126 644  curveto
157 677 200 694 255 694  curveto
308 694 350 679 381 649  curveto
412 619 427 581 427 535  curveto
427 501 418 471 401 447  curveto
388 430 366 414 334 400  curveto
378 387 411 365 434 333  curveto
456 300 467 258 467 206  curveto
467 149 452 99 423 57  curveto
393 14 354 -6 304 -6  curveto
275 -6 253 1 236 17  curveto
218 32 210 51 210 72  curveto
210 86 213 96 220 104  curveto
227 111 237 115 249 115  curveto
261 115 271 111 278 104  curveto
285 97 289 88 289 76  curveto
289 71 288 66 287 60  curveto
285 52 284 47 284 43  curveto
284 37 286 32 291 27  curveto
296 23 303 21 311 21  curveto
331 21 347 29 359 46  curveto
376 69 384 104 384 152  curveto
384 220 372 273 348 313  curveto
324 353 288 374 240 377  curveto
240 405 lineto
275 405 301 415 319 436  curveto
336 456 345 490 345 538  curveto
345 581 337 613 320 632  curveto
302 652 280 662 251 662  curveto
225 662 204 651 187 630  curveto
170 610 162 568 162 506  curveto
162 0 lineto
17 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/TimesNewRoman exch definefont pop
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
450 110 23 15 rc
q
454 111 7 13 rc
454.0 122.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -206 1090 806 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -206 1090 806
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 250.0 def
		/exclam 1000.0 def
		/quotedbl 500.0 def
		/numbersign 792.0 def
		/dollar 450.0 def
		/percent 500.0 def
		/ampersand 1000.0 def
		/quoteright 500.0 def
		/parenleft 1000.0 def
		/parenright 1000.0 def
		/asterisk 1000.0 def
		/plus 1000.0 def
		/comma 660.0 def
		/hyphen 1090.0 def
		/period 1090.0 def
		/slash 1090.0 def
		/zero 1090.0 def
		/one 1090.0 def
		/two 1000.0 def
		/three 1000.0 def
		/four 1000.0 def
		/five 1000.0 def
		/six 950.0 def
		/seven 1000.0 def
		/eight 950.0 def
		/nine 1000.0 def
		/colon 1000.0 def
		/semicolon 1000.0 def
		/less 1000.0 def
		/equal 1000.0 def
		/greater 1000.0 def
		/question 1000.0 def
		/at 1000.0 def
		/A 1000.0 def
		/B 1000.0 def
		/C 1000.0 def
		/D 1000.0 def
		/E 1000.0 def
		/F 1000.0 def
		/G 1000.0 def
		/H 1000.0 def
		/I 1000.0 def
		/J 1000.0 def
		/K 1000.0 def
		/L 1000.0 def
		/M 1000.0 def
		/N 1000.0 def
		/O 1000.0 def
		/P 1000.0 def
		/Q 500.0 def
		/R 1000.0 def
		/S 1000.0 def
		/T 790.0 def
		/U 1000.0 def
		/V 1000.0 def
		/W 1000.0 def
		/X 1000.0 def
		/Y 738.0 def
		/Z 536.0 def
		/bracketleft 430.0 def
		/backslash 500.0 def
		/bracketright 1000.0 def
		/asciicircum 1000.0 def
		/underscore 1000.0 def
		/quoteleft 500.0 def
		/a 750.0 def
		/b 750.0 def
		/c 750.0 def
		/d 1000.0 def
		/e 750.0 def
		/f 750.0 def
		/g 750.0 def
		/h 750.0 def
		/i 750.0 def
		/j 750.0 def
		/k 1000.0 def
		/l 1000.0 def
		/m 624.0 def
		/n 624.0 def
		/o 624.0 def
		/p 624.0 def
		/q 624.0 def
		/r 624.0 def
		/s 624.0 def
		/t 624.0 def
		/u 500.0 def
		/v 500.0 def
		/w 500.0 def
		/x 500.0 def
		/y 500.0 def
		/z 500.0 def
		/braceleft 500.0 def
		/bar 500.0 def
		/braceright 500.0 def
		/asciitilde 500.0 def
		/exclamdown 500.0 def
		/cent 500.0 def
		/sterling 500.0 def
		/fraction 500.0 def
		/yen 500.0 def
		/florin 500.0 def
		/section 500.0 def
		/currency 500.0 def
		/quotesingle 500.0 def
		/quotedblleft 500.0 def
		/guillemotleft 500.0 def
		/guilsinglleft 500.0 def
		/guilsinglright 500.0 def
		/fi 500.0 def
		/fl 500.0 def
		/endash 1090.0 def
		/dagger 500.0 def
		/daggerdbl 500.0 def
		/periodcentered 500.0 def
		/paragraph 500.0 def
		/bullet 500.0 def
		/quotesinglbase 500.0 def
		/quotedblbase 500.0 def
		/quotedblright 500.0 def
		/guillemotright 500.0 def
		/ellipsis 500.0 def
		/perthousand 500.0 def
		/questiondown 500.0 def
		/grave 500.0 def
		/acute 500.0 def
		/circumflex 500.0 def
		/tilde 500.0 def
		/macron 500.0 def
		/breve 500.0 def
		/dotaccent 500.0 def
		/dieresis 500.0 def
		/ring 500.0 def
		/cedilla 500.0 def
		/hungarumlaut 500.0 def
		/ogonek 500.0 def
		/caron 500.0 def
		/emdash 1090.0 def
		/AE 500.0 def
		/ordfeminine 500.0 def
		/Lslash 500.0 def
		/Oslash 500.0 def
		/OE 500.0 def
		/ordmasculine 500.0 def
		/ae 500.0 def
		/dotlessi 500.0 def
		/lslash 500.0 def
		/oslash 500.0 def
		/oe 500.0 def
		/germandbls 500.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
464 300 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
fill
		} def

	/quotedbl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/numbersign
		{
622 128 moveto
568 74 lineto
396 246 lineto
224 75 lineto
170 129 lineto
342 300 lineto
170 471 lineto
224 525 lineto
396 354 lineto
568 526 lineto
622 472 lineto
450 300 lineto
622 128 lineto
closepath
fill
		} def

	/dollar
		{
281 300 moveto
281 285 275 272 264 260  curveto
252 248 239 243 224 243  curveto
210 243 198 248 186 258  curveto
174 268 168 282 168 300  curveto
168 315 173 328 184 339  curveto
195 350 208 356 224 356  curveto
241 356 255 349 267 337  curveto
276 325 281 313 281 300  curveto
closepath
fill
		} def

	/percent
		{
334 300 moveto
334 277 325 257 308 240  curveto
291 223 271 215 249 215  curveto
229 215 210 222 194 236  curveto
174 252 165 274 165 300  curveto
165 323 173 343 189 359  curveto
205 375 225 384 249 384  curveto
275 384 296 374 313 355  curveto
327 338 334 320 334 300  curveto
closepath
fill
		} def

	/ampersand
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
464 300 moveto
222 541 lineto
222 60 lineto
464 300 lineto
closepath
fill
		} def

	/quoteright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/parenleft
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
462 300 lineto
170 593 lineto
207 630 lineto
499 337 lineto
793 630 lineto
830 593 lineto
830 8 lineto
closepath
778 60 moveto
778 541 lineto
536 300 lineto
778 60 lineto
closepath
fill
		} def

	/parenright
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
170 593 lineto
207 630 lineto
499 337 lineto
793 630 lineto
830 593 lineto
830 8 lineto
closepath
778 60 moveto
778 541 lineto
536 300 lineto
778 60 lineto
closepath
462 300 moveto
222 541 lineto
222 60 lineto
462 300 lineto
closepath
fill
		} def

	/asterisk
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
fill
		} def

	/plus
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
462 300 lineto
170 593 lineto
207 630 lineto
830 8 lineto
closepath
fill
		} def

	/comma
		{
492 12 moveto
466 -30 lineto
387 -2 336 34 314 79  curveto
296 113 287 176 287 267  curveto
287 418 lineto
287 455 282 483 273 501  curveto
264 519 244 538 214 558  curveto
168 588 lineto
194 630 lineto
259 597 lineto
308 572 340 540 356 502  curveto
368 472 374 427 374 365  curveto
374 349 374 325 374 293  curveto
373 261 373 238 373 222  curveto
373 125 397 63 446 36  curveto
453 32 468 24 492 12  curveto
closepath
fill
		} def

	/hyphen
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/period
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
678 274 moveto
412 274 lineto
412 326 lineto
678 326 lineto
678 274 lineto
closepath
fill
		} def

	/slash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
662 518 moveto
486 82 lineto
428 82 lineto
604 518 lineto
662 518 lineto
closepath
fill
		} def

	/zero
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
667 300 moveto
667 266 655 238 631 214  curveto
607 190 578 178 545 178  curveto
511 178 483 190 459 214  curveto
435 238 423 266 423 300  curveto
423 333 435 362 459 386  curveto
483 410 511 422 545 422  curveto
578 422 607 410 631 386  curveto
655 362 667 333 667 300  curveto
closepath
615 300 moveto
615 319 608 335 594 349  curveto
580 363 564 370 545 370  curveto
525 370 509 363 495 349  curveto
481 335 475 319 475 300  curveto
475 280 481 264 495 250  curveto
509 236 525 230 545 230  curveto
564 230 580 236 594 250  curveto
608 264 615 280 615 300  curveto
closepath
fill
		} def

	/one
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
602 323 moveto
602 308 596 295 585 283  curveto
573 271 560 266 545 266  curveto
531 266 519 271 507 281  curveto
495 291 489 305 489 323  curveto
489 338 494 351 505 362  curveto
516 373 529 379 545 379  curveto
562 379 576 372 588 360  curveto
597 348 602 336 602 323  curveto
closepath
fill
		} def

	/two
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
777 326 moveto
770 396 740 456 687 505  curveto
634 553 572 578 500 578  curveto
428 578 365 553 312 505  curveto
259 456 229 396 223 326  curveto
777 326 lineto
closepath
777 274 moveto
223 274 lineto
229 203 259 143 312 95  curveto
365 46 428 22 500 22  curveto
572 22 634 46 687 95  curveto
740 143 770 203 777 274  curveto
closepath
fill
		} def

	/three
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
778 300 moveto
778 372 753 434 705 487  curveto
656 540 596 570 526 577  curveto
526 23 lineto
596 29 656 59 705 112  curveto
753 165 778 228 778 300  curveto
closepath
474 23 moveto
474 577 lineto
403 570 343 540 295 487  curveto
246 434 222 372 222 300  curveto
222 228 246 165 295 112  curveto
343 59 403 29 474 23  curveto
closepath
fill
		} def

	/four
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
777 326 moveto
771 392 744 449 697 497  curveto
649 544 592 571 526 577  curveto
526 326 lineto
777 326 lineto
closepath
474 326 moveto
474 577 lineto
407 571 350 544 303 497  curveto
255 449 229 392 223 326  curveto
474 326 lineto
closepath
777 274 moveto
526 274 lineto
526 23 lineto
592 29 649 55 697 103  curveto
744 150 771 207 777 274  curveto
closepath
474 23 moveto
474 274 lineto
223 274 lineto
229 207 255 150 303 103  curveto
350 55 407 29 474 23  curveto
closepath
fill
		} def

	/five
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
677 514 moveto
625 556 566 578 500 578  curveto
433 578 374 556 323 514  curveto
500 337 lineto
677 514 lineto
closepath
778 300 moveto
778 366 756 425 714 477  curveto
537 300 lineto
714 123 lineto
756 174 778 233 778 300  curveto
closepath
463 300 moveto
286 477 lineto
243 425 222 366 222 300  curveto
222 233 243 174 286 123  curveto
463 300 lineto
closepath
677 86 moveto
500 263 lineto
323 86 lineto
374 43 433 22 500 22  curveto
566 22 625 43 677 86  curveto
closepath
fill
		} def

	/six
		{
782 274 moveto
524 274 lineto
524 -30 lineto
424 -30 340 -1 273 58  curveto
203 120 168 200 168 300  curveto
168 399 203 480 273 542  curveto
339 601 423 630 524 630  curveto
524 326 lineto
782 326 lineto
782 274 lineto
closepath
472 326 moveto
472 577 lineto
406 570 349 543 302 496  curveto
254 448 227 392 221 326  curveto
472 326 lineto
closepath
472 23 moveto
472 274 lineto
221 274 lineto
227 208 254 151 302 104  curveto
349 56 406 29 472 23  curveto
closepath
fill
		} def

	/seven
		{
792 82 moveto
755 45 lineto
540 260 lineto
364 84 lineto
415 42 473 22 538 22  curveto
538 -30 lineto
446 -30 368 2 304 66  curveto
240 130 208 208 208 300  curveto
208 391 240 469 304 533  curveto
368 597 446 630 538 630  curveto
538 578 lineto
471 578 412 556 360 513  curveto
540 333 lineto
755 548 lineto
792 511 lineto
577 296 lineto
792 82 lineto
closepath
503 296 moveto
323 476 lineto
281 424 260 366 260 300  curveto
260 232 282 172 327 120  curveto
503 296 lineto
closepath
fill
		} def

	/eight
		{
782 300 moveto
782 200 747 120 677 58  curveto
610 0 526 -30 426 -30  curveto
426 274 lineto
168 274 lineto
168 326 lineto
426 326 lineto
426 630 lineto
526 630 610 600 677 542  curveto
747 480 782 399 782 300  curveto
closepath
729 326 moveto
722 392 695 448 648 496  curveto
600 543 544 570 478 577  curveto
478 326 lineto
729 326 lineto
closepath
729 274 moveto
478 274 lineto
478 23 lineto
544 29 600 56 648 104  curveto
695 151 722 208 729 274  curveto
closepath
fill
		} def

	/nine
		{
792 300 moveto
792 208 759 130 695 66  curveto
631 2 553 -30 462 -30  curveto
462 22 lineto
526 22 584 42 636 84  curveto
460 260 lineto
245 45 lineto
208 82 lineto
423 296 lineto
208 511 lineto
245 548 lineto
460 333 lineto
640 513 lineto
588 556 528 578 462 578  curveto
462 630 lineto
553 630 631 597 695 533  curveto
759 469 792 391 792 300  curveto
closepath
740 300 moveto
740 366 719 424 677 476  curveto
497 296 lineto
673 120 lineto
717 172 740 232 740 300  curveto
closepath
fill
		} def

	/colon
		{
830 300 moveto
830 209 797 131 733 67  curveto
668 2 590 -30 500 -30  curveto
419 -30 348 -4 287 48  curveto
210 -30 lineto
170 10 lineto
247 88 lineto
195 149 170 220 170 300  curveto
170 390 202 468 267 533  curveto
331 597 409 630 500 630  curveto
580 630 650 604 712 553  curveto
789 630 lineto
829 590 lineto
752 513 lineto
804 451 830 380 830 300  curveto
closepath
778 300 moveto
778 366 757 424 715 476  curveto
324 85 lineto
375 43 434 22 500 22  curveto
576 22 642 49 696 103  curveto
750 157 778 223 778 300  curveto
closepath
675 516 moveto
624 557 566 578 500 578  curveto
423 578 357 550 303 496  curveto
249 442 222 376 222 300  curveto
222 234 242 175 284 125  curveto
675 516 lineto
closepath
fill
		} def

	/semicolon
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
778 300 moveto
778 376 750 442 696 496  curveto
642 550 576 578 500 578  curveto
423 578 357 550 303 496  curveto
249 442 222 376 222 300  curveto
222 223 249 157 303 103  curveto
357 49 423 22 500 22  curveto
576 22 642 49 696 103  curveto
750 157 778 223 778 300  curveto
closepath
672 201 moveto
652 193 635 190 621 190  curveto
608 190 597 192 587 198  curveto
579 202 567 216 551 239  curveto
537 259 522 274 507 285  curveto
508 269 514 249 525 225  curveto
536 200 542 182 542 172  curveto
542 151 527 127 499 101  curveto
469 124 455 148 455 173  curveto
455 181 460 198 472 223  curveto
482 245 488 266 490 284  curveto
474 273 460 258 446 238  curveto
439 228 427 215 410 199  curveto
400 193 388 190 375 190  curveto
361 190 344 193 326 201  curveto
334 238 348 262 367 273  curveto
377 279 394 283 418 285  curveto
442 287 463 292 481 300  curveto
464 307 443 312 419 315  curveto
407 315 389 319 367 325  curveto
346 337 333 362 327 400  curveto
347 406 363 409 376 409  curveto
388 409 400 406 410 401  curveto
417 397 429 383 445 361  curveto
458 342 473 327 489 316  curveto
487 333 480 353 470 377  curveto
460 400 455 417 455 427  curveto
455 451 470 475 500 499  curveto
528 473 542 449 542 427  curveto
542 417 536 400 525 376  curveto
515 354 509 333 507 314  curveto
518 322 531 337 547 359  curveto
563 381 576 395 586 401  curveto
596 407 608 410 622 410  curveto
635 410 651 407 670 401  curveto
664 363 650 338 630 326  curveto
620 320 603 316 578 314  curveto
565 312 545 308 517 300  curveto
535 292 555 287 577 285  curveto
593 283 602 283 604 283  curveto
614 281 622 278 630 274  curveto
649 262 663 238 672 201  curveto
closepath
fill
		} def

	/less
		{
980 274 moveto
829 274 lineto
822 188 787 115 724 57  curveto
660 0 586 -30 500 -30  curveto
414 -30 339 0 276 58  curveto
212 116 177 188 171 274  curveto
20 274 lineto
20 326 lineto
171 326 lineto
177 411 212 483 276 542  curveto
339 600 414 630 500 630  curveto
586 630 660 600 724 542  curveto
787 484 822 412 829 326  curveto
980 326 lineto
980 274 lineto
closepath
777 326 moveto
770 397 740 457 687 505  curveto
633 553 571 578 500 578  curveto
428 578 366 553 313 505  curveto
259 457 229 397 223 326  curveto
777 326 lineto
closepath
777 274 moveto
223 274 lineto
229 202 259 142 313 94  curveto
366 46 428 22 500 22  curveto
571 22 633 46 687 94  curveto
740 142 770 202 777 274  curveto
closepath
fill
		} def

	/equal
		{
980 274 moveto
829 274 lineto
823 193 791 124 733 66  curveto
675 8 606 -23 526 -29  curveto
526 -200 lineto
474 -200 lineto
474 -29 lineto
393 -23 324 8 266 66  curveto
208 124 177 193 171 274  curveto
20 274 lineto
20 326 lineto
171 326 lineto
177 406 208 475 266 533  curveto
324 591 393 623 474 629  curveto
474 800 lineto
526 800 lineto
526 629 lineto
606 622 675 590 733 533  curveto
790 475 822 406 829 326  curveto
980 326 lineto
980 274 lineto
closepath
777 326 moveto
771 392 744 448 696 496  curveto
648 544 592 571 526 577  curveto
526 326 lineto
777 326 lineto
closepath
474 326 moveto
474 577 lineto
408 571 351 544 303 496  curveto
255 448 229 392 223 326  curveto
474 326 lineto
closepath
777 274 moveto
526 274 lineto
526 23 lineto
592 29 648 55 696 103  curveto
744 151 771 208 777 274  curveto
closepath
474 23 moveto
474 274 lineto
223 274 lineto
229 208 255 151 303 103  curveto
351 55 408 29 474 23  curveto
closepath
fill
		} def

	/greater
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 326 moveto
778 578 lineto
222 578 lineto
222 326 lineto
778 326 lineto
closepath
778 22 moveto
778 274 lineto
222 274 lineto
222 22 lineto
778 22 lineto
closepath
fill
		} def

	/question
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 326 moveto
778 578 lineto
526 578 lineto
526 326 lineto
778 326 lineto
closepath
474 326 moveto
474 578 lineto
222 578 lineto
222 326 lineto
474 326 lineto
closepath
778 22 moveto
778 274 lineto
526 274 lineto
526 22 lineto
778 22 lineto
closepath
474 22 moveto
474 274 lineto
222 274 lineto
222 22 lineto
474 22 lineto
closepath
fill
		} def

	/at
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 60 moveto
778 541 lineto
538 300 lineto
778 60 lineto
closepath
741 578 moveto
259 578 lineto
501 337 lineto
741 578 lineto
closepath
464 300 moveto
222 541 lineto
222 60 lineto
464 300 lineto
closepath
742 22 moveto
501 263 lineto
258 22 lineto
742 22 lineto
closepath
fill
		} def

	/A
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 22 moveto
778 578 lineto
222 578 lineto
222 22 lineto
778 22 lineto
closepath
fill
		} def

	/B
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
fill
		} def

	/C
		{
830 274 moveto
526 274 lineto
526 -30 lineto
474 -30 lineto
474 274 lineto
170 274 lineto
170 326 lineto
474 326 lineto
474 630 lineto
526 630 lineto
526 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/D
		{
830 261 moveto
539 261 lineto
539 -30 lineto
461 -30 lineto
461 261 lineto
170 261 lineto
170 339 lineto
461 339 lineto
461 630 lineto
539 630 lineto
539 339 lineto
830 339 lineto
830 261 lineto
closepath
fill
		} def

	/E
		{
830 394 moveto
526 394 lineto
526 90 lineto
474 90 lineto
474 394 lineto
170 394 lineto
170 446 lineto
474 446 lineto
474 750 lineto
526 750 lineto
526 446 lineto
830 446 lineto
830 394 lineto
closepath
555 -95 moveto
555 -110 549 -123 539 -134  curveto
528 -144 515 -150 500 -150  curveto
484 -150 471 -144 461 -134  curveto
450 -123 445 -110 445 -95  curveto
445 -79 450 -66 461 -56  curveto
471 -45 484 -40 500 -40  curveto
515 -40 528 -45 539 -56  curveto
549 -66 555 -79 555 -95  curveto
closepath
fill
		} def

	/F
		{
555 695 moveto
555 679 549 666 539 656  curveto
528 645 515 640 500 640  curveto
484 640 471 645 461 656  curveto
450 666 445 679 445 695  curveto
445 710 450 723 461 734  curveto
471 744 484 750 500 750  curveto
515 750 528 744 539 734  curveto
549 723 555 710 555 695  curveto
closepath
830 154 moveto
526 154 lineto
526 -150 lineto
474 -150 lineto
474 154 lineto
170 154 lineto
170 206 lineto
474 206 lineto
474 510 lineto
526 510 lineto
526 206 lineto
830 206 lineto
830 154 lineto
closepath
fill
		} def

	/G
		{
830 337 moveto
526 337 lineto
526 33 lineto
474 33 lineto
474 337 lineto
170 337 lineto
170 389 lineto
474 389 lineto
474 693 lineto
526 693 lineto
526 389 lineto
830 389 lineto
830 337 lineto
closepath
830 -94 moveto
170 -94 lineto
170 -42 lineto
830 -42 lineto
830 -94 lineto
closepath
fill
		} def

	/H
		{
830 641 moveto
170 641 lineto
170 693 lineto
830 693 lineto
830 641 lineto
closepath
830 210 moveto
526 210 lineto
526 -94 lineto
474 -94 lineto
474 210 lineto
170 210 lineto
170 262 lineto
474 262 lineto
474 566 lineto
526 566 lineto
526 262 lineto
830 262 lineto
830 210 lineto
closepath
fill
		} def

	/I
		{
526 404 moveto
474 404 lineto
474 630 lineto
526 630 lineto
526 404 lineto
closepath
830 274 moveto
604 274 lineto
604 326 lineto
830 326 lineto
830 274 lineto
closepath
396 326 moveto
396 274 lineto
170 274 lineto
170 326 lineto
396 326 lineto
closepath
526 -30 moveto
474 -30 lineto
474 196 lineto
526 196 lineto
526 -30 lineto
closepath
fill
		} def

	/J
		{
555 523 moveto
555 507 549 494 539 484  curveto
528 473 515 468 500 468  curveto
484 468 471 473 461 484  curveto
450 494 445 507 445 523  curveto
445 538 450 551 461 562  curveto
471 572 484 578 500 578  curveto
515 578 528 572 539 562  curveto
549 551 555 538 555 523  curveto
closepath
830 8 moveto
793 -30 lineto
501 263 lineto
207 -30 lineto
170 8 lineto
438 274 lineto
170 274 lineto
170 326 lineto
438 326 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
564 326 lineto
830 326 lineto
830 274 lineto
564 274 lineto
830 8 lineto
closepath
555 78 moveto
555 62 549 49 539 39  curveto
528 28 515 23 500 23  curveto
484 23 471 28 461 39  curveto
450 49 445 62 445 78  curveto
445 93 450 106 461 117  curveto
471 127 484 133 500 133  curveto
515 133 528 127 539 117  curveto
549 106 555 93 555 78  curveto
closepath
fill
		} def

	/K
		{
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/L
		{
830 261 moveto
170 261 lineto
170 339 lineto
830 339 lineto
830 261 lineto
closepath
fill
		} def

	/M
		{
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
555 115 moveto
555 99 549 86 539 76  curveto
528 65 515 60 500 60  curveto
484 60 471 65 461 76  curveto
450 86 445 99 445 115  curveto
445 130 450 143 461 154  curveto
471 164 484 170 500 170  curveto
515 170 528 164 539 154  curveto
549 143 555 130 555 115  curveto
closepath
fill
		} def

	/N
		{
555 485 moveto
555 469 549 456 539 446  curveto
528 435 515 430 500 430  curveto
484 430 471 435 461 446  curveto
450 456 445 469 445 485  curveto
445 500 450 513 461 524  curveto
471 534 484 540 500 540  curveto
515 540 528 534 539 524  curveto
549 513 555 500 555 485  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/O
		{
555 485 moveto
555 469 549 456 539 446  curveto
528 435 515 430 500 430  curveto
484 430 471 435 461 446  curveto
450 456 445 469 445 485  curveto
445 500 450 513 461 524  curveto
471 534 484 540 500 540  curveto
515 540 528 534 539 524  curveto
549 513 555 500 555 485  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
555 115 moveto
555 99 549 86 539 76  curveto
528 65 515 60 500 60  curveto
484 60 471 65 461 76  curveto
450 86 445 99 445 115  curveto
445 130 450 143 461 154  curveto
471 164 484 170 500 170  curveto
515 170 528 164 539 154  curveto
549 143 555 130 555 115  curveto
closepath
fill
		} def

	/P
		{
778 485 moveto
778 469 772 456 762 446  curveto
751 435 738 430 723 430  curveto
707 430 694 435 684 446  curveto
673 456 668 469 668 485  curveto
668 500 673 513 684 524  curveto
694 534 707 540 723 540  curveto
738 540 751 534 762 524  curveto
772 513 778 500 778 485  curveto
closepath
778 115 moveto
778 99 772 86 762 76  curveto
751 65 738 60 723 60  curveto
707 60 694 65 684 76  curveto
673 86 668 99 668 115  curveto
668 130 673 143 684 154  curveto
694 164 707 170 723 170  curveto
738 170 751 164 762 154  curveto
772 143 778 130 778 115  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
332 485 moveto
332 469 326 456 316 446  curveto
305 435 292 430 277 430  curveto
261 430 248 435 238 446  curveto
227 456 222 469 222 485  curveto
222 500 227 513 238 524  curveto
248 534 261 540 277 540  curveto
292 540 305 534 316 524  curveto
326 513 332 500 332 485  curveto
closepath
332 115 moveto
332 99 326 86 316 76  curveto
305 65 292 60 277 60  curveto
261 60 248 65 238 76  curveto
227 86 222 99 222 115  curveto
222 130 227 143 238 154  curveto
248 164 261 170 277 170  curveto
292 170 305 164 316 154  curveto
326 143 332 130 332 115  curveto
closepath
fill
		} def

	/Q
		{
500 201 moveto
0 201 lineto
0 250 lineto
500 250 lineto
500 201 lineto
closepath
fill
		} def

	/R
		{
1000 201 moveto
0 201 lineto
0 250 lineto
1000 250 lineto
1000 201 lineto
closepath
fill
		} def

	/S
		{
726 446 moveto
654 446 lineto
500 597 lineto
346 446 lineto
274 446 lineto
500 668 lineto
726 446 lineto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/T
		{
621 479 moveto
621 463 615 450 605 440  curveto
594 429 581 424 566 424  curveto
550 424 537 429 527 440  curveto
516 450 511 463 511 479  curveto
511 494 516 507 527 518  curveto
537 528 550 534 566 534  curveto
581 534 594 528 605 518  curveto
615 507 621 494 621 479  curveto
closepath
278 479 moveto
278 463 272 450 262 440  curveto
251 429 238 424 223 424  curveto
207 424 194 429 184 440  curveto
173 450 168 463 168 479  curveto
168 494 173 507 184 518  curveto
194 528 207 534 223 534  curveto
238 534 251 528 262 518  curveto
272 507 278 494 278 479  curveto
closepath
621 121 moveto
621 105 615 92 605 82  curveto
594 71 581 66 566 66  curveto
550 66 537 71 527 82  curveto
516 92 511 105 511 121  curveto
511 136 516 149 527 160  curveto
537 170 550 176 566 176  curveto
581 176 594 170 605 160  curveto
615 149 621 136 621 121  curveto
closepath
278 121 moveto
278 105 272 92 262 82  curveto
251 71 238 66 223 66  curveto
207 66 194 71 184 82  curveto
173 92 168 105 168 121  curveto
168 136 173 149 184 160  curveto
194 170 207 176 223 176  curveto
238 176 251 170 262 160  curveto
272 149 278 136 278 121  curveto
closepath
fill
		} def

	/U
		{
830 25 moveto
170 300 lineto
830 575 lineto
830 25 lineto
closepath
830 -100 moveto
170 -100 lineto
170 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
778 103 moveto
778 497 lineto
305 300 lineto
778 103 lineto
closepath
fill
		} def

	/V
		{
830 300 moveto
170 25 lineto
170 575 lineto
830 300 lineto
closepath
830 -100 moveto
170 -100 lineto
170 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
695 300 moveto
222 497 lineto
222 103 lineto
695 300 lineto
closepath
fill
		} def

	/W
		{
830 -100 moveto
426 -100 lineto
386 -205 lineto
329 -205 lineto
370 -100 lineto
170 -100 lineto
170 -48 lineto
390 -48 lineto
475 173 lineto
170 300 lineto
592 476 lineto
666 667 lineto
721 667 lineto
658 503 lineto
830 575 lineto
830 25 lineto
523 153 lineto
446 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
778 103 moveto
778 497 lineto
632 436 lineto
542 201 lineto
778 103 lineto
closepath
566 409 moveto
305 300 lineto
494 221 lineto
566 409 lineto
closepath
fill
		} def

	/X
		{
830 -100 moveto
346 -100 lineto
306 -204 lineto
249 -204 lineto
289 -100 lineto
170 -100 lineto
170 -48 lineto
310 -48 lineto
370 109 lineto
170 25 lineto
170 575 lineto
498 438 lineto
568 617 lineto
623 617 lineto
546 418 lineto
830 300 lineto
437 136 lineto
366 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
695 300 moveto
528 370 lineto
463 204 lineto
695 300 lineto
closepath
480 390 moveto
222 497 lineto
222 103 lineto
397 176 lineto
480 390 lineto
closepath
fill
		} def

	/Y
		{
697 148 moveto
671 100 632 59 580 27  curveto
528 -5 476 -22 426 -22  curveto
315 -22 230 11 172 77  curveto
116 138 87 223 83 333  curveto
5 333 lineto
5 373 lineto
84 373 lineto
88 449 118 520 173 585  curveto
231 653 297 688 371 688  curveto
413 688 454 681 492 668  curveto
528 655 553 649 568 649  curveto
595 649 615 662 629 688  curveto
647 688 lineto
695 476 lineto
668 476 lineto
587 596 493 657 386 657  curveto
319 657 266 628 228 572  curveto
194 522 177 461 177 391  curveto
177 385 177 379 177 373  curveto
326 373 lineto
326 333 lineto
180 333 lineto
190 249 218 181 265 129  curveto
316 71 383 42 466 42  curveto
544 42 612 77 668 148  curveto
697 148 lineto
closepath
fill
		} def

	/Z
		{
516 154 moveto
444 51 390 0 353 0  curveto
337 0 323 6 312 18  curveto
300 30 295 45 295 61  curveto
295 69 299 91 308 125  curveto
319 163 331 202 343 242  curveto
359 296 367 333 367 353  curveto
367 372 361 382 351 382  curveto
316 382 273 341 222 260  curveto
182 197 153 140 135 88  curveto
130 70 125 52 121 34  curveto
113 11 101 0 85 0  curveto
62 0 51 8 51 24  curveto
51 26 56 50 66 97  curveto
142 453 lineto
56 410 lineto
56 457 lineto
154 506 lineto
163 549 lineto
170 583 174 605 174 617  curveto
174 627 172 634 169 639  curveto
161 647 138 651 98 653  curveto
98 675 lineto
257 675 lineto
229 544 lineto
323 591 lineto
323 544 lineto
218 491 lineto
155 190 lineto
247 352 324 433 385 433  curveto
420 433 438 408 438 358  curveto
438 342 430 307 414 253  curveto
404 221 394 190 385 160  curveto
372 118 366 87 366 67  curveto
366 55 372 49 384 49  curveto
406 49 444 88 498 168  curveto
516 154 lineto
closepath
fill
		} def

	/bracketleft
		{
402 25 moveto
381 -1 354 -14 321 -14  curveto
277 -14 226 24 168 101  curveto
143 74 104 35 51 -16  curveto
28 7 lineto
147 139 lineto
126 171 108 216 93 274  curveto
78 331 71 380 71 421  curveto
71 480 83 534 107 584  curveto
137 645 179 676 233 676  curveto
278 676 313 654 339 610  curveto
360 572 371 529 371 481  curveto
371 434 353 378 319 314  curveto
299 278 267 228 223 164  curveto
224 144 236 117 259 83  curveto
283 46 304 28 322 28  curveto
346 28 364 37 374 56  curveto
402 25 lineto
closepath
319 481 moveto
319 515 313 545 303 572  curveto
288 608 266 626 238 626  curveto
182 626 155 561 155 432  curveto
155 358 172 285 206 214  curveto
233 240 259 281 283 338  curveto
307 394 319 442 319 481  curveto
closepath
fill
		} def

	/backslash
		{
476 331 moveto
476 248 461 175 432 113  curveto
392 28 331 -14 250 -14  curveto
219 -14 191 -7 166 5  curveto
134 -92 lineto
90 -92 lineto
129 29 lineto
92 61 64 109 46 174  curveto
31 224 24 276 24 331  curveto
24 413 38 485 68 548  curveto
108 633 168 676 250 676  curveto
280 676 308 669 334 657  curveto
366 754 lineto
410 754 lineto
370 633 lineto
407 600 435 551 454 487  curveto
468 437 476 385 476 331  curveto
closepath
320 615 moveto
302 638 278 650 250 650  curveto
163 650 120 543 120 331  curveto
120 227 130 148 151 95  curveto
320 615 lineto
closepath
380 331 moveto
380 431 369 509 348 565  curveto
179 46 lineto
198 23 222 12 250 12  curveto
336 12 380 118 380 331  curveto
closepath
fill
		} def

	/bracketright
		{
950 365 moveto
50 365 lineto
50 417 lineto
950 417 lineto
950 365 lineto
closepath
950 183 moveto
50 183 lineto
50 235 lineto
950 235 lineto
950 183 lineto
closepath
fill
		} def

	/asciicircum
		{
950 456 moveto
50 456 lineto
50 508 lineto
950 508 lineto
950 456 lineto
closepath
950 274 moveto
50 274 lineto
50 326 lineto
950 326 lineto
950 274 lineto
closepath
950 92 moveto
50 92 lineto
50 144 lineto
950 144 lineto
950 92 lineto
closepath
fill
		} def

	/underscore
		{
950 547 moveto
50 547 lineto
50 599 lineto
950 599 lineto
950 547 lineto
closepath
950 365 moveto
50 365 lineto
50 417 lineto
950 417 lineto
950 365 lineto
closepath
950 183 moveto
50 183 lineto
50 235 lineto
950 235 lineto
950 183 lineto
closepath
950 1 moveto
50 1 lineto
50 53 lineto
950 53 lineto
950 1 lineto
closepath
fill
		} def

	/quoteleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/a
		{
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
fill
		} def

	/b
		{
700 456 moveto
50 456 lineto
50 508 lineto
700 508 lineto
700 456 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
700 92 moveto
50 92 lineto
50 144 lineto
700 144 lineto
700 92 lineto
closepath
fill
		} def

	/c
		{
700 547 moveto
50 547 lineto
50 599 lineto
700 599 lineto
700 547 lineto
closepath
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
700 1 moveto
50 1 lineto
50 53 lineto
700 53 lineto
700 1 lineto
closepath
fill
		} def

	/d
		{
950 274 moveto
50 274 lineto
50 326 lineto
950 326 lineto
950 274 lineto
closepath
fill
		} def

	/e
		{
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
fill
		} def

	/f
		{
700 365 moveto
550 365 lineto
550 417 lineto
700 417 lineto
700 365 lineto
closepath
450 365 moveto
300 365 lineto
300 417 lineto
450 417 lineto
450 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
200 417 moveto
200 365 lineto
50 365 lineto
50 417 lineto
200 417 lineto
closepath
fill
		} def

	/g
		{
700 183 moveto
550 183 lineto
550 235 lineto
700 235 lineto
700 183 lineto
closepath
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
450 235 moveto
450 183 lineto
300 183 lineto
300 235 lineto
450 235 lineto
closepath
200 183 moveto
50 183 lineto
50 235 lineto
200 235 lineto
200 183 lineto
closepath
fill
		} def

	/h
		{
700 456 moveto
550 456 lineto
550 508 lineto
700 508 lineto
700 456 lineto
closepath
450 456 moveto
300 456 lineto
300 508 lineto
450 508 lineto
450 456 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
200 508 moveto
200 456 lineto
50 456 lineto
50 508 lineto
200 508 lineto
closepath
700 92 moveto
50 92 lineto
50 144 lineto
700 144 lineto
700 92 lineto
closepath
fill
		} def

	/i
		{
700 456 moveto
50 456 lineto
50 508 lineto
700 508 lineto
700 456 lineto
closepath
700 92 moveto
550 92 lineto
550 144 lineto
700 144 lineto
700 92 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
450 144 moveto
450 92 lineto
300 92 lineto
300 144 lineto
450 144 lineto
closepath
200 92 moveto
50 92 lineto
50 144 lineto
200 144 lineto
200 92 lineto
closepath
fill
		} def

	/j
		{
700 379 moveto
700 365 696 353 687 343  curveto
677 333 666 328 652 328  curveto
638 327 626 331 616 341  curveto
606 351 600 363 600 377  curveto
599 391 603 402 613 412  curveto
623 422 635 427 649 428  curveto
663 428 674 424 684 414  curveto
694 404 699 393 700 379  curveto
closepath
425 379 moveto
425 365 421 353 412 343  curveto
402 333 391 328 377 328  curveto
363 327 351 331 341 341  curveto
331 351 325 363 325 377  curveto
324 391 328 402 338 412  curveto
348 422 360 427 374 428  curveto
388 428 399 424 409 414  curveto
419 404 424 393 425 379  curveto
closepath
700 172 moveto
50 172 lineto
50 224 lineto
700 224 lineto
700 172 lineto
closepath
150 379 moveto
150 365 146 353 137 343  curveto
127 333 116 328 102 328  curveto
88 327 76 331 66 341  curveto
56 351 50 363 50 377  curveto
49 391 53 402 63 412  curveto
73 422 85 427 99 428  curveto
113 428 124 424 134 414  curveto
144 404 149 393 150 379  curveto
closepath
fill
		} def

	/k
		{
868 435 moveto
730 0 lineto
269 0 lineto
132 435 lineto
500 702 lineto
868 435 lineto
closepath
807 415 moveto
500 638 lineto
193 415 lineto
307 52 lineto
692 52 lineto
807 415 lineto
closepath
fill
		} def

	/l
		{
906 351 moveto
703 0 lineto
297 0 lineto
94 351 lineto
297 702 lineto
703 702 lineto
906 351 lineto
closepath
846 351 moveto
673 650 lineto
327 650 lineto
154 351 lineto
327 52 lineto
673 52 lineto
846 351 lineto
closepath
fill
		} def

	/m
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
568 285 moveto
60 285 lineto
60 315 lineto
568 315 lineto
568 285 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/n
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
564 285 moveto
56 285 lineto
56 315 lineto
564 315 lineto
564 285 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/o
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/p
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/q
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 304 moveto
557 279 lineto
50 621 lineto
67 646 lineto
574 304 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/r
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 296 moveto
67 -46 lineto
50 -21 lineto
557 321 lineto
574 296 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/s
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 621 moveto
67 279 lineto
50 304 lineto
557 646 lineto
574 621 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/t
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 -21 moveto
557 -46 lineto
50 296 lineto
67 321 lineto
574 -21 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/u
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/v
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/w
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/x
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/y
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/z
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/braceleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/bar
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/braceright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/asciitilde
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/exclamdown
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/cent
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/sterling
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fraction
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/yen
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/florin
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/section
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/currency
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotesingle
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guillemotleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guilsinglleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guilsinglright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fi
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/endash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/dagger
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/daggerdbl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/periodcentered
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/paragraph
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/bullet
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotesinglbase
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblbase
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guillemotright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ellipsis
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/perthousand
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/questiondown
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/grave
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/acute
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/circumflex
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/tilde
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/macron
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/breve
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dotaccent
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dieresis
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ring
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/cedilla
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/hungarumlaut
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ogonek
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/caron
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/emdash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/AE
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ordfeminine
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/Lslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/Oslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/OE
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ordmasculine
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ae
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dotlessi
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/lslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/oslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/oe
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/germandbls
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/ESSTIXFive exch definefont pop
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
463.0 122.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
454 264 14 15 rc
458.0 276.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
5 0 14 15 rc
9.0 12.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
315 66 23 15 rc
q
319 67 7 13 rc
319.0 78.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
328.0 78.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
1 374 23 15 rc
q
5 375 7 13 rc
5.0 386.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
14.0 386.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
230 44 14 15 rc
234.0 56.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
499 132 14 15 rc
503.0 144.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
319 308 14 15 rc
323.0 320.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
495 242 23 15 rc
q
499 243 7 13 rc
499.0 254.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
508.0 254.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
539 198 23 15 rc
q
543 199 7 13 rc
543.0 210.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
552.0 210.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
225 330 23 15 rc
q
229 331 7 13 rc
229.0 342.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
238.0 342.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
564.0 390.0 l
564.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
Q
q
q
0.4 0.4 0.4 RG
1 13 184 OPL
551 184
Q
0.4 0.4 0.4 RG
q
q
1 13 184 OPL
13 189
-5.0 -5.0 translate
q
7 198 7 13 rc
7.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
16.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(12) show
Q
5.0 5.0 translate
Q
q
1 57 184 OPL
57 189
-5.0 -5.0 translate
q
52 198 7 13 rc
52.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
61.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(11) show
Q
5.0 5.0 translate
Q
q
1 102 184 OPL
102 189
-5.0 -5.0 translate
q
97 198 7 13 rc
97.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
106.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(10) show
Q
5.0 5.0 translate
Q
q
1 147 184 OPL
147 189
-5.0 -5.0 translate
q
145 198 7 13 rc
145.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
154.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(9) show
Q
5.0 5.0 translate
Q
q
1 192 184 OPL
192 189
-5.0 -5.0 translate
q
190 198 7 13 rc
190.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
199.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(8) show
Q
5.0 5.0 translate
Q
q
1 237 184 OPL
237 189
-5.0 -5.0 translate
q
235 198 7 13 rc
235.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
244.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(7) show
Q
5.0 5.0 translate
Q
q
1 282 184 OPL
282 189
-5.0 -5.0 translate
q
279 198 7 13 rc
279.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
288.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(6) show
Q
5.0 5.0 translate
Q
q
1 327 184 OPL
327 189
-5.0 -5.0 translate
q
324 198 7 13 rc
324.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
333.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(5) show
Q
5.0 5.0 translate
Q
q
1 372 184 OPL
372 189
-5.0 -5.0 translate
q
369 198 7 13 rc
369.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
378.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 417 184 OPL
417 189
-5.0 -5.0 translate
q
414 198 7 13 rc
414.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
423.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(3) show
Q
5.0 5.0 translate
Q
q
1 462 184 OPL
462 189
-5.0 -5.0 translate
q
459 198 7 13 rc
459.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
468.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 507 184 OPL
507 189
-5.0 -5.0 translate
q
504 198 7 13 rc
504.0 209.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
513.0 209.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(1) show
Q
5.0 5.0 translate
Q
q
1 551 184 OPL
551 189
-5.0 -5.0 translate
547.0 207.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(0) show
Q
5.0 5.0 translate
Q
Q
0.0 0.0 0.0 RG
q
0.4 0.4 0.4 RG
1 551 382 OPL
551 8
Q
0.4 0.4 0.4 RG
q
q
1 551 360 OPL
545 360
-5.0 -5.0 translate
q
524 358 7 13 rc
524.0 369.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
533.0 369.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(16) show
Q
5.0 5.0 translate
Q
q
1 551 316 OPL
545 316
-5.0 -5.0 translate
q
524 314 7 13 rc
524.0 325.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
533.0 325.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(12) show
Q
5.0 5.0 translate
Q
q
1 551 272 OPL
545 272
-5.0 -5.0 translate
q
530 270 7 13 rc
530.0 281.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
539.0 281.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(8) show
Q
5.0 5.0 translate
Q
q
1 551 228 OPL
545 228
-5.0 -5.0 translate
q
530 226 7 13 rc
530.0 237.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
539.0 237.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 551 184 OPL
545 184
Q
q
1 551 140 OPL
545 140
-5.0 -5.0 translate
539.0 149.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 551 96 OPL
545 96
-5.0 -5.0 translate
539.0 105.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(8) show
Q
5.0 5.0 translate
Q
q
1 551 52 OPL
545 52
-5.0 -5.0 translate
533.0 61.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(12) show
Q
5.0 5.0 translate
Q
q
1 551 8 OPL
545 8
-5.0 -5.0 translate
533.0 18.0 moveto
q 1 -1 scale
/TimesNewRoman findfont 13.0 scalefont setfont
(16) show
Q
5.0 5.0 translate
Q
Q
0.0 0.0 0.0 RG
Q
Q
0 0 574 400 rc
0.0 0.0 translate
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
1.1 w
newpath
7.065108 145.0 m
569.741210 145.0 l
S
1.0 w
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
1.1 w
newpath
7.065108 189.0 m
569.741149 189.0 l
S
1.0 w
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
