%!PS-Adobe-3.0 EPSF-3.0
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 151 38
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
4.725 w
/DeviceRGB {} CS
[0 0 0] SC
356.602 49.875 m
73.1016 49.875 l
S
/DeviceGray {} cs
[0] sc
328.25 49.875 m
470 49.875 l
f*
328.25 49.875 m
470 49.875 l
S
1178.75 49.875 m
895.25 49.875 l
S
753.5 49.875 m
895.25 49.875 l
f*
753.5 49.875 m
895.25 49.875 l
S
1462.25 35.6992 m
1178.75 35.6992 l
S
1476.43 64.0508 m
1192.93 64.0508 l
S
328.25 49.875 m
328.25 333.375 l
S
558.828 49.875 m
558.828 42.5703 552.906 36.6445 545.602 36.6445 c
538.297 36.6445 532.371 42.5703 532.371 49.875 c
532.371 57.1797 538.297 63.1055 545.602 63.1055 c
552.906 63.1055 558.828 57.1797 558.828 49.875 c
f*
2.3625 w
558.828 49.875 m
558.828 42.5703 552.906 36.6445 545.602 36.6445 c
538.297 36.6445 532.371 42.5703 532.371 49.875 c
532.371 57.1797 538.297 63.1055 545.602 63.1055 c
552.906 63.1055 558.828 57.1797 558.828 49.875 c
h
S
624.98 49.875 m
624.98 42.5703 619.055 36.6445 611.75 36.6445 c
604.445 36.6445 598.52 42.5703 598.52 49.875 c
598.52 57.1797 604.445 63.1055 611.75 63.1055 c
619.055 63.1055 624.98 57.1797 624.98 49.875 c
f*
624.98 49.875 m
624.98 42.5703 619.055 36.6445 611.75 36.6445 c
604.445 36.6445 598.52 42.5703 598.52 49.875 c
598.52 57.1797 604.445 63.1055 611.75 63.1055 c
619.055 63.1055 624.98 57.1797 624.98 49.875 c
h
S
695.855 49.875 m
695.855 42.5703 689.93 36.6445 682.625 36.6445 c
675.32 36.6445 669.395 42.5703 669.395 49.875 c
669.395 57.1797 675.32 63.1055 682.625 63.1055 c
689.93 63.1055 695.855 57.1797 695.855 49.875 c
f*
695.855 49.875 m
695.855 42.5703 689.93 36.6445 682.625 36.6445 c
675.32 36.6445 669.395 42.5703 669.395 49.875 c
669.395 57.1797 675.32 63.1055 682.625 63.1055 c
689.93 63.1055 695.855 57.1797 695.855 49.875 c
h
S
/DeviceRGB {} cs
[1 1 1] sc
84.7539 49.875 m
84.7539 27.7812 66.8438 9.8711 44.75 9.8711 c
22.6562 9.8711 4.7461 27.7812 4.7461 49.875 c
4.7461 71.9688 22.6562 89.8789 44.75 89.8789 c
66.8438 89.8789 84.7539 71.9688 84.7539 49.875 c
f*
4.725 w
84.7539 49.875 m
84.7539 27.7812 66.8438 9.8711 44.75 9.8711 c
22.6562 9.8711 4.7461 27.7812 4.7461 49.875 c
4.7461 71.9688 22.6562 89.8789 44.75 89.8789 c
66.8438 89.8789 84.7539 71.9688 84.7539 49.875 c
h
S
368.254 49.875 m
368.254 27.7812 350.344 9.8711 328.25 9.8711 c
306.156 9.8711 288.246 27.7812 288.246 49.875 c
288.246 71.9688 306.156 89.8789 328.25 89.8789 c
350.344 89.8789 368.254 71.9688 368.254 49.875 c
f*
368.254 49.875 m
368.254 27.7812 350.344 9.8711 328.25 9.8711 c
306.156 9.8711 288.246 27.7812 288.246 49.875 c
288.246 71.9688 306.156 89.8789 328.25 89.8789 c
350.344 89.8789 368.254 71.9688 368.254 49.875 c
h
S
1218.75 49.875 m
1218.75 27.7812 1200.84 9.8711 1178.75 9.8711 c
1156.66 9.8711 1138.75 27.7812 1138.75 49.875 c
1138.75 71.9688 1156.66 89.8789 1178.75 89.8789 c
1200.84 89.8789 1218.75 71.9688 1218.75 49.875 c
f*
1218.75 49.875 m
1218.75 27.7812 1200.84 9.8711 1178.75 9.8711 c
1156.66 9.8711 1138.75 27.7812 1138.75 49.875 c
1138.75 71.9688 1156.66 89.8789 1178.75 89.8789 c
1200.84 89.8789 1218.75 71.9688 1218.75 49.875 c
h
S
935.254 49.875 m
935.254 27.7812 917.344 9.8711 895.25 9.8711 c
873.156 9.8711 855.246 27.7812 855.246 49.875 c
855.246 71.9688 873.156 89.8789 895.25 89.8789 c
917.344 89.8789 935.254 71.9688 935.254 49.875 c
f*
935.254 49.875 m
935.254 27.7812 917.344 9.8711 895.25 9.8711 c
873.156 9.8711 855.246 27.7812 855.246 49.875 c
855.246 71.9688 873.156 89.8789 895.25 89.8789 c
917.344 89.8789 935.254 71.9688 935.254 49.875 c
h
S
1504.14 51.4492 m
1504.14 29.3555 1486.23 11.4453 1464.14 11.4453 c
1442.05 11.4453 1424.14 29.3555 1424.14 51.4492 c
1424.14 73.543 1442.05 91.4531 1464.14 91.4531 c
1486.23 91.4531 1504.14 73.543 1504.14 51.4492 c
f*
1504.14 51.4492 m
1504.14 29.3555 1486.23 11.4453 1464.14 11.4453 c
1442.05 11.4453 1424.14 29.3555 1424.14 51.4492 c
1424.14 73.543 1442.05 91.4531 1464.14 91.4531 c
1486.23 91.4531 1504.14 73.543 1504.14 51.4492 c
h
S
368.254 333.375 m
368.254 311.281 350.344 293.371 328.25 293.371 c
306.156 293.371 288.246 311.281 288.246 333.375 c
288.246 355.469 306.156 373.379 328.25 373.379 c
350.344 373.379 368.254 355.469 368.254 333.375 c
f*
368.254 333.375 m
368.254 311.281 350.344 293.371 328.25 293.371 c
306.156 293.371 288.246 311.281 288.246 333.375 c
288.246 355.469 306.156 373.379 328.25 373.379 c
350.344 373.379 368.254 355.469 368.254 333.375 c
h
S
1375 35.6992 m
1379.72 35.6992 l
S
1348.85 7.3516 m
1377.2 49.875 l
1348.85 92.3984 l
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
