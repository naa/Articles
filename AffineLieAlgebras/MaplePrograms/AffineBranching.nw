\documentclass[a4paper,10pt]{article}
\usepackage[unicode,verbose]{hyperref}
\usepackage{amsmath,amssymb,amsthm} \usepackage{pb-diagram}
\usepackage{ucs}
\usepackage{noweb}
%\usepackage[utf8x]{inputenc}
%\usepackage[russian]{babel}
\usepackage{cmap}
%\usepackage[pdftex]{graphicx}
\pagestyle{plain}
\theoremstyle{definition} \newtheorem{Def}{Definition}
\begin{document}

%\usepackage{verbatim}
\newenvironment{comment}
{\par\noindent{\bf TODO}\\}
{\\\hfill$\scriptstyle\blacksquare$\par}

@

\section{Introduction}
\label{sec:introduction}

This program is supposed to be used for the calculation of the branching coefficients for the reduction of the representation of affine Lie algebra to the affine subalgebra.

For now the algebra should be simple and the embedded subalgebra is described by the set of simple roots.

We use the following algorithm, based on the recurrent relation
\begin{equation}
  k_{\xi }^{\left( \mu \right) }=
  -\frac{1}{s\left( \gamma _{0}\right) }
  \left(
    \sum_{\omega\in W_{\bot}\backslash W} \epsilon(\omega)\; \mathrm{dim}
    \left(L^{\pi_{\mathfrak{a}_{\bot}}(\omega(\mu+\rho))-\rho_{\mathfrak{a}_{\bot}}}_{\mathfrak{a}_{\bot}}\right)
    \delta_{\xi-\gamma_0,\pi_{\mathfrak{a}}(\omega(\mu+\rho)-\rho)}+
    \sum_{\gamma \in \Gamma _{\frak{a}\subset \frak{g}}} s\left( \gamma +\gamma _{0}\right) k_{\xi+\gamma }^{\left( \mu \right) }
  \right)
\label{recurrent relation}
\end{equation}
where the set
\begin{equation}
\Gamma _{\frak{a}\subset \frak{g}}=\left\{ \xi -\gamma _{0}|\xi \in \Phi _{%
\frak{a}\subset \frak{g}}\right\} \setminus \left\{ 0\right\} .
\label{fan-defined}
\end{equation}
and $Phi$ is defined as follows.
\begin{equation}
  \label{eq:11}
    \prod_{\alpha\in \pi_{\mathfrak{a}}\circ (\Delta^{+}\setminus \Delta_{\bot})} \left(1-e^{-\alpha}\right)^{\mathrm{mult}(\alpha)-\mathrm{mult}_{\mathfrak{a}}(\alpha)}=
     -\sum_{\gamma\in P_{\mathfrak{a}}} s(\gamma)e^{-\gamma}
\end{equation}

For the coefficient function $s\left( \gamma \right) $ define $\Phi _{\frak{a%
}\subset \frak{g}}\subset P_{\frak{a}}$ as its carrier:
\begin{equation}
\Phi _{\frak{a}\subset \frak{g}}=\left\{ \gamma \in P_{\frak{a}}\mid s\left(
\gamma \right) \neq 0\right\} ;  \label{phi-d}
\end{equation}
\begin{equation}
\prod_{\alpha\in \pi_{\mathfrak{a}}\circ (\Delta^{+}\setminus \Delta_{\bot})}\left(1-e^{-\alpha }\right) ^{\mathrm{{mult}\left( \alpha \right) -{mult}_{\frak{a}}}\mathrm{\left( \alpha \right) }}=-\sum_{\gamma \in \Phi _{\frak{a}\subset
\frak{g}}}s\left( \gamma \right) e^{-\gamma }.  \label{fan-d}
\end{equation}

\subsection{The algorithm}
\label{sec:algorithm}

\begin{enumerate}
\item Construct the set $\Delta^{+}$ of the positive roots of the algebra $\mathfrak{g}$.
\item Select the positive roots $\alpha\in \Delta^{+}$ which are orthogonal to the root subspace of the subalgebra $\mathfrak{a}$ and form the set $\Delta_{\bot}$.
\item Construct the set $\widehat{\Psi^{(\mu)}}=\left\{\omega(\mu+\rho)-\rho;\; \omega\in W\right\}$ of the anomalous points of the $\mathfrak{g}$-module $L^{(\mu)}$.
\item Select those weights $\lambda=\omega(\mu+\rho)$ which lies in the closure of the main Weyl chamber of the algebra $\mathfrak{a}_{\bot}$. Since we have constructed the set $\Delta_{\bot}$ we can easily check if the weight $\lambda$ lies in the main Weyl chamber of $\mathfrak{a}_{\bot}$ checking that the scalar product of $\lambda$ with the roots of $\Delta_{\bot}$ is non-negative.
\item For $\lambda=\omega(\mu+\rho),\; \lambda\in \bar{C}_{\mathfrak{a}_{\bot}}$ calculate the dimensions of the corresponding modules $\mathrm{dim}\left(L^{\pi_{\mathfrak{a}_{\bot}}(\omega(\mu+\rho))-\rho_{\mathfrak{a}_{\bot}}}_{\mathfrak{a}_{\bot}}\right)$ using the Weyl formula with the set $\Delta_{\bot}$.
\item Construct the set $\Gamma$ \eqref{fan-defined}.
\item Calculate anomalous branching coefficients in the main Weyl
  chamber of the subalgebra $\mathfrak{a}$ using recurrent relation (\ref{recurrent relation}).
\end{enumerate}

\section{The code}
\label{sec:code}

\subsection{Usage example}
\label{sec:usage-example}

We put an example of usage in the separate file.
We want to have a function [[branching]], which can be used as follows
<<AffineBranchingExample.mpl>>=
#! maple
read("AffineBranching.mpl"):
<<Example of usage.mpl>>
@
<<Example of usage.mpl>>=
<<Prepare embedding.mpl>>
br_coeffs:=branching(highest_weight,embedded_A1_roots,embedded_A1_pos_roots,A2,12);

plots[textplot](map(x->[coeff(x[1],delta),2*coeff(x[1],e1),x[2]],map(x->[x,br_coeffs[x]],select(y->coeff(y,delta)<=0 and coeff(y,delta)>=-8,get_indices(br_coeffs)))));

with(plots);
Grid:= seq(seq(spacecurve([[i,j*2,-6],[i,j*2,6]],
     colour="LightGray",linestyle=dash),i=-6..0),j=-3..3),
         seq(seq(spacecurve([[i,-6,j*2],[i,6,j*2]],
     colour="LightGray",linestyle=dash),i=-6..0),j=-3..3),
         seq(spacecurve([[0,i,i],[-6,i,i]],
     colour="LightGray",linestyle=spacedot),i=-6..6),
         seq(spacecurve([[i,-6,-6],[i,6,6]],
     colour="LightGray",linestyle=spacedot),i=-6..0):
ap:=anomalous_points(wg[-1],A2,6);
thep:=PLOT3D(POINTS(op(map(x->[coeff(x,delta),coeff(x,e1),coeff(x,e2)],select(y->coeff(y,eps)>0,ap))),SYMBOL(CROSS)),POINTS(op(map(x->[coeff(x,delta),coeff(x,e1),coeff(x,e2)],select(y->coeff(y,eps)<0,ap))),SYMBOL(DIAMOND)));
display([thep,Grid],axes=boxed);

ppts:=map(x->
             affine_projection(subs(eps=0,x),subalgebra_roots)+eps*coeff(x,eps),
            ap):
plots[textplot](map(x->[coeff(x,delta),2*coeff(x,e1),coeff(x,eps)],ppts));
@
The preparation is simple --- we should choose the basis of the embedded algebra and the highest weight of the representation.

<<Prepare embedding.mpl>>=
wg:=weights(A2);
highest_weight:=wg[-1];

al:=algebra_roots(A2);
embedded_A1_roots:=[(al[1]+al[2])/2,delta-(al[1]+al[2])/2];
embedded_A1_pos_roots:=subs({e1=e1/2,e2=e3/2},positive_roots(A1,12));
@
Is the last line correct?

@
We assume that the roots $\alpha_1\dots \alpha_{r-1}$ are the roots of the corresponding finite-dimensional algebra, and $\alpha_0$ is written as the last component in the list of roots, so that [[al[-1]]]=$\alpha_0$.

The branching procedure is the realisation of the algorithm from the section \ref{sec:algorithm}.
<<Branching.mpl>>=
branching:=proc(highest_weight,subalgebra_roots,subalgebra_pos_roots,algebra_name,max_grade)
    local <<Local variables.mpl>> k;
    <<Construct the set of the positive roots of the algebra.mpl>>
    <<Select the orthogonal roots.mpl>>
    <<Construct the set of the anomalous point.mpl>>
    <<Select points in the main chamber of Abot.mpl>>
    <<Compute the dimensions of modules.mpl>>
    <<Construct the fan.mpl>>
    <<Get gamma0.mpl>>
    <<Recurrent procedure.mpl>>
    <<Use recurrent relation.mpl>>
    <<Return result.mpl>>
end;
@
To construct the set of the positive roots of the algebra we use the procedure [[positive_roots]], implemented in the file [[``affine.mpl'']].
\begin{comment}
  Add here the computation of the subalgebra positive roots
\end{comment}
<<Construct the set of the positive roots of the algebra.mpl>>=
algebra_simple_roots:=algebra_roots(algebra_name);
#print(algebra_simple_roots);
algebra_pos_roots:=positive_roots(algebra_name,max_grade);
rho:=weyl_vector(algebra_name);
#print(rho);
# Next line is incorrect
# I don't know how to fix it.
#subalgebra_pos_roots:=map(x->-x,
#                          coxeter['orbit'](map(x->-x,subalgebra_roots[1..-2]),
#                                           subalgebra_roots[1..-2]));
#print(subalgebra_pos_roots);
<<Local variables.mpl>>=
algebra_pos_roots, algebra_simple_roots,
rho,
@
Then we need to select the roots, which are orthogonal
<<Select the orthogonal roots.mpl>>=
Abot_roots:=select(x->affine_projection(subs(eps=0,x),subalgebra_roots)=0,algebra_pos_roots);
Abot_rho:=1/2*convert(Abot_roots,`+`);
#print(Abot_roots);
@
<<Local variables.mpl>>=
Abot_roots,Abot_rho,
@
Level of the embedding is important
<<Supplementary functions.mpl>>=
get_indices:=r->map(x->x[1],[indices(r)]);
iprod := (v1,v2) -> coeff(v1,lambda0)*coeff(v2,delta)
                          +coeff(v1,delta)*coeff(v2,lambda0)+
                          coxeter['iprod'](subs({lambda0=0,delta=0,eps=0},v1),
                                           subs({lamda0=0,delta=0,eps=0},v2));
pairing:=(v1,v2) -> 2*iprod(v1,v2)/iprod(v2,v2);

projection:=proc(weights,base)
    local cm;
    if nops(base)<=0 then
        return [];
    fi;
    cm:=linalg[inverse](
            array([seq([seq(iprod(r1,s),s=base)],r1=[seq(2*r/iprod(r,r),r=base)])]));
    if type(weights,'list') then
        map(x->convert(zip(`*`,
                           convert(linalg[multiply](cm,array(map(y->pairing(x,y),base))),'list'),
                           base)
                       ,`+`),weights);
    else
        convert(zip(`*`,
                    convert(linalg[multiply](cm,array(map(y->pairing(weights,y),base))),'list'),
                    base),`+`);
    end;
end;

projection1:=proc(weights,roots)
	map(x->projection(subs(eps=0,x),roots[1..-2])+delta*coeff(x,delta)+eps*coeff(x,eps),weights); end;

affine_projection:=proc(w,roots)
           if type(w,'list') then
               map(x->projection(subs(eps=0,x),roots[1..-2])+delta*coeff(x,delta)+eps*coeff(x,eps),w);
           else
               projection(subs(eps=0,w),roots[1..-2])+delta*coeff(w,delta)+eps*coeff(w,eps);
           end;
       end;

embedding_level:=proc(embedded_roots,algebra_name)
              local pa,s;
              pa:=projection(highest_root(algebra_name),embedded_roots[1..-2]);
              s:=coxeter['highest_root'](embedded_roots[1..-2]);
              return iprod(pa,pa)/iprod(s,s);
          end;

@
The construction of the set of the anomalous points is simple, since
we already have the procedure [[anomalous_points]]
<<Construct the set of the anomalous point.mpl>>=
anom_points:=[op(anomalous_points(highest_weight,algebra_name,max_grade))]:
<<Local variables.mpl.mpl>>=
anom_points,

@
Then we select
select those weights $\lambda=\omega(\mu+\rho)$ which lies in the closure of the main Weyl chamber of the algebra $\mathfrak{a}_{\bot}$. Since we have constructed the set $\Delta_{\bot}$ we can easily check if the weight $\lambda$ lies in the main Weyl chamber of $\mathfrak{a}_{\bot}$ checking that the scalar product of $\lambda$ with the roots of $\Delta_{\bot}$ is non-negative.

<<Select points in the main chamber of Abot.mpl>>=
selected_points:=select(x->
                        andmap(y->iprod(x+rho-projection(x+rho,subalgebra_roots),y)>=0,
                               Abot_roots),
                        anom_points):
#print(nops(selected_points));
<<Local variables.mpl>>=
selected_points,
@
For $\lambda=\omega(\mu+\rho),\; \lambda\in \bar{C}_{\mathfrak{a}_{\bot}}$ calculate the dimensions of the corresponding modules $\mathrm{dim}\left(L^{\pi_{\mathfrak{a}_{\bot}}(\omega(\mu+\rho))-\rho_{\mathfrak{a}_{\bot}}}_{\mathfrak{a}_{\bot}}\right)$ using the Weyl formula with the set $\Delta_{\bot}$.
<<Compute the dimensions of modules.mpl>>=
dimension:=proc(v,pos_roots) local f,r0;
    r0:=convert(pos_roots,`+`)/2;
    f:=[seq(1+coxeter['iprod'](r,v)/coxeter['iprod'](r,r0),r=pos_roots)];
    convert(f,`*`)
end;

ppts:=map(x->
             affine_projection(subs(eps=0,x),subalgebra_roots)+eps*coeff(x,eps)*
                        dimension(projection(x+rho,Abot_roots)-Abot_rho,Abot_roots),
            selected_points):
<<Local variables.mpl>>=
ppts, dimension,
@
Then we construct the set $\Gamma$ \eqref{fan-defined}.
<<Construct the fan.mpl>>=
<<Count multiplicities of projected roots.mpl>>
<<Expand roots with multiplicities.mpl>>
@
We will use Maple [[table]] data type

<<Count multiplicities of projected roots.mpl>>=
mult_table:=table();

for r in affine_projection([op({op(algebra_pos_roots)}
                        minus {op(Abot_roots)})],subalgebra_roots)
    do
#        print(r);
        if assigned(mult_table[subs(eps=0,r)]) then
            mult_table[subs(eps=0,r)]:=mult_table[subs(eps=0,r)]+coeff(r,eps);
        else
    	mult_table[subs(eps=0,r)]:=coeff(r,eps);
        end;
    end;

@
Then we need to expand the expression \eqref{eq:7}.
We use procedures [[fan]] and [[inj_roots]].
<<Expand roots with multiplicities.mpl>>=
     mult_inj:=proc(r,roots)
             if assigned(roots[subs(eps=0,r)]) then
                 return roots[subs(eps=0,r)];
             else
                 return 0;
             fi;
         end proc:

    fan_table:=proc(pos_roots,inj_roots)
    local t,n,t2,res,p,j;
        n:=coeff(pos_roots[1],eps)-mult_inj(pos_roots[1],inj_roots);
        res:=table();
        p:=subs(eps=0,pos_roots[1]);
        if nops(pos_roots)=1 then
            for j from 1 to n do
                    res[j*p]:=(-1)^(j) * binomial(n,j);
            od;
            return res;
        else
            t:=fan_table(pos_roots[2..-1],inj_roots);
            t2:=fan_table([pos_roots[1]],inj_roots);
            for x in get_indices(t) do
                for j from 1 to n do
                    if not(assigned(res[p*j+x])) then res[p*j+x]:=0; fi;
                    res[p*j+x]:=res[p*j+x]+t[x]*(-1)^(j) * binomial(n,j);
                od;
                if not(assigned(res[x])) then res[x]:=0; fi;
                res[x]:=res[x]+t[x];
            od;
            for x in get_indices(t2) do
                if not(assigned(res[x])) then res[x]:=0; fi;
                res[x]:=res[x]+t2[x];
            od;
            return res;
        fi;
    end proc:

    fan:=proc(pos_roots,inj_roots)
        local t;
        t:=fan_table(pos_roots,inj_roots);
        if assigned(t[0]) then t[0]:=t[0]+1;
        else
            t[0]:=1;
        end;
        select(x->coeff(x,eps)<>0,map(x->x+t[x]*eps,get_indices(t)));
    end proc:

    inj_roots:=proc(roots)
            local t;
            t:=table();
            for x in roots do
                t[subs(eps=0,x)]:=1;
            od;
            return t;
        end proc:

    pppr:=map(x->x+eps*mult_table[x],get_indices(mult_table));

f:=fan(pppr,inj_roots(subalgebra_pos_roots));
f1:=select(x->coeff(x,delta)<=12,f);
<<Local variables.mpl>>=
f, fan, inj_roots, fant_table,
@
Then we select the lowest root of the set $\Gamma$, which we denote by $\gamma_0$
<<Get gamma0.mpl>>=
gamma0:=f1[1];
subalgebra_rho:=subs(delta=lambda0,convert(subalgebra_roots,`+`)/2);

for r in f1 do
  if iprod(r,subalgebra_rho)<iprod(gamma0,subalgebra_rho) and coeff(r,delta)<=coeff(gamma0,delta) then
     gamma0:=r;
  end;
end;
Gamma:=select(y->subs(eps=0,y)<>0,map(x->x-subs(eps=0,gamma0),f1));
<<Local variables.mpl>>=
Gamma, gamma0,

@
Now we can write recurrent procedure, which computes the branching coefficients using constructed sets $\Psi, \Gamma$.
<<Recurrent procedure.mpl>>=
calculate_branching_coefficient:=proc(xi,fan,gamma0,ap,res,is_in_borders)
       local xi0,a;
           if not is_in_borders(xi) then return 0; fi;
           xi0:=subs(eps=0,xi);
           if assigned(res[xi0]) then
               return res[xi0];
           fi;

           res[xi0]:=convert(
                         map(gam->coeff(gam,eps)*
                                  calculate_branching_coefficient(xi+subs(eps=0,gam),
                                                                  fan,gamma0,ap,res,
                                                                  is_in_borders),fan)
                     ,`+`);
           if assigned(ap[xi0-subs(eps=0,gamma0)]) then
               res[xi0]:=res[xi0]+ap[xi0-subs(eps=0,gamma0)];
           end;
           res[xi0]:=-1/coeff(gamma0,eps)*res[xi0];
           return res[xi0];
       end proc:

@
The final piece - call the recurrent procedure
<<Use recurrent relation.mpl>>=
is_in_borders:=proc(p,borders)
          local ind,c1,c2;
          for ind in indets(borders) do
              c1:=coeff(p,ind);
              c2:=coeff(borders,ind);
              if c1<c2[1] or c1>c2[2] then
                  return false;
              fi;
          od;
          return true;
      end proc;

external_border:=proc(points)
             local p,p1,res,ind,c1,c2;
             res:=0;
             for p1 in points do
                 p:=subs({eps=0,lambda0=0},p1);
                 for ind in indets(p) do
                     c1:=coeff(p,ind);
                     c2:=coeff(res,ind);
                     if c2=0 then
                         res:=res+[c1,c1]*ind;
                     elif c1<c2[1] then
                         res:=subs(ind=0,res)+[c1,c2[2]]*ind;
                     elif c1>c2[2] then
                         res:=subs(ind=0,res)+[c2[1],c1]*ind;
                     fi;
                 od;
             od;
             return res;
         end proc;

borders:=external_border([op(ppts),1*delta,-max_grade*delta]);
i_i_b:=rcurry(is_in_borders,borders);

sing_table:=table();
for v in ppts do
    if assigned(sing_table[subs(eps=0,v)]) then
        sing_table[subs(eps=0,v)]:=sing_table[subs(eps=0,v)]+coeff(v,eps);
    else

        sing_table[subs(eps=0,v)]:=coeff(v,eps);
    fi;
end;

mu0:=affine_projection(highest_weight-max_grade*delta,subalgebra_roots);
t:=table();
#calculate_branching_coefficient(-mu0,Gamma,gamma0,sing_table,t,i_i_b);

calculate_branching_coefficient(mu0,Gamma,gamma0,sing_table,t,i_i_b);

<<Return result.mpl>>=
return t;
@
We need some initialisation - graphics system, libraries etc
<<Initialisation.mpl>>=
read("affine.mpl"):
plotsetup(X11);
@
<<AffineBranching.mpl>>=
#!/opt/maple11/bin/maple
<<Initialisation.mpl>>
<<Supplementary functions.mpl>>
<<Branching.mpl>>
@
Here we show some useful constructs
<<Some useful constructs.mpl>>=
with(plots);
Grid:= seq(seq(spacecurve([[i,j*2,-8],[i,j*2,6]],
     colour="LightGray",linestyle=dash),i=-6..0),j=-4..3),
         seq(seq(spacecurve([[i,-8,j*2],[i,6,j*2]],
     colour="LightGray",linestyle=dash),i=-6..0),j=-4..3):
ap:=anomalous_points(wg[1],B2,6);
thep:=PLOT3D(POINTS(op(map(x->[coeff(x,delta),coeff(x,e1),coeff(x,e2)],select(y->coeff(y,eps)>0,ap))),SYMBOL(CROSS)),POINTS(op(map(x->[coeff(x,delta),coeff(x,e1),coeff(x,e2)],select(y->coeff(y,eps)<0,ap))),SYMBOL(DIAMOND)));
display([thep,Grid],axes=boxed);

wg:=weights(B2);
ap:=anomalous_points(wg[1],B2,12):
thep:=select(x->iprod(x+rho1,e1-e2)>=0,ap):
rho1:=weyl_vector(B2):

dimension:=proc(v,pos_roots) local f,r0;
    r0:=convert(pos_roots,`+`)/2;
    f:=[seq(1+coxeter['iprod'](r,v)/coxeter['iprod'](r,r0),r=pos_roots)];
    convert(f,`*`)
end;

ppts:=map(x->
             projection(subs(eps=0,x),[e1+e2])+coeff(x,delta)*delta+
                        eps*coeff(x,eps)*
                        dimension(projection(x+rho1,[e1-e2])
                        -(e1-e2)/2,[e1-e2]),
            thep):

mult_table:=table();
algebra_pos_roots:=positive_roots(B2,12);
subalgebra_roots:=[e1+e2,delta-e1-e2];
Abot_roots:=[e1-e2+eps];

for r in projection1([op({op(algebra_pos_roots)}
                        minus {op(Abot_roots)})],subalgebra_roots)
    do
        print(r);
        if assigned(mult_table[subs(eps=0,r)]) then
            mult_table[subs(eps=0,r)]:=mult_table[subs(eps=0,r)]+coeff(r,eps);
        else
    	mult_table[subs(eps=0,r)]:=coeff(r,eps);
        end;
    end;

     mult_inj:=proc(r,roots)
             if assigned(roots[subs(eps=0,r)]) then
                 return roots[subs(eps=0,r)];
             else
                 return 0;
             fi;
         end proc:

    fan_table:=proc(pos_roots,inj_roots)
    local t,n,t2,res,p,j;
        n:=coeff(pos_roots[1],eps)-mult_inj(pos_roots[1],inj_roots);
        res:=table();
        p:=subs(eps=0,pos_roots[1]);
        if nops(pos_roots)=1 then
            for j from 1 to n do
                    res[j*p]:=(-1)^(j) * binomial(n,j);
            od;
            return res;
        else
            t:=fan_table(pos_roots[2..-1],inj_roots);
            t2:=fan_table([pos_roots[1]],inj_roots);
            for x in get_indices(t) do
                for j from 1 to n do
                    if not(assigned(res[p*j+x])) then res[p*j+x]:=0; fi;
                    res[p*j+x]:=res[p*j+x]+t[x]*(-1)^(j) * binomial(n,j);
                od;
                if not(assigned(res[x])) then res[x]:=0; fi;
                res[x]:=res[x]+t[x];
            od;
            for x in get_indices(t2) do
                if not(assigned(res[x])) then res[x]:=0; fi;
                res[x]:=res[x]+t2[x];
            od;
            return res;
        fi;
    end proc:

    fan:=proc(pos_roots,inj_roots)
        local t;
        t:=fan_table(pos_roots,inj_roots);
        if assigned(t[0]) then t[0]:=t[0]+1;
        else
            t[0]:=1;
        end;
        select(x->coeff(x,eps)<>0,map(x->x+t[x]*eps,get_indices(t)));
    end proc:

    inj_roots:=proc(roots)
            local t;
            t:=table();
            for x in roots do
                t[subs(eps=0,x)]:=1;
            od;
            return t;
        end proc:

    pppr:=map(x->x+eps*mult_table[x],get_indices(mult_table));

subalgebra_pos_roots:=subs({e2=-e2},positive_roots(A1,12));
f:=fan(pppr,inj_roots(subalgebra_pos_roots)):
f1:=select(x->coeff(x,delta)<=12,f);

gamma0:=f1[1];
for r in f1 do
  if iprod(r,subalgebra_rho)<iprod(gamma0,subalgebra_rho) and coeff(r,delta)<=coeff(gamma0,delta) then
     gamma0:=r;
  end;
end;
Gamma:=select(y->subs(eps=0,y)<>0,map(x->x-subs(eps=0,gamma0),f1));


is_in_borders:=proc(p,borders)
          local ind,c1,c2;
          for ind in indets(borders) do
              c1:=coeff(p,ind);
              c2:=coeff(borders,ind);
              if c1<c2[1] or c1>c2[2] then
                  return false;
              fi;
          od;
          return true;
      end proc;

external_border:=proc(points)
             local p,p1,res,ind,c1,c2;
             res:=0;
             for p1 in points do
                 p:=subs({eps=0,lambda0=0},p1);
                 for ind in indets(p) do
                     c1:=coeff(p,ind);
                     c2:=coeff(res,ind);
                     if c2=0 then
                         res:=res+[c1,c1]*ind;
                     elif c1<c2[1] then
                         res:=subs(ind=0,res)+[c1,c2[2]]*ind;
                     elif c1>c2[2] then
                         res:=subs(ind=0,res)+[c2[1],c1]*ind;
                     fi;
                 od;
             od;
             return res;
         end proc;

borders:=external_border([op(ppts),1*delta,-13*delta]);
i_i_b:=rcurry(is_in_borders,borders);

sing_table:=table();
for v in ppts do
  sing_table[subs(eps=0,v)]:=coeff(v,eps);
end;

mu0:=projection1(wg[1]+12*delta,subalgebra_roots);
t:=table();
#calculate_branching_coefficient(-mu0,Gamma,gamma0,sing_table,t,i_i_b);

calculate_branching_coefficient(-8*(e1+e2)-12*delta,Gamma,gamma0,sing_table,t,i_i_b);
plots[textplot](map(x->[coeff(x,delta),iprod(x,e1/2+e2/2),-t[x]],select(y->coeff(y,delta)<=0,get_indices(t))));
pp1:=select(x->is_in_main_chamber(subs(e2=-e2,x+lambda0),A1),select(y->coeff(y,delta)<=0,get_indices(t)));
map(x->cat(-t[x]," L_{\hat{A_1}}^{w_",iprod(x,e1+e2),"}(",coeff(x,delta),")"),pst);
pst:=sort(select(x->iprod(x,e1+e2)=0,pp1),(x,y)->coeff(x,delta)>coeff(y,delta)):
map(x->cat(-t[x]," q^{",-coeff(x,delta),"}"),pst);

pst:=sort(select(x->iprod(x,e1+e2)=1,pp1),(x,y)->coeff(x,delta)>coeff(y,delta)):
map(x->cat(-t[x]," q^{",-coeff(x,delta),"}"),pst);
@

Temporary computational tools
<<TemComp.mpl>>=
<<Some useful constructs.mpl>>
@
\end{document}
